// This code conforms with the UFC specification version 2017.2.0
// and was automatically generated by FFC version 2017.2.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#ifndef __ERRORIPDG1_H
#define __ERRORIPDG1_H
#include <algorithm>
#include <cmath>
#include <iostream>
#include <stdexcept>
#include <ufc.h>

class erroripdg1_finite_element_0: public ufc::finite_element
{
public:

  erroripdg1_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~erroripdg1_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', triangle, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 3;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 3 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[3] = {};
    const std::size_t num_components[3] = { 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 3; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[3 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 3 * num_derivatives, 0.0);
    const std::size_t reference_offsets[3] = {};
    const std::size_t physical_offsets[3] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 3; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[3 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[3 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[3];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[3];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 3, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[6] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 6, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new erroripdg1_finite_element_0();
  }

};


class erroripdg1_finite_element_1: public ufc::finite_element
{
public:

  erroripdg1_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~erroripdg1_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 6;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 6 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 3 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 4 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 5 + 1] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 6 * num_derivatives * 2, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t num_components[6] = { 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 6; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 6 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t physical_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 6; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[12];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[12];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 6, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[3] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[5] = dof_values[5];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = coordinate_dofs[0];
    dof_coordinates[2 * 3 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 4] = coordinate_dofs[2];
    dof_coordinates[2 * 4 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 5] = coordinate_dofs[4];
    dof_coordinates[2 * 5 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new erroripdg1_finite_element_0();
    case 1:
        return new erroripdg1_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new erroripdg1_finite_element_1();
  }

};


class erroripdg1_finite_element_2: public ufc::finite_element
{
public:

  erroripdg1_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~erroripdg1_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', triangle, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][1] = { { 1.0 } };
    for (std::size_t k = 0; k < num_points; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basisvalues for each relevant embedded degree
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        // Accumulate products of coefficients and basisvalues
        reference_values[ip] += coefficients0[0][0] * basisvalues0[0];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * num_derivatives, 0.0);
    if (order > 0)
        return;
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    std::fill_n(values, num_points, 0.0);
    const std::size_t reference_offsets[1] = {};
    const std::size_t physical_offsets[1] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[1][1];
        for (std::size_t r = 0; r < 1; ++r)
            for (std::size_t s = 0; s < 1; ++s)
                transform[r][s] = 1.0;
        for (std::size_t d = 0; d < 1; ++d)
        {
            for (std::size_t s = 0; s < 1; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[ip + d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < 1; ++r)
                        values[ip + d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
    }
    // Evaluate basis on reference element
    double ref_values[1];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[1];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[2] = { 0.3333333333333333, 0.3333333333333333 };
    std::copy_n(dof_X, 2, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new erroripdg1_finite_element_2();
  }

};


class erroripdg1_finite_element_3: public ufc::finite_element
{
public:

  erroripdg1_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~erroripdg1_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Discontinuous Lagrange', triangle, 4)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 15;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 4;
  }

  const char * family() const final override
  {
    return "Discontinuous Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][15] = { { 0.0, -0.04123930494211611, -0.023809523809523794, 0.0289800294976278, 0.02244783432338244, 0.012960263189328946, -0.03959425806109994, -0.03346325566315745, -0.02592052637865798, -0.01496522288225498, 0.03212472543663117, 0.028331344813852282, 0.023944356611607962, 0.01854721887848183, 0.010708241812210409 } };
    static const double coefficients1[1][15] = { { 0.0, 0.04123930494211617, -0.023809523809523832, 0.02898002949762785, -0.02244783432338247, 0.012960263189328969, 0.03959425806109991, -0.03346325566315744, 0.025920526378657945, -0.014965222882254959, 0.03212472543663116, -0.028331344813852296, 0.023944356611607955, -0.018547218878481802, 0.010708241812210386 } };
    static const double coefficients2[1][15] = { { 0.0, 0.0, 0.04761904761904756, 0.0, 0.0, 0.03888078956798697, 0.0, 0.0, 0.0, 0.05986089152901992, 0.0, 0.0, 0.0, 0.0, 0.053541209061051906 } };
    static const double coefficients3[1][15] = { { 0.1257078722109417, 0.1319657758147716, -0.025396825396825362, 0.13910414158861362, -0.07183306983482383, 0.031104631654389585, 0.06335081289775982, 0.026770604530525925, -0.06220926330877914, 0.047888713223215904, 0.0, 0.056662689627704536, -0.08380524814062786, 0.08346248495316816, -0.05354120906105194 } };
    static const double coefficients4[1][15] = { { -0.03142696805273546, 0.010997147984564326, 0.006349206349206258, 0.0, 0.18856180831641273, -0.16329931618554516, 0.0, 0.09369711585684087, 0.0, -0.04190262407031389, 0.0, 0.0, 0.08380524814062784, -0.13910414158861362, 0.10708241812210381 } };
    static const double coefficients5[1][15] = { { 0.12570787221094165, 0.04398859193825734, 0.12698412698412695, 0.0, 0.035916534917411994, 0.15552315827194782, 0.0, 0.0, 0.10368210551463188, -0.011972178305803988, 0.0, 0.0, 0.0, 0.09273609439240912, -0.10708241812210383 } };
    static const double coefficients6[1][15] = { { 0.12570787221094193, -0.13196577581477165, -0.02539682539682538, 0.13910414158861362, 0.07183306983482386, 0.03110463165438953, -0.06335081289775985, 0.026770604530525936, 0.06220926330877919, 0.04788871322321592, 0.0, -0.05666268962770456, -0.08380524814062781, -0.08346248495316815, -0.053541209061051906 } };
    static const double coefficients7[1][15] = { { -0.03142696805273531, -0.010997147984564293, 0.0063492063492062096, 0.0, -0.18856180831641264, -0.16329931618554508, 0.0, 0.09369711585684087, 0.0, -0.041902624070313824, 0.0, 0.0, 0.08380524814062784, 0.13910414158861353, 0.10708241812210373 } };
    static const double coefficients8[1][15] = { { 0.12570787221094196, -0.043988591938257195, 0.12698412698412712, 0.0, -0.03591653491741193, 0.15552315827194776, 0.0, 0.0, -0.10368210551463188, -0.01197217830580402, 0.0, 0.0, 0.0, -0.09273609439240908, -0.10708241812210381 } };
    static const double coefficients9[1][15] = { { 0.1257078722109418, -0.08797718387651439, -0.10158730158730163, 0.09273609439240911, 0.10774960475223583, 0.07257747386024228, 0.07918851612219983, -0.013385302265262976, -0.05184105275731594, -0.041902624070313935, -0.12849890174652465, -0.05666268962770457, -0.01197217830580397, 0.00927360943924089, 0.01070824181221041 } };
    static const double coefficients10[1][15] = { { -0.03142696805273516, 0.0, -0.0126984126984128, -0.24343224778007388, 0.0, 0.05443310539518176, 0.0, 0.09369711585684087, 0.0, -0.04190262407031391, 0.19274835261978696, 0.0, -0.02394435661160795, 0.0, 0.01070824181221036 } };
    static const double coefficients11[1][15] = { { 0.1257078722109417, 0.08797718387651442, -0.1015873015873015, 0.09273609439240912, -0.1077496047522358, 0.0725774738602423, -0.07918851612219979, -0.013385302265262987, 0.05184105275731596, -0.041902624070313955, -0.12849890174652462, 0.0566626896277046, -0.011972178305804002, -0.009273609439240906, 0.010708241812210412 } };
    static const double coefficients12[1][15] = { { 0.2514157444218836, -0.35190873550605756, -0.20317460317460323, -0.13910414158861362, -0.10774960475223579, -0.06220926330877909, 0.19005243869327954, -0.026770604530525925, 0.12441852661755824, 0.15563831797545175, 0.0, 0.16998806888311374, 0.08380524814062784, -0.0278208283177227, -0.053541209061051954 } };
    static const double coefficients13[1][15] = { { 0.2514157444218834, 0.35190873550605767, -0.20317460317460323, -0.13910414158861364, 0.10774960475223579, -0.06220926330877917, -0.1900524386932796, -0.026770604530525943, -0.12441852661755828, 0.15563831797545175, 0.0, -0.16998806888311377, 0.08380524814062784, 0.02782082831772275, -0.05354120906105191 } };
    static const double coefficients14[1][15] = { { 0.2514157444218833, 0.0, 0.40634920634920646, 0.0, 0.0, -0.18662778992633744, 0.0, -0.18739423171368177, 0.0, -0.2035270311986677, 0.0, 0.0, -0.16761049628125563, 0.0, 0.10708241812210391 } };
    for (std::size_t k = 0; k < num_points * 15; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues4[15] = {};
        basisvalues4[0] = 1.0;
        const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues4[1] = tmp1_4;
        const double tmp2_4 = (1.0 - Y[1]) / 2.0;
        const double tmp3_4 = tmp2_4 * tmp2_4;
        basisvalues4[3] = 1.5 * tmp1_4 * basisvalues4[1] - 0.5 * tmp3_4 * basisvalues4[0];
        basisvalues4[6] = 1.6666666666666667 * tmp1_4 * basisvalues4[3] - 0.6666666666666666 * tmp3_4 * basisvalues4[1];
        basisvalues4[10] = 1.75 * tmp1_4 * basisvalues4[6] - 0.75 * tmp3_4 * basisvalues4[3];
        basisvalues4[2] = (0.5 + 1.5 * Y[1]) * basisvalues4[0];
        basisvalues4[4] = (1.5 + 2.5 * Y[1]) * basisvalues4[1];
        basisvalues4[7] = (2.5 + 3.5 * Y[1]) * basisvalues4[3];
        basisvalues4[11] = (3.5 + 4.5 * Y[1]) * basisvalues4[6];
        basisvalues4[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues4[2] - 0.5555555555555556 * basisvalues4[0];
        basisvalues4[9] = (0.05 + 1.75 * Y[1]) * basisvalues4[5] - 0.7 * basisvalues4[2];
        basisvalues4[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues4[9] - 0.7714285714285715 * basisvalues4[5];
        basisvalues4[8] = (0.54 + 2.1 * Y[1]) * basisvalues4[4] - 0.56 * basisvalues4[1];
        basisvalues4[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues4[8] - 0.7142857142857143 * basisvalues4[4];
        basisvalues4[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues4[7] - 0.5510204081632653 * basisvalues4[3];
        basisvalues4[0] *= std::sqrt(0.5);
        basisvalues4[2] *= std::sqrt(1.0);
        basisvalues4[5] *= std::sqrt(1.5);
        basisvalues4[9] *= std::sqrt(2.0);
        basisvalues4[14] *= std::sqrt(2.5);
        basisvalues4[1] *= std::sqrt(3.0);
        basisvalues4[4] *= std::sqrt(4.5);
        basisvalues4[8] *= std::sqrt(6.0);
        basisvalues4[13] *= std::sqrt(7.5);
        basisvalues4[3] *= std::sqrt(7.5);
        basisvalues4[7] *= std::sqrt(10.0);
        basisvalues4[12] *= std::sqrt(12.5);
        basisvalues4[6] *= std::sqrt(14.0);
        basisvalues4[11] *= std::sqrt(17.5);
        basisvalues4[10] *= std::sqrt(22.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip] += coefficients0[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 1] += coefficients1[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 2] += coefficients2[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 3] += coefficients3[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 4] += coefficients4[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 5] += coefficients5[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 6] += coefficients6[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 7] += coefficients7[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 8] += coefficients8[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 9] += coefficients9[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 10] += coefficients10[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 11] += coefficients11[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 12] += coefficients12[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 13] += coefficients13[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 14] += coefficients14[0][r] * basisvalues4[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 15 * num_derivatives, 0.0);
    if (order > 4)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][15][15] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.291502622129207, 0.0, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 10.954451150103308, 0.0, 0.0, -3.8332593899996574, 0.0, 17.748239349298842, 0.0, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.732863826479688, 0.0, 3.3466401061362943, 4.364357804719854, 0.0, -5.074680379332355, 0.0, 17.008401285415207, 0.0, 1.521277658511322, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 0.0, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 0.0, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, 0.0, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][15] = { { 0.0, -0.04123930494211611, -0.023809523809523794, 0.0289800294976278, 0.02244783432338244, 0.012960263189328946, -0.03959425806109994, -0.03346325566315745, -0.02592052637865798, -0.01496522288225498, 0.03212472543663117, 0.028331344813852282, 0.023944356611607962, 0.01854721887848183, 0.010708241812210409 } };
    static const double coefficients1[1][15] = { { 0.0, 0.04123930494211617, -0.023809523809523832, 0.02898002949762785, -0.02244783432338247, 0.012960263189328969, 0.03959425806109991, -0.03346325566315744, 0.025920526378657945, -0.014965222882254959, 0.03212472543663116, -0.028331344813852296, 0.023944356611607955, -0.018547218878481802, 0.010708241812210386 } };
    static const double coefficients2[1][15] = { { 0.0, 0.0, 0.04761904761904756, 0.0, 0.0, 0.03888078956798697, 0.0, 0.0, 0.0, 0.05986089152901992, 0.0, 0.0, 0.0, 0.0, 0.053541209061051906 } };
    static const double coefficients3[1][15] = { { 0.1257078722109417, 0.1319657758147716, -0.025396825396825362, 0.13910414158861362, -0.07183306983482383, 0.031104631654389585, 0.06335081289775982, 0.026770604530525925, -0.06220926330877914, 0.047888713223215904, 0.0, 0.056662689627704536, -0.08380524814062786, 0.08346248495316816, -0.05354120906105194 } };
    static const double coefficients4[1][15] = { { -0.03142696805273546, 0.010997147984564326, 0.006349206349206258, 0.0, 0.18856180831641273, -0.16329931618554516, 0.0, 0.09369711585684087, 0.0, -0.04190262407031389, 0.0, 0.0, 0.08380524814062784, -0.13910414158861362, 0.10708241812210381 } };
    static const double coefficients5[1][15] = { { 0.12570787221094165, 0.04398859193825734, 0.12698412698412695, 0.0, 0.035916534917411994, 0.15552315827194782, 0.0, 0.0, 0.10368210551463188, -0.011972178305803988, 0.0, 0.0, 0.0, 0.09273609439240912, -0.10708241812210383 } };
    static const double coefficients6[1][15] = { { 0.12570787221094193, -0.13196577581477165, -0.02539682539682538, 0.13910414158861362, 0.07183306983482386, 0.03110463165438953, -0.06335081289775985, 0.026770604530525936, 0.06220926330877919, 0.04788871322321592, 0.0, -0.05666268962770456, -0.08380524814062781, -0.08346248495316815, -0.053541209061051906 } };
    static const double coefficients7[1][15] = { { -0.03142696805273531, -0.010997147984564293, 0.0063492063492062096, 0.0, -0.18856180831641264, -0.16329931618554508, 0.0, 0.09369711585684087, 0.0, -0.041902624070313824, 0.0, 0.0, 0.08380524814062784, 0.13910414158861353, 0.10708241812210373 } };
    static const double coefficients8[1][15] = { { 0.12570787221094196, -0.043988591938257195, 0.12698412698412712, 0.0, -0.03591653491741193, 0.15552315827194776, 0.0, 0.0, -0.10368210551463188, -0.01197217830580402, 0.0, 0.0, 0.0, -0.09273609439240908, -0.10708241812210381 } };
    static const double coefficients9[1][15] = { { 0.1257078722109418, -0.08797718387651439, -0.10158730158730163, 0.09273609439240911, 0.10774960475223583, 0.07257747386024228, 0.07918851612219983, -0.013385302265262976, -0.05184105275731594, -0.041902624070313935, -0.12849890174652465, -0.05666268962770457, -0.01197217830580397, 0.00927360943924089, 0.01070824181221041 } };
    static const double coefficients10[1][15] = { { -0.03142696805273516, 0.0, -0.0126984126984128, -0.24343224778007388, 0.0, 0.05443310539518176, 0.0, 0.09369711585684087, 0.0, -0.04190262407031391, 0.19274835261978696, 0.0, -0.02394435661160795, 0.0, 0.01070824181221036 } };
    static const double coefficients11[1][15] = { { 0.1257078722109417, 0.08797718387651442, -0.1015873015873015, 0.09273609439240912, -0.1077496047522358, 0.0725774738602423, -0.07918851612219979, -0.013385302265262987, 0.05184105275731596, -0.041902624070313955, -0.12849890174652462, 0.0566626896277046, -0.011972178305804002, -0.009273609439240906, 0.010708241812210412 } };
    static const double coefficients12[1][15] = { { 0.2514157444218836, -0.35190873550605756, -0.20317460317460323, -0.13910414158861362, -0.10774960475223579, -0.06220926330877909, 0.19005243869327954, -0.026770604530525925, 0.12441852661755824, 0.15563831797545175, 0.0, 0.16998806888311374, 0.08380524814062784, -0.0278208283177227, -0.053541209061051954 } };
    static const double coefficients13[1][15] = { { 0.2514157444218834, 0.35190873550605767, -0.20317460317460323, -0.13910414158861364, 0.10774960475223579, -0.06220926330877917, -0.1900524386932796, -0.026770604530525943, -0.12441852661755828, 0.15563831797545175, 0.0, -0.16998806888311377, 0.08380524814062784, 0.02782082831772275, -0.05354120906105191 } };
    static const double coefficients14[1][15] = { { 0.2514157444218833, 0.0, 0.40634920634920646, 0.0, 0.0, -0.18662778992633744, 0.0, -0.18739423171368177, 0.0, -0.2035270311986677, 0.0, 0.0, -0.16761049628125563, 0.0, 0.10708241812210391 } };
    const std::size_t reference_offset[15] = {};
    const std::size_t num_components[15] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[4][16][4] =
        { { { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 },
            { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 0, 0, 1 },
            { 0, 0, 1, 0 },
            { 0, 0, 1, 1 },
            { 0, 1, 0, 0 },
            { 0, 1, 0, 1 },
            { 0, 1, 1, 0 },
            { 0, 1, 1, 1 },
            { 1, 0, 0, 0 },
            { 1, 0, 0, 1 },
            { 1, 0, 1, 0 },
            { 1, 0, 1, 1 },
            { 1, 1, 0, 0 },
            { 1, 1, 0, 1 },
            { 1, 1, 1, 0 },
            { 1, 1, 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues4[15] = {};
        basisvalues4[0] = 1.0;
        const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues4[1] = tmp1_4;
        const double tmp2_4 = (1.0 - Y[1]) / 2.0;
        const double tmp3_4 = tmp2_4 * tmp2_4;
        basisvalues4[3] = 1.5 * tmp1_4 * basisvalues4[1] - 0.5 * tmp3_4 * basisvalues4[0];
        basisvalues4[6] = 1.6666666666666667 * tmp1_4 * basisvalues4[3] - 0.6666666666666666 * tmp3_4 * basisvalues4[1];
        basisvalues4[10] = 1.75 * tmp1_4 * basisvalues4[6] - 0.75 * tmp3_4 * basisvalues4[3];
        basisvalues4[2] = (0.5 + 1.5 * Y[1]) * basisvalues4[0];
        basisvalues4[4] = (1.5 + 2.5 * Y[1]) * basisvalues4[1];
        basisvalues4[7] = (2.5 + 3.5 * Y[1]) * basisvalues4[3];
        basisvalues4[11] = (3.5 + 4.5 * Y[1]) * basisvalues4[6];
        basisvalues4[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues4[2] - 0.5555555555555556 * basisvalues4[0];
        basisvalues4[9] = (0.05 + 1.75 * Y[1]) * basisvalues4[5] - 0.7 * basisvalues4[2];
        basisvalues4[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues4[9] - 0.7714285714285715 * basisvalues4[5];
        basisvalues4[8] = (0.54 + 2.1 * Y[1]) * basisvalues4[4] - 0.56 * basisvalues4[1];
        basisvalues4[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues4[8] - 0.7142857142857143 * basisvalues4[4];
        basisvalues4[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues4[7] - 0.5510204081632653 * basisvalues4[3];
        basisvalues4[0] *= std::sqrt(0.5);
        basisvalues4[2] *= std::sqrt(1.0);
        basisvalues4[5] *= std::sqrt(1.5);
        basisvalues4[9] *= std::sqrt(2.0);
        basisvalues4[14] *= std::sqrt(2.5);
        basisvalues4[1] *= std::sqrt(3.0);
        basisvalues4[4] *= std::sqrt(4.5);
        basisvalues4[8] *= std::sqrt(6.0);
        basisvalues4[13] *= std::sqrt(7.5);
        basisvalues4[3] *= std::sqrt(7.5);
        basisvalues4[7] *= std::sqrt(10.0);
        basisvalues4[12] *= std::sqrt(12.5);
        basisvalues4[6] *= std::sqrt(14.0);
        basisvalues4[11] *= std::sqrt(17.5);
        basisvalues4[10] *= std::sqrt(22.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 15; ++i)
        {
            double derivatives[16] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients10[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients11[0][s] * aux[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[15 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[4][16][4] =
        { { { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 },
            { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 0, 0, 1 },
            { 0, 0, 1, 0 },
            { 0, 0, 1, 1 },
            { 0, 1, 0, 0 },
            { 0, 1, 0, 1 },
            { 0, 1, 1, 0 },
            { 0, 1, 1, 1 },
            { 1, 0, 0, 0 },
            { 1, 0, 0, 1 },
            { 1, 0, 1, 0 },
            { 1, 0, 1, 1 },
            { 1, 1, 0, 0 },
            { 1, 1, 0, 1 },
            { 1, 1, 1, 0 },
            { 1, 1, 1, 1 } } };
    std::fill_n(values, num_points * 15 * num_derivatives, 0.0);
    const std::size_t reference_offsets[15] = {};
    const std::size_t physical_offsets[15] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[16][16];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 15; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[15 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[15 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[15];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[15];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 15; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 4)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[4][16][4] =
        { { { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 },
            { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 0, 0, 1 },
            { 0, 0, 1, 0 },
            { 0, 0, 1, 1 },
            { 0, 1, 0, 0 },
            { 0, 1, 0, 1 },
            { 0, 1, 1, 0 },
            { 0, 1, 1, 1 },
            { 1, 0, 0, 0 },
            { 1, 0, 0, 1 },
            { 1, 0, 1, 0 },
            { 1, 0, 1, 1 },
            { 1, 1, 0, 0 },
            { 1, 1, 0, 1 },
            { 1, 1, 1, 0 },
            { 1, 1, 1, 1 } } };
    // Declare transformation matrix
    double transform[16][16] =
        { { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.0, -0.04123930494211611, -0.023809523809523794, 0.0289800294976278, 0.02244783432338244, 0.012960263189328946, -0.03959425806109994, -0.03346325566315745, -0.02592052637865798, -0.01496522288225498, 0.03212472543663117, 0.028331344813852282, 0.023944356611607962, 0.01854721887848183, 0.010708241812210409 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.0, 0.04123930494211617, -0.023809523809523832, 0.02898002949762785, -0.02244783432338247, 0.012960263189328969, 0.03959425806109991, -0.03346325566315744, 0.025920526378657945, -0.014965222882254959, 0.03212472543663116, -0.028331344813852296, 0.023944356611607955, -0.018547218878481802, 0.010708241812210386 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.0, 0.0, 0.04761904761904756, 0.0, 0.0, 0.03888078956798697, 0.0, 0.0, 0.0, 0.05986089152901992, 0.0, 0.0, 0.0, 0.0, 0.053541209061051906 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.1257078722109417, 0.1319657758147716, -0.025396825396825362, 0.13910414158861362, -0.07183306983482383, 0.031104631654389585, 0.06335081289775982, 0.026770604530525925, -0.06220926330877914, 0.047888713223215904, 0.0, 0.056662689627704536, -0.08380524814062786, 0.08346248495316816, -0.05354120906105194 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { -0.03142696805273546, 0.010997147984564326, 0.006349206349206258, 0.0, 0.18856180831641273, -0.16329931618554516, 0.0, 0.09369711585684087, 0.0, -0.04190262407031389, 0.0, 0.0, 0.08380524814062784, -0.13910414158861362, 0.10708241812210381 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.12570787221094165, 0.04398859193825734, 0.12698412698412695, 0.0, 0.035916534917411994, 0.15552315827194782, 0.0, 0.0, 0.10368210551463188, -0.011972178305803988, 0.0, 0.0, 0.0, 0.09273609439240912, -0.10708241812210383 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.12570787221094193, -0.13196577581477165, -0.02539682539682538, 0.13910414158861362, 0.07183306983482386, 0.03110463165438953, -0.06335081289775985, 0.026770604530525936, 0.06220926330877919, 0.04788871322321592, 0.0, -0.05666268962770456, -0.08380524814062781, -0.08346248495316815, -0.053541209061051906 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { -0.03142696805273531, -0.010997147984564293, 0.0063492063492062096, 0.0, -0.18856180831641264, -0.16329931618554508, 0.0, 0.09369711585684087, 0.0, -0.041902624070313824, 0.0, 0.0, 0.08380524814062784, 0.13910414158861353, 0.10708241812210373 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.12570787221094196, -0.043988591938257195, 0.12698412698412712, 0.0, -0.03591653491741193, 0.15552315827194776, 0.0, 0.0, -0.10368210551463188, -0.01197217830580402, 0.0, 0.0, 0.0, -0.09273609439240908, -0.10708241812210381 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.1257078722109418, -0.08797718387651439, -0.10158730158730163, 0.09273609439240911, 0.10774960475223583, 0.07257747386024228, 0.07918851612219983, -0.013385302265262976, -0.05184105275731594, -0.041902624070313935, -0.12849890174652465, -0.05666268962770457, -0.01197217830580397, 0.00927360943924089, 0.01070824181221041 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { -0.03142696805273516, 0.0, -0.0126984126984128, -0.24343224778007388, 0.0, 0.05443310539518176, 0.0, 0.09369711585684087, 0.0, -0.04190262407031391, 0.19274835261978696, 0.0, -0.02394435661160795, 0.0, 0.01070824181221036 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.1257078722109417, 0.08797718387651442, -0.1015873015873015, 0.09273609439240912, -0.1077496047522358, 0.0725774738602423, -0.07918851612219979, -0.013385302265262987, 0.05184105275731596, -0.041902624070313955, -0.12849890174652462, 0.0566626896277046, -0.011972178305804002, -0.009273609439240906, 0.010708241812210412 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 12:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.2514157444218836, -0.35190873550605756, -0.20317460317460323, -0.13910414158861362, -0.10774960475223579, -0.06220926330877909, 0.19005243869327954, -0.026770604530525925, 0.12441852661755824, 0.15563831797545175, 0.0, 0.16998806888311374, 0.08380524814062784, -0.0278208283177227, -0.053541209061051954 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 13:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.2514157444218834, 0.35190873550605767, -0.20317460317460323, -0.13910414158861364, 0.10774960475223579, -0.06220926330877917, -0.1900524386932796, -0.026770604530525943, -0.12441852661755828, 0.15563831797545175, 0.0, -0.16998806888311377, 0.08380524814062784, 0.02782082831772275, -0.05354120906105191 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 14:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.2514157444218833, 0.0, 0.40634920634920646, 0.0, 0.0, -0.18662778992633744, 0.0, -0.18739423171368177, 0.0, -0.2035270311986677, 0.0, 0.0, -0.16761049628125563, 0.0, 0.10708241812210391 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 15, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 4)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[16] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 15; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.75 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
            y[1] = 0.75 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.25 * coordinate_dofs[2] + 0.75 * coordinate_dofs[4];
            y[1] = 0.25 * coordinate_dofs[3] + 0.75 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[4];
            y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[4];
            y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2];
            y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 10:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 11:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[2];
            y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 12:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 13:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
            y[1] = 0.25 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 14:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.75 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
    y[1] = 0.75 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.25 * coordinate_dofs[2] + 0.75 * coordinate_dofs[4];
    y[1] = 0.25 * coordinate_dofs[3] + 0.75 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[4];
    y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[4];
    y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2];
    y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[2];
    y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
    y[1] = 0.25 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.75 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.75 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.25 * coordinate_dofs[2] + 0.75 * coordinate_dofs[4];
    dof_coordinates[2 * 5 + 1] = 0.25 * coordinate_dofs[3] + 0.75 * coordinate_dofs[5];
    dof_coordinates[2 * 6] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[4];
    dof_coordinates[2 * 6 + 1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[5];
    dof_coordinates[2 * 7] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 7 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 8] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[4];
    dof_coordinates[2 * 8 + 1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[5];
    dof_coordinates[2 * 9] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2];
    dof_coordinates[2 * 9 + 1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3];
    dof_coordinates[2 * 10] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 10 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 11] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[2];
    dof_coordinates[2 * 11 + 1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[3];
    dof_coordinates[2 * 12] = 0.5 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
    dof_coordinates[2 * 12 + 1] = 0.5 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
    dof_coordinates[2 * 13] = 0.25 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
    dof_coordinates[2 * 13 + 1] = 0.25 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
    dof_coordinates[2 * 14] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 14 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[30] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.75, 0.25, 0.5, 0.5, 0.25, 0.75, 0.0, 0.25, 0.0, 0.5, 0.0, 0.75, 0.25, 0.0, 0.5, 0.0, 0.75, 0.0, 0.25, 0.25, 0.5, 0.25, 0.25, 0.5 };
    std::copy_n(dof_X, 30, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new erroripdg1_finite_element_3();
  }

};


class erroripdg1_dofmap_0: public ufc::dofmap
{
public:

  erroripdg1_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~erroripdg1_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 3;
  }

  std::size_t num_element_dofs() const final override
  {
    return 3;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 2;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 2, 3 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new erroripdg1_dofmap_0();
  }

};


class erroripdg1_dofmap_1: public ufc::dofmap
{
public:

  erroripdg1_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~erroripdg1_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 2 * num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 6;
  }

  std::size_t num_element_dofs() const final override
  {
    return 6;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 4;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 4, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[0][0];
    dofs[4] = offset + entity_indices[0][1];
    dofs[5] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 5;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 5;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new erroripdg1_dofmap_0();
    case 1:
        return new erroripdg1_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new erroripdg1_dofmap_1();
  }

};


class erroripdg1_dofmap_2: public ufc::dofmap
{
public:

  erroripdg1_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~erroripdg1_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', triangle, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = {};
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 1;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new erroripdg1_dofmap_2();
  }

};


class erroripdg1_dofmap_3: public ufc::dofmap
{
public:

  erroripdg1_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~erroripdg1_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', triangle, 4)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { false, false, true };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 15 * num_global_entities[2];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 15;
  }

  std::size_t num_element_dofs() const final override
  {
    return 15;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 15 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 15 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 15 * entity_indices[2][0];
    dofs[1] = 15 * entity_indices[2][0] + 1;
    dofs[2] = 15 * entity_indices[2][0] + 2;
    dofs[3] = 15 * entity_indices[2][0] + 3;
    dofs[4] = 15 * entity_indices[2][0] + 4;
    dofs[5] = 15 * entity_indices[2][0] + 5;
    dofs[6] = 15 * entity_indices[2][0] + 6;
    dofs[7] = 15 * entity_indices[2][0] + 7;
    dofs[8] = 15 * entity_indices[2][0] + 8;
    dofs[9] = 15 * entity_indices[2][0] + 9;
    dofs[10] = 15 * entity_indices[2][0] + 10;
    dofs[11] = 15 * entity_indices[2][0] + 11;
    dofs[12] = 15 * entity_indices[2][0] + 12;
    dofs[13] = 15 * entity_indices[2][0] + 13;
    dofs[14] = 15 * entity_indices[2][0] + 14;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new erroripdg1_dofmap_3();
  }

};


class erroripdg1_coordinate_mapping_1: public ufc::coordinate_mapping
{
public:

  erroripdg1_coordinate_mapping_1() : ufc::coordinate_mapping()
  {
    // Do nothing
  }

  ~erroripdg1_coordinate_mapping_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::coordinate_mapping * create() const final override
  {
    return new erroripdg1_coordinate_mapping_1();
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new erroripdg1_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new erroripdg1_dofmap_1();
  }

  void compute_physical_coordinates(
      double * x, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    erroripdg1_finite_element_0 xelement;
    double phi[3];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[2 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t d = 0; d < 3; ++d)
                x[2 * ip + i] += coordinate_dofs[2 * d + i] * phi[d];
    }
  }

  void compute_reference_coordinates(
      double * X, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double J[4];
    double detJ[1];
    double K[4];
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_reference_geometry(
      double * X, double * J, double * detJ, double * K, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_jacobians(
      double * J, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    erroripdg1_finite_element_0 xelement;
    double dphi[6];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[2 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t j = 0; j < 2; ++j)
                for (std::size_t d = 0; d < 3; ++d)
                    J[2 * 2 * ip + 2 * i + j] += coordinate_dofs[2 * d + i] * dphi[2 * d + j];
    }
  }

  void compute_jacobian_determinants(
      double * detJ, std::size_t num_points,
      const double * J,
      int cell_orientation) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[2 * 2 * ip] * J[2 * 2 * ip + 2 + 1] - J[2 * 2 * ip + 1] * J[2 * 2 * ip + 2];
  }

  void compute_jacobian_inverses(
      double * K, std::size_t num_points,
      const double * J, const double * detJ) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[2 * 2 * ip] = J[2 * 2 * ip + 2 + 1] / detJ[ip];
        K[2 * 2 * ip + 1] = -J[2 * 2 * ip + 1] / detJ[ip];
        K[2 * 2 * ip + 2] = -J[2 * 2 * ip + 2] / detJ[ip];
        K[2 * 2 * ip + 2 + 1] = J[2 * 2 * ip] / detJ[ip];
    }
  }

  void compute_geometry(
      double * x, double * J, double * detJ, double * K, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
  }

  void compute_midpoint_geometry(
      double * x, double * J,
      const double * coordinate_dofs) const final override
  {
    const double phi_Xm[3] = { 0.33333333333333337, 0.33333333333333337, 0.3333333333333333 };
    const double dphi_Xm[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t d = 0; d < 3; ++d)
            x[i] += coordinate_dofs[2 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t d = 0; d < 3; ++d)
                J[2 * i + j] += coordinate_dofs[2 * d + i] * dphi_Xm[j][d];
  }

};


class erroripdg1_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  erroripdg1_cell_integral_0_otherwise() : ufc::cell_integral()
  {

  }

  ~erroripdg1_cell_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 8
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 8
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           8
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_Q25[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q25[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q25[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q25[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q25[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q25[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q25[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q25[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q25[0][0][1];
    alignas(32) double sp[4];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = std::abs(sp[2]);
    A[0] = 0.002557319223985889 * sp[3];
    A[1] = -0.0002380952380952383 * sp[3];
    A[2] = -0.000238095238095237 * sp[3];
    A[3] = -0.0009876543209876576 * sp[3];
    A[4] = -0.0001058201058201051 * sp[3];
    A[5] = -0.0009876543209876578 * sp[3];
    A[6] = 0.001410934744268067 * sp[3];
    A[7] = -0.00070546737213403 * sp[3];
    A[8] = 0.0;
    A[9] = 0.001410934744268069 * sp[3];
    A[10] = -0.0007054673721340332 * sp[3];
    A[11] = 0.0;
    A[12] = 0.00141093474426807 * sp[3];
    A[13] = -0.001410934744268076 * sp[3];
    A[14] = -0.001410934744268077 * sp[3];
    A[15] = -0.0002380952380952383 * sp[3];
    A[16] = 0.002557319223985889 * sp[3];
    A[17] = -0.0002380952380952376 * sp[3];
    A[18] = 0.00141093474426807 * sp[3];
    A[19] = -0.0007054673721340332 * sp[3];
    A[20] = 0.0;
    A[21] = -0.0009876543209876604 * sp[3];
    A[22] = -0.0001058201058201035 * sp[3];
    A[23] = -0.0009876543209876595 * sp[3];
    A[24] = 0.0;
    A[25] = -0.000705467372134037 * sp[3];
    A[26] = 0.001410934744268071 * sp[3];
    A[27] = -0.001410934744268087 * sp[3];
    A[28] = 0.001410934744268076 * sp[3];
    A[29] = -0.001410934744268085 * sp[3];
    A[30] = -0.000238095238095237 * sp[3];
    A[31] = -0.0002380952380952376 * sp[3];
    A[32] = 0.002557319223985887 * sp[3];
    A[33] = 0.0;
    A[34] = -0.0007054673721340393 * sp[3];
    A[35] = 0.001410934744268071 * sp[3];
    A[36] = 0.0;
    A[37] = -0.000705467372134038 * sp[3];
    A[38] = 0.001410934744268074 * sp[3];
    A[39] = -0.000987654320987652 * sp[3];
    A[40] = -0.000105820105820106 * sp[3];
    A[41] = -0.0009876543209876513 * sp[3];
    A[42] = -0.001410934744268069 * sp[3];
    A[43] = -0.001410934744268077 * sp[3];
    A[44] = 0.001410934744268064 * sp[3];
    A[45] = -0.0009876543209876576 * sp[3];
    A[46] = 0.00141093474426807 * sp[3];
    A[47] = 0.0;
    A[48] = 0.02257495590828922 * sp[3];
    A[49] = -0.01128747795414461 * sp[3];
    A[50] = 0.006772486772486767 * sp[3];
    A[51] = 0.002257495590828926 * sp[3];
    A[52] = 0.0005643738977072401 * sp[3];
    A[53] = 0.004514991181657844 * sp[3];
    A[54] = 0.004514991181657851 * sp[3];
    A[55] = -0.008465608465608459 * sp[3];
    A[56] = 0.01128747795414461 * sp[3];
    A[57] = -0.002257495590828934 * sp[3];
    A[58] = 0.01128747795414463 * sp[3];
    A[59] = 0.002257495590828913 * sp[3];
    A[60] = -0.0001058201058201051 * sp[3];
    A[61] = -0.0007054673721340332 * sp[3];
    A[62] = -0.0007054673721340393 * sp[3];
    A[63] = -0.01128747795414461 * sp[3];
    A[64] = 0.02793650793650791 * sp[3];
    A[65] = -0.0112874779541446 * sp[3];
    A[66] = 0.0005643738977072389 * sp[3];
    A[67] = 0.0004232804232803996 * sp[3];
    A[68] = -0.008465608465608454 * sp[3];
    A[69] = 0.0005643738977072429 * sp[3];
    A[70] = 0.0004232804232804184 * sp[3];
    A[71] = -0.008465608465608444 * sp[3];
    A[72] = -0.006772486772486767 * sp[3];
    A[73] = 0.003386243386243397 * sp[3];
    A[74] = 0.003386243386243386 * sp[3];
    A[75] = -0.0009876543209876578 * sp[3];
    A[76] = 0.0;
    A[77] = 0.001410934744268071 * sp[3];
    A[78] = 0.006772486772486767 * sp[3];
    A[79] = -0.0112874779541446 * sp[3];
    A[80] = 0.02257495590828921 * sp[3];
    A[81] = 0.004514991181657842 * sp[3];
    A[82] = -0.008465608465608452 * sp[3];
    A[83] = 0.01128747795414461 * sp[3];
    A[84] = 0.002257495590828912 * sp[3];
    A[85] = 0.0005643738977072367 * sp[3];
    A[86] = 0.004514991181657838 * sp[3];
    A[87] = -0.002257495590828947 * sp[3];
    A[88] = 0.00225749559082892 * sp[3];
    A[89] = 0.01128747795414461 * sp[3];
    A[90] = 0.001410934744268067 * sp[3];
    A[91] = -0.0009876543209876604 * sp[3];
    A[92] = 0.0;
    A[93] = 0.002257495590828926 * sp[3];
    A[94] = 0.0005643738977072389 * sp[3];
    A[95] = 0.004514991181657842 * sp[3];
    A[96] = 0.02257495590828923 * sp[3];
    A[97] = -0.0112874779541446 * sp[3];
    A[98] = 0.00677248677248677 * sp[3];
    A[99] = 0.01128747795414462 * sp[3];
    A[100] = -0.008465608465608464 * sp[3];
    A[101] = 0.00451499118165785 * sp[3];
    A[102] = 0.01128747795414465 * sp[3];
    A[103] = -0.002257495590828936 * sp[3];
    A[104] = 0.00225749559082893 * sp[3];
    A[105] = -0.00070546737213403 * sp[3];
    A[106] = -0.0001058201058201035 * sp[3];
    A[107] = -0.000705467372134038 * sp[3];
    A[108] = 0.0005643738977072401 * sp[3];
    A[109] = 0.0004232804232803996 * sp[3];
    A[110] = -0.008465608465608452 * sp[3];
    A[111] = -0.0112874779541446 * sp[3];
    A[112] = 0.02793650793650789 * sp[3];
    A[113] = -0.01128747795414459 * sp[3];
    A[114] = -0.008465608465608442 * sp[3];
    A[115] = 0.0004232804232804238 * sp[3];
    A[116] = 0.0005643738977072415 * sp[3];
    A[117] = 0.0033862433862434 * sp[3];
    A[118] = -0.006772486772486739 * sp[3];
    A[119] = 0.003386243386243369 * sp[3];
    A[120] = 0.0;
    A[121] = -0.0009876543209876595 * sp[3];
    A[122] = 0.001410934744268074 * sp[3];
    A[123] = 0.004514991181657844 * sp[3];
    A[124] = -0.008465608465608454 * sp[3];
    A[125] = 0.01128747795414461 * sp[3];
    A[126] = 0.00677248677248677 * sp[3];
    A[127] = -0.01128747795414459 * sp[3];
    A[128] = 0.02257495590828923 * sp[3];
    A[129] = 0.004514991181657839 * sp[3];
    A[130] = 0.0005643738977072323 * sp[3];
    A[131] = 0.00225749559082892 * sp[3];
    A[132] = 0.002257495590828924 * sp[3];
    A[133] = -0.002257495590828933 * sp[3];
    A[134] = 0.01128747795414465 * sp[3];
    A[135] = 0.001410934744268069 * sp[3];
    A[136] = 0.0;
    A[137] = -0.000987654320987652 * sp[3];
    A[138] = 0.004514991181657851 * sp[3];
    A[139] = 0.0005643738977072429 * sp[3];
    A[140] = 0.002257495590828912 * sp[3];
    A[141] = 0.01128747795414462 * sp[3];
    A[142] = -0.008465608465608442 * sp[3];
    A[143] = 0.004514991181657839 * sp[3];
    A[144] = 0.02257495590828923 * sp[3];
    A[145] = -0.01128747795414462 * sp[3];
    A[146] = 0.006772486772486766 * sp[3];
    A[147] = 0.01128747795414461 * sp[3];
    A[148] = 0.002257495590828914 * sp[3];
    A[149] = -0.00225749559082892 * sp[3];
    A[150] = -0.0007054673721340332 * sp[3];
    A[151] = -0.000705467372134037 * sp[3];
    A[152] = -0.000105820105820106 * sp[3];
    A[153] = -0.008465608465608459 * sp[3];
    A[154] = 0.0004232804232804184 * sp[3];
    A[155] = 0.0005643738977072367 * sp[3];
    A[156] = -0.008465608465608464 * sp[3];
    A[157] = 0.0004232804232804238 * sp[3];
    A[158] = 0.0005643738977072323 * sp[3];
    A[159] = -0.01128747795414462 * sp[3];
    A[160] = 0.02793650793650792 * sp[3];
    A[161] = -0.0112874779541446 * sp[3];
    A[162] = 0.003386243386243397 * sp[3];
    A[163] = 0.003386243386243412 * sp[3];
    A[164] = -0.00677248677248676 * sp[3];
    A[165] = 0.0;
    A[166] = 0.001410934744268071 * sp[3];
    A[167] = -0.0009876543209876513 * sp[3];
    A[168] = 0.01128747795414461 * sp[3];
    A[169] = -0.008465608465608444 * sp[3];
    A[170] = 0.004514991181657838 * sp[3];
    A[171] = 0.00451499118165785 * sp[3];
    A[172] = 0.0005643738977072415 * sp[3];
    A[173] = 0.00225749559082892 * sp[3];
    A[174] = 0.006772486772486766 * sp[3];
    A[175] = -0.0112874779541446 * sp[3];
    A[176] = 0.02257495590828919 * sp[3];
    A[177] = 0.002257495590828917 * sp[3];
    A[178] = 0.01128747795414458 * sp[3];
    A[179] = -0.002257495590828915 * sp[3];
    A[180] = 0.00141093474426807 * sp[3];
    A[181] = -0.001410934744268087 * sp[3];
    A[182] = -0.001410934744268069 * sp[3];
    A[183] = -0.002257495590828934 * sp[3];
    A[184] = -0.006772486772486767 * sp[3];
    A[185] = -0.002257495590828947 * sp[3];
    A[186] = 0.01128747795414465 * sp[3];
    A[187] = 0.0033862433862434 * sp[3];
    A[188] = 0.002257495590828924 * sp[3];
    A[189] = 0.01128747795414461 * sp[3];
    A[190] = 0.003386243386243397 * sp[3];
    A[191] = 0.002257495590828917 * sp[3];
    A[192] = 0.09481481481481484 * sp[3];
    A[193] = -0.01354497354497356 * sp[3];
    A[194] = -0.01354497354497358 * sp[3];
    A[195] = -0.001410934744268076 * sp[3];
    A[196] = 0.001410934744268076 * sp[3];
    A[197] = -0.001410934744268077 * sp[3];
    A[198] = 0.01128747795414463 * sp[3];
    A[199] = 0.003386243386243397 * sp[3];
    A[200] = 0.00225749559082892 * sp[3];
    A[201] = -0.002257495590828936 * sp[3];
    A[202] = -0.006772486772486739 * sp[3];
    A[203] = -0.002257495590828933 * sp[3];
    A[204] = 0.002257495590828914 * sp[3];
    A[205] = 0.003386243386243412 * sp[3];
    A[206] = 0.01128747795414458 * sp[3];
    A[207] = -0.01354497354497356 * sp[3];
    A[208] = 0.09481481481481487 * sp[3];
    A[209] = -0.01354497354497356 * sp[3];
    A[210] = -0.001410934744268077 * sp[3];
    A[211] = -0.001410934744268085 * sp[3];
    A[212] = 0.001410934744268064 * sp[3];
    A[213] = 0.002257495590828913 * sp[3];
    A[214] = 0.003386243386243386 * sp[3];
    A[215] = 0.01128747795414461 * sp[3];
    A[216] = 0.00225749559082893 * sp[3];
    A[217] = 0.003386243386243369 * sp[3];
    A[218] = 0.01128747795414465 * sp[3];
    A[219] = -0.00225749559082892 * sp[3];
    A[220] = -0.00677248677248676 * sp[3];
    A[221] = -0.002257495590828915 * sp[3];
    A[222] = -0.01354497354497358 * sp[3];
    A[223] = -0.01354497354497356 * sp[3];
    A[224] = 0.09481481481481484 * sp[3];
  }

};


class erroripdg1_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  erroripdg1_cell_integral_1_otherwise() : ufc::cell_integral()
  {

  }

  ~erroripdg1_cell_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 10
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 10
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           10
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights36[36] = { 0.006194265352658847, 0.0116108747669975, 0.0120606064042651, 0.008451535796943108, 0.003765298212691667, 0.0007485425612363173, 0.01304339433008284, 0.02444926225805782, 0.02539627158904766, 0.01779657599702627, 0.007928667333796482, 0.001576221754023589, 0.01691750568001268, 0.03171111159070401, 0.03293939890078672, 0.02308246365135824, 0.01028361722876633, 0.00204438659154486, 0.01691750568001267, 0.03171111159070399, 0.0329393989007867, 0.02308246365135823, 0.01028361722876633, 0.002044386591544859, 0.01304339433008284, 0.02444926225805782, 0.02539627158904766, 0.01779657599702627, 0.007928667333796482, 0.001576221754023589, 0.006194265352658863, 0.01161087476699754, 0.01206060640426513, 0.008451535796943131, 0.003765298212691677, 0.0007485425612363194 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE13_C0_D02_Q36[1][36][12] =
        { { { 37.22546969211293, 11.96229963070849, -0.9113109756032571, -1.851644161440767, -110.6476431459759, 121.5811768463215, -60.12130302316709, 5.771889575972821, -0.911310975603393, -13.3954233133863, 1.822621951206685, 9.475177898854383 },
            { 22.37468083304032, 3.257811873503941, -0.8145777753363372, -0.7505415735406071, -57.03741346076496, 50.20859629591289, -18.80367554169222, 4.22067843701708, -0.8145777753364218, -9.191898447574664, 1.629155550672828, 5.721761584098216 },
            { 5.698150366554002, -3.148352370386806, -0.6522299088350314, 0.4985126943634857, -0.03108850870405266, -20.18062645264071, 17.66191696517759, 2.23870699390028, -0.652229908834999, -3.978901293437043, 1.304459817670085, 1.241681605173246 },
            { -2.994808164595752, 0.9847756980711702, -0.4484267841150684, 1.177520178293996, 22.59752195613431, -35.22584372041023, 14.63835423080051, 0.6730334454025827, -0.4484267841148796, -0.1685467125112723, 0.8968535682299335, -1.682006911185309 },
            { -0.375019780858816, 16.56046992697152, -0.2415686865874314, 1.035726129562544, -0.1756592518644204, 18.0368477732768, -34.04663866752509, -0.0539087755059966, -0.2415686865870681, 1.143543680574336, 0.4831373731743991, -2.125361034630842 },
            { 8.528028596776576, 35.66110175000737, -0.07815548074602674, 0.427473909749267, -45.48121163885345, 101.0394392373846, -99.74735794531509, -0.1132943304869647, -0.07815548074555512, 0.6540625707230276, 0.1563109614914069, -0.968242149985258 },
            { 20.47214483855882, 11.96229963070848, -1.801002868128705, -9.289429123725878, -69.70320847658259, 89.95228206819714, -52.68351806088194, 23.41490632205226, -1.801002868128811, -56.11924176783039, 3.602005736257532, 41.99376456950413 },
            { 10.82722404002767, 3.257811873503936, -1.952264508385726, -3.765357781480992, -30.92768366679928, 32.63150708701946, -15.78885933375181, 16.90582196307906, -1.952264508385753, -37.57700170763908, 3.904529016771501, 24.43653752604106 },
            { 0.6182525700954732, -3.148352370386808, -1.979392842338931, 2.50096559479596, 8.126254183780535, -21.25561844823432, 15.65946406474512, 8.645767723862729, -1.97939284233886, -14.7905698529295, 3.958785684677817, 3.643836534270808 },
            { -3.324235963821519, 0.9847756980711715, -1.676907424316808, 5.907447265412613, 18.52645046746726, -26.09541734539881, 9.908427143681902, 2.230941884830139, -1.676907424316615, 1.445563495752231, 3.353814848633405, -9.583952645994977 },
            { 0.9684772666283734, 16.56046992697152, -1.055307814326479, 5.196087170807274, -7.023014388083505, 27.70106690325341, -38.20699970876981, -0.583666695254085, -1.055307814326158, 6.363420561315277, 2.110615628652555, -10.97584103686842 },
            { 9.312749533840748, 35.66110175000738, -0.3763997419556091, 2.144574356968334, -48.76775396020087, 105.2583610688869, -101.4644583925342, -0.5997710063415251, -0.3763997419551721, 3.344116369651232, 0.7527994839106142, -4.888919720277961 },
            { 3.213287174226996, 11.96229963070847, 5.653745140935758, -20.87659109935901, -23.59833117228577, 49.51910045259897, -41.09635608524871, 33.21901597731959, 5.653745140935704, -87.3146230539982, -11.30749028187144, 74.97219817603768 },
            { -0.3525071150590227, 3.257811873503933, 3.085156677650424, -8.462073793748836, -3.871505344358048, 12.05834390739705, -11.09214332148394, 23.04813193212959, 3.08515667765045, -54.55833765800803, -6.17031335530087, 39.97227951962729 },
            { -3.171004227054928, -3.148352370386809, 0.07765365230425747, 5.620543025918499, 12.58519034695882, -18.80572038313969, 12.53988663362261, 10.37797802636995, 0.07765365230437393, -15.13541302682143, -0.1553073046086388, -0.8631080254670138 },
            { -2.009937049564333, 0.9847756980711733, -1.763223201915583, 13.27609687941537, 8.529203024950176, -10.04381920313618, 2.539777529679172, 1.002958748171764, -1.763223201915391, 11.27017938307174, 3.526446403830946, -25.54923501065887 },
            { 3.561147332287875, 16.56046992697154, -1.823348646977529, 11.67742234068098, -18.68968968927617, 43.25640730866026, -44.68833487864352, -2.408295928262491, -1.82334864697725, 16.49401419720582, 3.646697293954698, -25.76314060962428 },
            { 10.58532477048222, 35.66110175000739, -0.7909522227732566, 4.819607463094407, -53.98793753960988, 111.8810025177805, -104.1394914986603, -1.457793762165329, -0.7909522227728507, 7.735194987424943, 1.581904445545941, -11.09700868835396 },
            { -3.329503352229711, 11.96229963070848, 27.02045400950195, -33.96217215227234, 2.57283093354096, 16.80514782031563, -28.01077503233538, 18.39509763521017, 27.02045400950193, -70.75236742269267, -54.04090801900379, 86.3194419397548 },
            { -3.004548149364557, 3.257811873503934, 18.74742434580956, -13.76615586235982, 6.736658792863995, -1.201861264130436, -5.788061252872941, 10.03790529827601, 18.74742434580961, -33.84196645891182, -37.49484869161914, 37.5702170229956 },
            { -1.409508037926113, -3.148352370386808, 8.441480571387221, 9.143535404176198, 5.539205590443514, -9.998239437495535, 9.016894255364948, 0.2526549181581697, 8.441480571387352, 8.638225567859825, -16.88296114277459, -18.03441589019419 },
            { 2.150834240995021, 0.984775698071183, 0.8158098586333145, 21.59763946053413, -8.11388213728724, 10.76003724966059, -5.781765051439556, -5.736845602936463, 0.8158098586334814, 33.07133066640699, -1.63161971726683, -48.93212452400464 },
            { 7.220888901225647, 16.56046992697155, -1.958915622766376, 18.99690547855656, -33.32865596502725, 61.55511515334912, -52.0078180165191, -5.932470521411372, -1.958915622766148, 30.86184652137921, 3.917831245532442, -43.92628147852436 },
            { 12.09580518851082, 35.6611017500074, -1.185774116031382, 7.840568299151613, -60.02985921172429, 119.4334046079235, -107.1604523347175, -2.573452286935753, -1.185774116031037, 12.98747287302305, 2.371548232062278, -18.25458888523885 },
            { 2.34219233646884, 11.96229963070848, 57.40575537159683, -45.54933412790552, 2.816601531777, -0.6974804422521217, -16.42361305670222, -17.66189941558322, 57.40575537159681, -10.22553529673901, -114.8115107431934, 73.43676884022764 },
            { 3.478466993454196, 3.257811873503937, 41.44759182975123, -18.46287187462769, -1.53265548050569, -4.112278145847345, -1.091345240605094, -19.14527732848435, 41.44759182975122, 19.82768278234106, -82.89518365950238, 17.78046642077092 },
            { 5.499326190346761, -3.148352370386807, 21.19661809145374, 12.26311283529873, -11.39804029722478, 3.149749653022413, 5.897316824242427, -19.41131683018117, 21.1966180914538, 51.08574649566106, -42.39323618290755, -43.93754250077863 },
            { 8.205184940740557, 0.9847756980711906, 5.469545866522887, 28.96628907453688, -27.59123315078104, 31.55168717741159, -13.15041466544229, -16.44493231057153, 5.469545866523002, 61.85615369567991, -10.93909173304592, -74.37751045964525 },
            { 11.10955400543982, 16.56046992697156, -1.430961416862736, 25.47824064843025, -47.58732134332927, 78.40645059731067, -58.48915318639278, -10.34908983152914, -1.430961416862587, 46.17642031148849, 2.861922833725266, -61.3055711283896 },
            { 13.49826305799542, 35.66110175000741, -1.470443964005902, 10.5156014052777, -65.50980805681954, 126.1859286896603, -109.8354854408436, -3.691240308445809, -1.470443964005594, 17.89808202216927, 2.940887928011367, -24.72244311900109 },
            { 11.65773222773766, 11.96229963070848, 82.58492822389429, -52.9871190901907, -8.376693288475542, -6.257510475553573, -8.985828094417069, -52.15661215914949, 82.5849282238942, 51.32610522810842, -165.1698564477882, 53.81762602123165 },
            { 12.01110757852633, 3.257811873503933, 60.39000247478671, -21.47768808256811, -15.5831204427096, -1.609269976656, 1.923470967335321, -46.62032855859188, 60.39000247478658, 71.76296903461574, -120.7800049495732, -3.664952393455799 },
            { 12.58167688723769, -3.148352370386806, 32.03170365129935, 14.26556573573118, -27.56519459143913, 14.23700615077829, 3.894863923809976, -37.32875308691764, 32.03170365129932, 88.92307190956649, -64.06340730259869, -65.85988455838002 },
            { 13.2645398270849, 0.984775698071199, 9.629847911891272, 33.69621616165549, -42.43987001058834, 46.07089623799315, -17.88034175256089, -25.66458924228421, 9.629847911891309, 85.02539464622392, -19.25969582378261, -93.05702156559518 },
            { 13.92641799919735, 16.56046992697158, -0.7713335983314771, 29.63860168967498, -57.38141037208904, 89.54403667355766, -62.64951422763752, -13.82558164381789, -0.771333598331374, 57.28976497731078, 1.542667196662805, -73.10278502316785 },
            { 14.4306425681503, 35.66110175000742, -1.621029652124776, 12.23270185249675, -69.09166752434837, 130.5525090942533, -111.5525858880627, -4.473034130481786, -1.621029652124499, 21.1787701134603, 3.24205930424915, -28.93843783547521 } } };
    alignas(32) static const double FE13_C0_D11_Q36[1][36][13] =
        { { { 37.22546969211297, 3.373210626067276, 2.259041901108882, 3.567091966488269, -52.74244418797223, 19.08406646234753, -3.567091966488276, -52.13330938203109, 18.28105031598536, -3.373210626067228, 69.90932577899927, -20.54009221709433, -21.34310836345638 },
            { 22.37468083304035, 3.59826490159503, -0.568566106530191, -1.33700627043789, -17.65507180685142, -6.056615296626806, 1.337006270437887, -35.16166321689662, 16.38524728545131, -3.598264901595034, 29.87348808417755, -15.81668117892117, 6.62518140315701 },
            { 5.698150366554014, 3.964723489201397, -5.568617459336565, -1.698175614723185, 16.83383850022269, -24.23016448149992, 1.698175614723188, -14.62622001502652, 12.89279313767389, -3.964723489201407, -13.47438631108666, -7.324175678337426, 29.79878194083648 },
            { -2.994808164595738, 4.408056521485078, -12.22311839466239, 9.528930965427477, 23.91504182978221, -11.3913026997591, -9.528930965427467, -0.644486428245308, 8.047351114326078, -4.408056521485076, -32.49886563160342, 4.175767280336135, 23.61442109442146 },
            { -0.3750197808588123, 4.84242465630518, -19.3304174649584, 31.84262017860001, -2.748835941459362, 34.96647590091808, -31.8426201786, 2.519267914088977, 2.698176523074959, -4.842424656305188, -18.72582965672905, 16.63224094188325, -15.63605843595971 },
            { 8.528028596776544, 5.17624354370237, -25.15585326359746, 55.99002989890593, -44.02771216652727, 91.4897134686566, -55.99002989890592, -1.566793802813093, -1.784991250261173, -5.176243543702342, 11.91062410896659, 26.94084451385834, -66.3338602050592 },
            { 20.47214483855887, -1.729405265829843, -0.9658190618045204, 3.567091966488272, -32.76425837150477, 15.85920549943409, -3.567091966488276, -13.52404378302573, -8.677506321363072, 1.72940526582993, 24.85033825416717, 9.64332538316744, -14.89338643762956 },
            { 10.82722404002769, -1.236898757465702, 0.1140946115408268, -1.337006270437888, -6.790275731909793, -5.373954578555819, 1.337006270437888, -7.231585971810532, -4.832536825682916, 1.236898757465743, 3.308732275233516, 4.71844221414198, 5.259859967014998 },
            { 0.6182525700954834, -0.2400333259960097, -0.6885706772105511, -1.698175614723186, 17.03368951455524, -19.35011769937395, 1.69817561472319, -0.2616676069120105, -0.5966182891795163, 0.2400333259960204, -18.07884515494918, 1.285188966389951, 20.0386883765845 },
            { -3.324235963821508, 1.264138758212014, -5.577754184472439, 9.528930965427479, 17.59910541881809, -4.74593848956919, -9.52893096542747, 3.158286933479304, 1.430087788554178, -1.264138758212012, -23.01091057294821, 4.147666395918107, 10.32369267404161 },
            { 0.9684772666283745, 3.02712309555686, -14.16849399070442, 31.84262017860003, -9.254256463200491, 40.12839937517205, -31.84262017860001, 1.647575379862919, 0.4110704490655149, -3.027123095556866, -7.530290173995071, 13.75742354163872, -25.95990538446765 },
            { 9.312749533840716, 4.560931658020131, -23.12168519190575, 55.99002989890595, -46.84660117528315, 93.52388154034834, -55.99002989890594, -2.520923791259184, -2.230894084561506, -4.560931658020078, 16.93309024079611, 25.35257927646695, -70.40219634844264 },
            { 3.213287174227034, -0.8378791056468629, -5.989759188556134, 3.567091966488278, -10.48146058042132, 10.83526537268241, -3.567091966488275, 20.102145385455, -24.15331166532903, 0.8378791056469974, -18.82373116781671, 30.1430708538849, -4.845506184126283 },
            { -0.3525071150590054, -1.959695735856979, 1.177596763700446, -1.337006270437884, 3.325953271017282, -4.310452426396238, 1.337006270437886, 15.85067331675419, -17.45786193755226, 1.959695735857064, -17.6465227090119, 16.2802651738516, 3.132855662695793 },
            { -3.171004227054921, -2.665927192810829, 6.913947115370026, -1.698175614723184, 13.2204285191251, -11.74759990679341, 1.698175614723186, 9.742739854203654, -9.237662819959626, 2.665927192810875, -12.87821703090368, 2.323715704589412, 4.833652791423388 },
            { -2.009937049564328, -1.80619448046014, 4.774912890603694, 9.528930965427497, 5.93213942948482, 5.606728585506926, -9.528930965427495, 3.600022343637113, -3.396279774532978, 1.806194480460164, -2.747311832953775, -1.378633116070899, -10.38164147611063 },
            { 3.561147332287867, 0.6987701271242308, -6.126846685049166, 31.84262017860006, -19.88857383451523, 48.17004668082734, -31.84262017860005, -1.209411783023427, -1.652965422140272, -0.6987701271242062, 11.40999160020179, 7.779812107189223, -42.04319999577819 },
            { 10.58532477048218, 3.652426482868989, -19.9526993914462, 55.99002989890597, -51.28816221238417, 96.69286734080792, -55.99002989890597, -4.157569089390983, -2.775329198222316, -3.652426482868927, 24.90770713984702, 22.7280285896682, -76.74016794936176 },
            { -3.329503352229702, 13.11687059186456, -11.6633810704147, 3.567091966488291, 1.734951827893956, 5.161643490823834, -3.567091966488284, 19.23297674085707, -2.78660279676296, -13.11687059186439, -29.30180628693573, 14.44998386717721, 6.501737579590853 },
            { -3.004548149364553, 7.197458615375365, 2.378628012016268, -1.337006270437877, 4.776963057006976, -3.109421178080426, 1.337006270437882, 11.99760103413299, -1.795594269393213, -7.19745861537521, -11.39138792975891, -0.5830337426234355, 0.730793166064158 },
            { -1.409508037926113, 0.6352381721662672, 15.49960104773359, -1.698175614723173, 2.873278397632714, -3.161945974429862, 1.698175614723171, 2.918582110968977, -0.8738359008767077, -0.6352381721661596, 11.11724857705821, -14.6257651468572, -12.33765507330372 },
            { 2.15083424099502, -2.597063595465362, 16.46635764727655, 9.528930965427525, -9.920076617747366, 17.29817334217977, -9.528930965427527, -3.930651122476336, -0.81724671398413, 2.597063595465434, 28.16625114650542, -15.64911093329269, -33.76453098945631 },
            { 7.220888901225628, -1.198884145239088, 2.954723749400845, 31.8426201786001, -32.629885837903, 57.25161711527738, -31.8426201786001, -6.631240648535615, -1.788532397929187, 1.198884145239155, 34.99496133461403, -1.166191351471932, -60.20634086467824 },
            { 12.09580518851078, 2.699775327225602, -16.37390929300376, 55.99002989890599, -56.3774327288552, 100.2716574392504, -55.99002989890598, -6.225878769804783, -3.170151091480508, -2.699775327225519, 34.1335970171457, 19.54406038448394, -83.89774814624666 },
            { 2.342192336468822, 36.93895010507794, -16.68732119716636, 3.56709196648831, 1.087196265947019, 0.1377033640722374, -3.5670919664883, -15.93249414975331, 50.52925191836216, -36.93895010507762, -4.18421564982849, -33.84193072119648, 16.54961783309411 },
            { 3.478466993454179, 24.13740793488956, 3.442130164175884, -1.337006270437879, -2.769554237971402, -2.04591902592081, 1.337006270437881, -17.90837857101861, 38.56731951245374, -24.13740793488926, 20.64159597971202, -42.00944967663019, -1.396211138255071 },
            { 5.499326190346748, 8.907435330774739, 23.10211884031416, -1.698175614723166, -11.63807362322072, 4.440571818150672, 1.698175614723162, -19.17128350418515, 22.57939264461294, -8.907435330774515, 48.41214977737354, -45.68151148492756, -27.54269065846482 },
            { 8.205184940740541, -0.9273450486491606, 26.81902472235264, 9.528930965427559, -26.32709439256899, 27.65084041725587, -9.528930965427563, -17.70907106878354, 8.576541079393699, 0.9273450486493044, 62.65000524296488, -35.39556580174674, -54.46986513960851 },
            { 11.1095540054398, -2.231242075117024, 10.99637105505608, 31.84262017860014, -44.56019824777241, 65.29326442093264, -31.84262017860014, -13.37621292708598, 0.03541684652903709, 2.231242075117152, 57.82322822447491, -11.03178790158548, -76.28963547598873 },
            { 13.49826305799537, 1.921152784917595, -13.20492349254422, 55.99002989890602, -60.94887639879935, 103.44064323971, -55.99002989890602, -8.252171966465957, -3.324938306611944, -1.921152784917493, 42.49786181472599, 16.5298617991558, -90.23571974716577 },
            { 11.65773222773762, 57.90519895800379, -19.91218216007987, 3.567091966488314, -5.00348266240833, -3.087157598841202, -3.567091966488306, -55.52982278521669, 101.7772895154824, -57.90519895800324, 28.96339105980793, -81.86510735540341, 22.99933975892107 },
            { 12.0111075785263, 39.38234165391364, 4.124790882246884, -1.337006270437894, -11.9848555411145, -1.363258307849835, 1.337006270437893, -50.21859346018686, 77.5898275355738, -39.38234165391315, 54.31713230502223, -81.71461841782138, -2.761532574397045 },
            { 12.58167688723767, 16.86492700892681, 27.98216562244017, -1.698175614723174, -23.6004711022376, 9.320618600276614, 1.698175614723166, -41.29347657611901, 45.57672669780787, -16.86492700892648, 80.29443641355934, -73.55889232024857, -37.30278422271675 },
            { 13.26453982708488, 1.317519873647923, 33.46438893254253, 9.528930965427579, -38.03181348910321, 34.29620462744574, -9.528930965427588, -30.07264576376925, 18.12562581033209, -1.3175198736477, 88.3043083583304, -51.59001474287512, -67.76059355998825 },
            { 13.92641799919731, -2.573176689594987, 16.15829452931, 31.84262017860018, -52.53898571578387, 70.4551878951866, -31.84262017860018, -18.66800630012304, 2.168411611330577, 2.573176689595158, 73.43886854601986, -18.32670614064101, -86.6134824244966 },
            { 14.43064256815025, 1.453499472326079, -11.17075542085254, 55.99002989890604, -63.91542398064594, 105.4748113114017, -55.99002989890602, -9.649277674184177, -3.327865421640145, -1.453499472325945, 47.9633036658276, 14.49862084249228, -94.30405589054918 } } };
    alignas(32) static const double FE13_C0_D20_Q36[1][36][12] =
        { { { 37.22546969211293, 11.6577322277378, -1.630272036341404, -0.8281156977319402, 5.162754770031462, -0.8281156977319148, -110.0385083400348, 120.0583398314686, -58.90303341128457, -11.95578157640426, 8.423298842714216, 1.656231395463853 },
            { 22.37468083304029, 12.01110757852646, -8.386590639519733, -1.931824414379748, 21.72726984706219, -1.931824414379749, -74.54400487081007, 93.97507482102576, -53.81685836178242, -51.84113033364417, 38.50045112610172, 3.863648828759485 },
            { 5.698150366553964, 12.58167688723778, -19.63574761303643, 3.752001140940362, 33.69876550914953, 3.752001140940331, -31.49114702395316, 58.4695198354822, -45.25820006532079, -87.03327863133565, 72.97026073522257, -7.504002281880712 },
            { -2.994808164595812, 13.26453982708493, -33.6237569676183, 22.07308623278368, 25.23256170343018, 22.07308623278363, -1.962006301893029, 26.17297692465841, -34.48070228525449, -84.08888037447882, 92.48007563866697, -44.14617246556733 },
            { -0.3750197808589212, 13.92641799919733, -47.69656105947876, 51.12477043022838, -5.322012631054312, 51.12477043022835, 5.092444603684214, 4.866588134405667, -23.51043095642829, -37.05253579737022, 90.07110948790333, -102.2495408604567 },
            { 8.528028596776428, 14.43064256815022, -58.73918043694362, 80.31895804780432, -42.57421269420124, 80.31895804780432, -3.020293275138867, -5.112856671901321, -14.82552121788646, 26.40924495145893, 74.90414817968595, -160.6379160956086 },
            { 20.47214483855884, 2.342192336468925, -0.6422089998830202, -0.8281156977319701, 4.17469173357314, -0.8281156977319546, -50.46299388810366, 41.85174559699972, -14.20308888392383, -8.99159246702931, 5.459109733339193, 1.656231395463923 },
            { 10.82722404002767, 3.478466993454278, -4.006452995437258, -1.93182441437975, 17.34713220297974, -1.931824414379749, -31.36899390670002, 33.73478268677132, -16.67147981355324, -38.70071740139678, 25.36003819385432, 3.863648828759488 },
            { 0.6182525700954539, 5.499326190346813, -11.87810694921685, 3.752001140940367, 25.94112484532998, 3.752001140940346, -9.169102937686658, 21.98277435543376, -18.93125017818937, -63.7603566398769, 49.69733874376379, -7.504002281880728 },
            { -3.324235963821559, 8.205184940740567, -25.06295563435707, 22.07308623278368, 16.67176037016896, 22.07308623278364, 4.085631982128596, 10.00662886794805, -18.97320982699565, -58.40647637469508, 66.79767163888323, -44.14617246556733 },
            { 0.9684772666282856, 11.1095540054398, -41.53307515221562, 51.12477043022838, -11.48549853831749, 51.12477043022835, 3.878817454980147, 0.4464872955946557, -16.40333602264289, -18.56207807558067, 71.58065176611379, -102.2495408604567 },
            { 9.312749533840613, 13.49826305799533, -56.38794474077928, 80.31895804780433, -44.9254483903656, 80.31895804780433, -4.442076576176517, -5.555832391173459, -12.81310362448596, 33.46295203995199, 67.85044109119291, -160.6379160956086 },
            { 3.213287174227013, -3.329503352229701, 0.8970727222469974, -0.8281156977319934, 2.635410011443203, -0.8281156977319966, 6.98527479359046, -26.93991446209167, 20.0708558465039, -4.373747300639447, 0.8412645669492518, 1.65623139546399 },
            { -0.3525071150590239, -3.004548149364531, 2.817267321149888, -1.931824414379745, 10.52341188639262, -1.931824414379747, 8.653214701378852, -19.25345620694516, 13.95729676998987, -18.22955645163537, 4.888877244092864, 3.863648828759486 },
            { -3.171004227054938, -1.409508037926094, 0.2073512048217837, 3.752001140940385, 13.85566669129134, 3.752001140940367, 9.107501682037425, -10.11149872083613, 5.584509303779734, -27.5039821777609, 13.44096428164779, -7.50400228188076 },
            { -2.009937049564359, 2.150834240995025, -11.7262710982076, 22.07308623278369, 3.335075834019446, 22.07308623278366, 6.197085939102552, -4.213526488516997, -2.124456642016221, -18.3964227662465, 26.78761803043466, -44.14617246556736 },
            { 3.561147332287808, 7.22088890122562, -31.93111571077885, 51.12477043022842, -21.08745797975432, 51.12477043022837, -0.01052763778420807, -3.441497820069378, -7.330010775659838, 10.2438002487298, 42.77477344180337, -102.2495408604568 },
            { 10.5853247704821, 12.09580518851072, -52.7250062459863, 80.31895804780434, -48.58838688515863, 80.31895804780434, -6.857344416616356, -5.945480289702843, -9.878305252673627, 44.45176752433107, 56.86162560681387, -160.6379160956087 },
            { -3.329503352229723, 3.213287174226925, 2.635410011443237, -0.828115697732005, 0.8970727222469842, -0.8281156977320197, 20.07085584650405, -26.93991446209201, 6.985274793590755, 0.8412645669492693, -4.373747300639494, 1.656231395464025 },
            { -3.004548149364569, -0.3525071150590749, 10.52341188639258, -1.931824414379736, 2.81726732114993, -1.931824414379743, 13.95729676999002, -19.25345620694542, 8.653214701379039, 4.888877244092724, -18.22955645163524, 3.863648828759479 },
            { -1.409508037926131, -3.171004227054952, 13.85566669129127, 3.75200114094041, 0.2073512048218426, 3.752001140940386, 5.584509303779846, -10.11149872083625, 9.107501682037492, 13.4409642816476, -27.50398217776072, -7.504002281880797 },
            { 2.150834240994999, -2.00993704956434, 3.335075834019346, 22.07308623278374, -11.72627109820754, 22.07308623278369, -2.124456642016142, -4.213526488517045, 6.197085939102531, 26.78761803043446, -18.39642276624627, -44.14617246556742 },
            { 7.220888901225591, 3.561147332287843, -21.08745797975444, 51.12477043022844, -31.93111571077878, 51.12477043022839, -7.330010775659761, -3.441497820069398, -0.01052763778427356, 42.77477344180319, 10.24380024873001, -102.2495408604568 },
            { 12.09580518851071, 10.58532477048211, -48.58838688515866, 80.31895804780434, -52.72500624598628, 80.31895804780434, -9.878305252673577, -5.945480289702839, -6.857344416616407, 56.86162560681401, 44.45176752433093, -160.6379160956087 },
            { 2.342192336468814, 20.47214483855871, 4.174691733573169, -0.8281156977320061, -0.6422089998830302, -0.8281156977320092, -14.20308888392331, 41.85174559699888, -50.46299388810308, 5.459109733339285, -8.991592467029434, 1.656231395464016 },
            { 3.478466993454172, 10.82722404002755, 17.34713220297974, -1.931824414379737, -4.006452995437231, -1.931824414379741, -16.67147981355284, 33.73478268677069, -31.36899390669958, 25.3600381938542, -38.70071740139673, 3.863648828759481 },
            { 5.499326190346719, 0.6182525700954001, 25.94112484532992, 3.752001140940434, -11.87810694921678, 3.7520011409404, -18.93125017818907, 21.98277435543337, -9.169102937686413, 49.69733874376347, -63.76035663987663, -7.504002281880825 },
            { 8.205184940740516, -3.324235963821538, 16.6717603701688, 22.07308623278378, -25.062955634357, 22.07308623278371, -18.97320982699549, 10.0066288679479, 4.085631982128624, 66.79767163888283, -58.40647637469468, -44.14617246556747 },
            { 11.10955400543978, 0.9684772666283432, -11.4854985383177, 51.12477043022849, -41.53307515221557, 51.12477043022842, -16.40333602264279, 0.4464872955945989, 3.87881745498007, 71.58065176611353, -18.56207807558027, -102.2495408604569 },
            { 13.49826305799532, 9.312749533840647, -44.92544839036569, 80.31895804780439, -56.38794474077931, 80.31895804780436, -12.81310362448591, -5.555832391173471, -4.442076576176584, 67.85044109119306, 33.46295203995193, -160.6379160956087 },
            { 11.65773222773764, 37.22546969211276, 5.162754770031462, -0.8281156977320012, -1.630272036341432, -0.8281156977319795, -58.9030334112838, 120.0583398314674, -110.038508340034, 8.423298842714409, -11.95578157640444, 1.656231395463983 },
            { 12.0111075785263, 22.37468083304014, 21.72726984706224, -1.931824414379743, -8.386590639519707, -1.931824414379737, -53.8168583617818, 93.9750748210248, -74.54400487080943, 38.50045112610161, -51.84113033364416, 3.863648828759485 },
            { 12.58167688723763, 5.698150366553882, 33.6987655091495, 3.752001140940441, -19.63574761303629, 3.752001140940403, -45.2582000653203, 58.46951983548155, -31.49114702395275, 72.97026073522198, -87.03327863133524, -7.504002281880831 },
            { 13.26453982708484, -2.994808164595783, 25.23256170342998, 22.07308623278382, -33.62375696761817, 22.07308623278373, -34.48070228525422, 26.17297692465812, -1.962006301892946, 92.48007563866632, -84.08888037447817, -44.14617246556753 },
            { 13.92641799919731, -0.3750197808588489, -5.322012631054577, 51.12477043022852, -47.69656105947873, 51.12477043022844, -23.51043095642817, 4.866588134405569, 5.092444603684138, 90.07110948790299, -37.05253579736969, -102.2495408604569 },
            { 14.43064256815021, 8.528028596776473, -42.57421269420137, 80.31895804780439, -58.73918043694365, 80.31895804780437, -14.82552121788639, -5.112856671901344, -3.020293275138944, 74.90414817968608, 26.40924495145895, -160.6379160956087 } } };
    alignas(32) static const double FE13_C0_Q36[1][36][15] =
        { { { 0.5663023713203198, -0.02544873995123107, -0.02340903093108995, 0.004160850569601318, 0.002947933298487318, 0.004258399107569491, 0.3534057943010709, -0.2671479510088959, 0.1218594292279208, 0.3951028687350111, -0.2939865293354145, 0.133116353941705, 0.07935227730754596, -0.02505751376482733, -0.02545651281777238 },
            { 0.1189724668300723, -0.02307093186174491, -0.03410137304630943, 0.01894701649549904, 0.006146957944555456, 0.00651870726857233, 0.9632708226642054, -0.4557143795517452, 0.1865409810085932, 0.1871222854433499, -0.1921576322987383, 0.105324818176152, 0.2572330412215558, -0.09929034944883222, -0.04574243084518548 },
            { -0.04105597407318742, -0.01888844667352853, 0.02105117102716275, 0.03499176755220291, -0.009559247508219799, -0.004564188113459731, 0.5059901969018372, 0.4694647993982044, -0.1306099649998466, 0.03361440027652078, -0.08160951231373284, 0.06652148299990424, 0.2416482440257934, -0.140804681095384, 0.0538099525957322 },
            { 0.01910422911140485, -0.01332556624937018, -0.02064851238345919, 0.04050948261635284, -0.03866469951115603, 0.006432813635147312, -0.1319391418111714, 0.8303143100303555, 0.1840830270030908, -0.003519240584461167, -0.01686828801032824, 0.0309203767076775, 0.0801692449916539, -0.1068298669615617, 0.1402618314158245 },
            { -0.009384539046051891, -0.007354173561080476, 0.02206207223542971, 0.03048783292773789, -0.04824274861286354, 0.03575047013243225, 0.05478977371039653, -0.1540400513273865, 1.023044523286709, 0.0005549873357584209, 0.0007278517354273074, 0.008837367179572507, -0.004623199165902134, -0.04143370498970163, 0.08882353815952229 },
            { -0.03941102328459501, -0.002422316537228315, 0.5056492615898834, 0.01201474674210462, -0.0245209639812789, 0.02819585434355643, 0.2150792604383988, -0.5085914555595041, 0.8068597212487325, 0.0005723478902127897, 0.0004948919990804615, 0.0009149322793874926, -0.003706474975621737, -0.005113783405505529, 0.01398500121237684 },
            { 0.08241616377251784, -0.02949148552569027, -0.02340903093108995, 0.005905930067973179, 0.005825932604522979, 0.02136376821966141, 0.1718017019159944, -0.1856976842319624, 0.1047540601158287, 0.963597078074327, -0.4038591018412097, 0.1624236702304453, 0.2767231741919045, -0.04256939776248146, -0.1097847789007417 },
            { -0.03039698069203922, -0.03504907737221891, -0.03410137304630938, 0.03427516411575492, 0.01473215718994828, 0.03270340512002611, 0.4247353750883944, -0.3127713664607822, 0.1603562831571393, 0.4139301268155794, -0.3160807128409517, 0.1637876503787212, 0.8857119471015018, -0.2045619553732235, -0.1972706431815408 },
            { -0.01784940554453018, -0.04077950274241237, 0.0210511710271628, 0.0861992776649915, -0.02901048516728366, -0.02289786713358028, 0.1207242527676668, 0.3106630283719251, -0.1122762859797261, 0.04023548918134301, -0.1638923208281787, 0.1408676901497544, 0.8022351305922713, -0.3673331336404801, 0.2320629612810757 },
            { 0.02331909854941158, -0.04012562598980521, -0.02064851238345918, 0.1327943269581153, -0.1445879772708397, 0.03227248926886182, -0.1359069397644656, 0.4716006154919098, 0.1582433513693763, -0.01818647087215527, -0.03582782059067365, 0.08713232987814534, 0.2284394623698478, -0.3434171307282239, 0.6048988037139541 },
            { -0.02052775882896555, -0.02881559381182916, 0.02206207223542966, 0.1247187540655993, -0.2107514442994107, 0.1793549027134588, 0.1131288018186868, -0.2857717731703606, 0.8794400907056827, 0.005748946262566404, 0.005898846739118252, 0.03107705328273586, -0.04302885339263375, -0.1555980000091217, 0.3830639556890435 },
            { -0.0371082327213856, -0.01128209032941747, 0.5056492615898833, 0.05671112367870909, -0.1180938870441451, 0.1414544953948385, 0.1996012254250821, -0.4613458088148865, 0.6936010801974506, 0.002664748647581022, 0.002162010658637713, 0.003712396091441767, -0.01686747548377585, -0.02117112482063904, 0.06031227753062518 },
            { -0.03390245447994585, 0.02338764000435094, -0.02340903093108995, -0.007208367633073927, -0.01828888711790953, 0.04801184739374753, 0.02670939064527892, -0.08740649267622667, 0.07810598094174261, 0.3366685528010506, 0.5967451584456974, -0.1478125720607628, 0.2927206063650875, 0.09963977903609825, -0.1839611507340448 },
            { -0.009590624623655156, 0.01922682032410265, -0.03410137304630938, -0.02675314123545117, -0.02328117575028057, 0.07349597129749616, 0.02554291425880903, -0.1414716096014545, 0.1195637169796693, 0.0559434966647409, 0.2259325836297698, -0.09532126970586736, 0.9003375625560678, 0.2410331953530022, -0.3305570671006396 },
            { 0.0213409951908707, 0.000797264231187535, 0.02105117102716279, -0.002159708734087787, 0.001138111687672722, -0.05145950335896201, -0.08475942791289051, 0.1237204872463736, -0.08371464975434434, -0.06348532337029571, 0.002560592957909099, -0.002631578793695382, 0.7179997382117628, 0.01074492581966516, 0.3888569055516712 },
            { 0.007345997427417841, -0.02839014160368012, -0.02064851238345921, 0.1090104670022607, -0.1520303819668871, 0.07252755290459273, -0.03443811868674192, 0.07034156780926695, 0.1179882877336455, -0.01035658981277697, -0.0056189643402104, 0.05333120930417239, 0.07657365362958726, -0.2692362831098324, 1.013600256092644 },
            { -0.03538785785403611, -0.04146669122052127, 0.02206207223542961, 0.1926911119874768, -0.3641339101210089, 0.4030730969302508, 0.1793591947838731, -0.3912074668207265, 0.6557218964888905, 0.02048374056793152, 0.01395228964966092, 0.03580001250059071, -0.1323787081830148, -0.2004508961058044, 0.6418821151610073 },
            { -0.03166934808945405, -0.02247685866577399, 0.5056492615898833, 0.1153982085802807, -0.2481580406199581, 0.3178976469051107, 0.1666150199026975, -0.3720318026549536, 0.5171579286871786, 0.004998938064588968, 0.003663635440551771, 0.005632465596944657, -0.03056850040267273, -0.03317097928092912, 0.1010624249465054 },
            { 0.02338764000435103, -0.03390245447994587, -0.02340903093108996, 0.02670939064527884, -0.08740649267622684, 0.07810598094174263, -0.00720836763307384, -0.01828888711790939, 0.04801184739374757, -0.1478125720607627, 0.5967451584456973, 0.3366685528010505, 0.09963977903609841, 0.2927206063650873, -0.1839611507340448 },
            { 0.01922682032410276, -0.009590624623655099, -0.03410137304630943, 0.02554291425880879, -0.1414716096014547, 0.1195637169796693, -0.02675314123545103, -0.02328117575028042, 0.07349597129749633, -0.09532126970586727, 0.2259325836297699, 0.05594349666474059, 0.2410331953530027, 0.9003375625560676, -0.3305570671006395 },
            { 0.0007972642311876534, 0.02134099519087066, 0.02105117102716274, -0.08475942791289075, 0.1237204872463735, -0.08371464975434451, -0.002159708734087558, 0.001138111687672763, -0.05145950335896173, -0.002631578793695306, 0.002560592957909095, -0.06348532337029582, 0.01074492581966532, 0.7179997382117629, 0.3888569055516713 },
            { -0.02839014160368004, 0.007345997427417729, -0.02064851238345924, -0.0344381186867421, 0.07034156780926724, 0.1179882877336453, 0.1090104670022609, -0.152030381966887, 0.07252755290459309, 0.05333120930417239, -0.005618964340210428, -0.01035658981277691, -0.2692362831098324, 0.0765736536295874, 1.013600256092644 },
            { -0.04146669122052123, -0.03538785785403617, 0.02206207223542958, 0.1793591947838731, -0.3912074668207267, 0.6557218964888902, 0.1926911119874769, -0.3641339101210089, 0.4030730969302512, 0.03580001250059062, 0.01395228964966088, 0.02048374056793167, -0.2004508961058041, -0.1323787081830149, 0.6418821151610073 },
            { -0.02247685866577399, -0.03166934808945407, 0.5056492615898833, 0.1666150199026973, -0.3720318026549536, 0.5171579286871776, 0.115398208580281, -0.2481580406199584, 0.3178976469051115, 0.005632465596944507, 0.00366363544055176, 0.004998938064589148, -0.03317097928092887, -0.03056850040267295, 0.1010624249465054 },
            { -0.02949148552569027, 0.08241616377251816, -0.02340903093108997, 0.1718017019159942, -0.1856976842319624, 0.1047540601158288, 0.005905930067973381, 0.005825932604522993, 0.02136376821966157, 0.1624236702304457, -0.4038591018412102, 0.9635970780743269, -0.04256939776248112, 0.2767231741919042, -0.1097847789007416 },
            { -0.03504907737221884, -0.03039698069203905, -0.03410137304630947, 0.4247353750883946, -0.3127713664607827, 0.1603562831571395, 0.03427516411575506, 0.01473215718994839, 0.03270340512002636, 0.1637876503787215, -0.3160807128409521, 0.4139301268155793, -0.2045619553732231, 0.8857119471015016, -0.1972706431815406 },
            { -0.04077950274241227, -0.01784940554453018, 0.02105117102716272, 0.1207242527676668, 0.3106630283719253, -0.1122762859797262, 0.08619927766499168, -0.02901048516728354, -0.02289786713357989, 0.1408676901497546, -0.1638923208281787, 0.04023548918134293, -0.3673331336404798, 0.8022351305922713, 0.2320629612810758 },
            { -0.04012562598980515, 0.02331909854941146, -0.02064851238345927, -0.1359069397644659, 0.4716006154919106, 0.1582433513693761, 0.1327943269581155, -0.1445879772708395, 0.03227248926886228, 0.08713232987814536, -0.03582782059067374, -0.0181864708721552, -0.3434171307282237, 0.2284394623698477, 0.6048988037139532 },
            { -0.02881559381182913, -0.02052775882896563, 0.02206207223542953, 0.1131288018186868, -0.285771773170361, 0.8794400907056824, 0.1247187540655995, -0.2107514442994106, 0.1793549027134593, 0.03107705328273583, 0.005898846739118141, 0.005748946262566538, -0.1555980000091214, -0.04302885339263396, 0.3830639556890433 },
            { -0.01128209032941745, -0.03710823272138564, 0.5056492615898833, 0.1996012254250819, -0.4613458088148865, 0.6936010801974497, 0.05671112367870951, -0.1180938870441454, 0.1414544953948397, 0.003712396091441618, 0.002162010658637605, 0.002664748647581181, -0.02117112482063876, -0.01686747548377607, 0.06031227753062518 },
            { -0.02544873995123116, 0.5663023713203194, -0.02340903093108997, 0.3534057943010703, -0.2671479510088958, 0.1218594292279207, 0.004160850569601422, 0.002947933298487457, 0.004258399107569602, 0.1331163539417056, -0.2939865293354155, 0.3951028687350122, -0.02505751376482707, 0.07935227730754596, -0.02545651281777254 },
            { -0.02307093186174499, 0.1189724668300723, -0.03410137304630947, 0.9632708226642046, -0.4557143795517452, 0.1865409810085933, 0.01894701649549907, 0.006146957944555664, 0.006518707268572566, 0.1053248181761524, -0.1921576322987391, 0.1871222854433504, -0.09929034944883222, 0.2572330412215566, -0.04574243084518544 },
            { -0.01888844667352854, -0.04105597407318742, 0.02105117102716274, 0.5059901969018368, 0.4694647993982046, -0.1306099649998466, 0.03499176755220307, -0.00955924750821957, -0.004564188113459364, 0.06652148299990442, -0.08160951231373303, 0.03361440027652089, -0.1408046810953837, 0.2416482440257934, 0.05380995259573269 },
            { -0.01332556624937019, 0.01910422911140468, -0.02064851238345926, -0.1319391418111717, 0.8303143100303558, 0.1840830270030905, 0.04050948261635308, -0.03866469951115575, 0.006432813635147864, 0.03092037670767765, -0.01686828801032835, -0.003519240584461061, -0.1068298669615616, 0.08016924499165379, 0.1402618314158247 },
            { -0.007354173561080467, -0.009384539046051989, 0.02206207223542951, 0.05478977371039655, -0.1540400513273868, 1.023044523286709, 0.0304878329277381, -0.0482427486128634, 0.03575047013243282, 0.008837367179572547, 0.000727851735427134, 0.0005549873357585094, -0.04143370498970129, -0.004623199165902356, 0.08882353815952196 },
            { -0.002422316537228353, -0.03941102328459502, 0.5056492615898832, 0.2150792604383987, -0.5085914555595041, 0.8068597212487312, 0.01201474674210543, -0.02452096398127984, 0.02819585434355815, 0.0009149322793874058, 0.0004948919990803713, 0.0005723478902129528, -0.00511378340550539, -0.003706474975622043, 0.01398500121237717 } } };
    alignas(32) static const double FE3_C0_D01_Q36[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q36[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q36[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q36[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q36[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q36[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q36[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q36[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q36[0][0][1];
    alignas(32) double sp[9];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c3 / sp[2];
    sp[4] = -1 * J_c2 / sp[2];
    sp[5] = J_c0 / sp[2];
    sp[6] = -1 * J_c1 / sp[2];
    sp[7] = std::pow(2 * w[3][0], 2 + w[2][0]);
    sp[8] = std::abs(sp[2]);
    alignas(32) double BF0[15] = {};
    for (int iq = 0; iq < 36; ++iq)
    {
        // Quadrature loop body setup (num_points=36)
        // Unstructured varying computations for num_points=36
        const double w0_d00 = w[0][0] * FE13_C0_D20_Q36[0][iq][0] + w[0][1] * FE13_C0_D20_Q36[0][iq][1] + w[0][3] * FE13_C0_D20_Q36[0][iq][2] + w[0][4] * FE13_C0_D20_Q36[0][iq][3] + w[0][6] * FE13_C0_D20_Q36[0][iq][4] + w[0][7] * FE13_C0_D20_Q36[0][iq][5] + w[0][9] * FE13_C0_D20_Q36[0][iq][6] + w[0][10] * FE13_C0_D20_Q36[0][iq][7] + w[0][11] * FE13_C0_D20_Q36[0][iq][8] + w[0][12] * FE13_C0_D20_Q36[0][iq][9] + w[0][13] * FE13_C0_D20_Q36[0][iq][10] + w[0][14] * FE13_C0_D20_Q36[0][iq][11];
        const double w0_d01 = w[0][0] * FE13_C0_D11_Q36[0][iq][0] + w[0][3] * FE13_C0_D11_Q36[0][iq][1] + w[0][4] * FE13_C0_D11_Q36[0][iq][2] + w[0][5] * FE13_C0_D11_Q36[0][iq][3] + w[0][6] * FE13_C0_D11_Q36[0][iq][4] + w[0][7] * FE13_C0_D11_Q36[0][iq][5] + w[0][8] * FE13_C0_D11_Q36[0][iq][6] + w[0][9] * FE13_C0_D11_Q36[0][iq][7] + w[0][10] * FE13_C0_D11_Q36[0][iq][8] + w[0][11] * FE13_C0_D11_Q36[0][iq][9] + w[0][12] * FE13_C0_D11_Q36[0][iq][10] + w[0][13] * FE13_C0_D11_Q36[0][iq][11] + w[0][14] * FE13_C0_D11_Q36[0][iq][12];
        const double w0_d11 = w[0][0] * FE13_C0_D02_Q36[0][iq][0] + w[0][2] * FE13_C0_D02_Q36[0][iq][1] + w[0][4] * FE13_C0_D02_Q36[0][iq][2] + w[0][5] * FE13_C0_D02_Q36[0][iq][3] + w[0][6] * FE13_C0_D02_Q36[0][iq][4] + w[0][7] * FE13_C0_D02_Q36[0][iq][5] + w[0][8] * FE13_C0_D02_Q36[0][iq][6] + w[0][9] * FE13_C0_D02_Q36[0][iq][7] + w[0][10] * FE13_C0_D02_Q36[0][iq][8] + w[0][12] * FE13_C0_D02_Q36[0][iq][9] + w[0][13] * FE13_C0_D02_Q36[0][iq][10] + w[0][14] * FE13_C0_D02_Q36[0][iq][11];
        const double w1_d00 = w[1][0] * FE13_C0_D20_Q36[0][iq][0] + w[1][1] * FE13_C0_D20_Q36[0][iq][1] + w[1][3] * FE13_C0_D20_Q36[0][iq][2] + w[1][4] * FE13_C0_D20_Q36[0][iq][3] + w[1][6] * FE13_C0_D20_Q36[0][iq][4] + w[1][7] * FE13_C0_D20_Q36[0][iq][5] + w[1][9] * FE13_C0_D20_Q36[0][iq][6] + w[1][10] * FE13_C0_D20_Q36[0][iq][7] + w[1][11] * FE13_C0_D20_Q36[0][iq][8] + w[1][12] * FE13_C0_D20_Q36[0][iq][9] + w[1][13] * FE13_C0_D20_Q36[0][iq][10] + w[1][14] * FE13_C0_D20_Q36[0][iq][11];
        const double w1_d01 = w[1][0] * FE13_C0_D11_Q36[0][iq][0] + w[1][3] * FE13_C0_D11_Q36[0][iq][1] + w[1][4] * FE13_C0_D11_Q36[0][iq][2] + w[1][5] * FE13_C0_D11_Q36[0][iq][3] + w[1][6] * FE13_C0_D11_Q36[0][iq][4] + w[1][7] * FE13_C0_D11_Q36[0][iq][5] + w[1][8] * FE13_C0_D11_Q36[0][iq][6] + w[1][9] * FE13_C0_D11_Q36[0][iq][7] + w[1][10] * FE13_C0_D11_Q36[0][iq][8] + w[1][11] * FE13_C0_D11_Q36[0][iq][9] + w[1][12] * FE13_C0_D11_Q36[0][iq][10] + w[1][13] * FE13_C0_D11_Q36[0][iq][11] + w[1][14] * FE13_C0_D11_Q36[0][iq][12];
        const double w1_d11 = w[1][0] * FE13_C0_D02_Q36[0][iq][0] + w[1][2] * FE13_C0_D02_Q36[0][iq][1] + w[1][4] * FE13_C0_D02_Q36[0][iq][2] + w[1][5] * FE13_C0_D02_Q36[0][iq][3] + w[1][6] * FE13_C0_D02_Q36[0][iq][4] + w[1][7] * FE13_C0_D02_Q36[0][iq][5] + w[1][8] * FE13_C0_D02_Q36[0][iq][6] + w[1][9] * FE13_C0_D02_Q36[0][iq][7] + w[1][10] * FE13_C0_D02_Q36[0][iq][8] + w[1][12] * FE13_C0_D02_Q36[0][iq][9] + w[1][13] * FE13_C0_D02_Q36[0][iq][10] + w[1][14] * FE13_C0_D02_Q36[0][iq][11];
        alignas(32) double sv36[52];
        sv36[0] = w0_d00 * sp[3];
        sv36[1] = w0_d01 * sp[4];
        sv36[2] = sv36[0] + sv36[1];
        sv36[3] = sv36[2] * sp[3];
        sv36[4] = w0_d01 * sp[3];
        sv36[5] = w0_d11 * sp[4];
        sv36[6] = sv36[4] + sv36[5];
        sv36[7] = sv36[6] * sp[4];
        sv36[8] = sv36[3] + sv36[7];
        sv36[9] = w1_d00 * sp[3];
        sv36[10] = w1_d01 * sp[4];
        sv36[11] = sv36[9] + sv36[10];
        sv36[12] = sv36[11] * sp[3];
        sv36[13] = w1_d01 * sp[3];
        sv36[14] = w1_d11 * sp[4];
        sv36[15] = sv36[13] + sv36[14];
        sv36[16] = sv36[15] * sp[4];
        sv36[17] = sv36[12] + sv36[16];
        sv36[18] = sv36[8] + -1 * sv36[17];
        sv36[19] = sv36[18] * sv36[18];
        sv36[20] = w0_d01 * sp[5];
        sv36[21] = w0_d00 * sp[6];
        sv36[22] = sv36[20] + sv36[21];
        sv36[23] = sv36[22] * sp[3];
        sv36[24] = w0_d11 * sp[5];
        sv36[25] = w0_d01 * sp[6];
        sv36[26] = sv36[24] + sv36[25];
        sv36[27] = sv36[26] * sp[4];
        sv36[28] = sv36[23] + sv36[27];
        sv36[29] = w1_d01 * sp[5];
        sv36[30] = w1_d00 * sp[6];
        sv36[31] = sv36[29] + sv36[30];
        sv36[32] = sv36[31] * sp[3];
        sv36[33] = w1_d11 * sp[5];
        sv36[34] = w1_d01 * sp[6];
        sv36[35] = sv36[33] + sv36[34];
        sv36[36] = sv36[35] * sp[4];
        sv36[37] = sv36[32] + sv36[36];
        sv36[38] = sv36[28] + -1 * sv36[37];
        sv36[39] = sv36[38] * (2 * sv36[38]);
        sv36[40] = sv36[19] + sv36[39];
        sv36[41] = sv36[26] * sp[5];
        sv36[42] = sv36[22] * sp[6];
        sv36[43] = sv36[41] + sv36[42];
        sv36[44] = sv36[35] * sp[5];
        sv36[45] = sv36[31] * sp[6];
        sv36[46] = sv36[44] + sv36[45];
        sv36[47] = sv36[43] + -1 * sv36[46];
        sv36[48] = sv36[47] * sv36[47];
        sv36[49] = sv36[40] + sv36[48];
        sv36[50] = sv36[49] * sp[7];
        sv36[51] = sv36[50] * sp[8];
        const double fw0 = sv36[51] * weights36[iq];
        for (int i = 0; i < 15; ++i)
            BF0[i] += fw0 * FE13_C0_Q36[0][iq][i];
    }
    std::fill(A, A + 15, 0.0);
    for (int i = 0; i < 15; ++i)
        A[i] += BF0[i];
  }

};


class erroripdg1_form_0: public ufc::form
{
public:

  erroripdg1_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~erroripdg1_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "bb2b0102c1fb551018281be61b83dfd73d474889234ed8f9b0c73f06b57fd7b2bcabd8c7491374947099fb10c19531256b11f94aa542cbef7c715951b7c38db2";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 0;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new erroripdg1_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new erroripdg1_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new erroripdg1_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new erroripdg1_finite_element_3();
    case 1:
        return new erroripdg1_finite_element_3();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new erroripdg1_dofmap_3();
    case 1:
        return new erroripdg1_dofmap_3();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new erroripdg1_cell_integral_0_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class erroripdg1_form_1: public ufc::form
{
public:

  erroripdg1_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~erroripdg1_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "a63a0ec5cdc25dc1c1ae53a7e84697a03e3ca4cbbdd142a229755929b4951c8b66ffb5713abde60ddcdf7d917bd778ea7cdac6d021d1e6540d5b9d3db22cf7ba";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 4;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 4)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new erroripdg1_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new erroripdg1_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new erroripdg1_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new erroripdg1_finite_element_3();
    case 1:
        return new erroripdg1_finite_element_3();
    case 2:
        return new erroripdg1_finite_element_3();
    case 3:
        return new erroripdg1_finite_element_2();
    case 4:
        return new erroripdg1_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new erroripdg1_dofmap_3();
    case 1:
        return new erroripdg1_dofmap_3();
    case 2:
        return new erroripdg1_dofmap_3();
    case 3:
        return new erroripdg1_dofmap_2();
    case 4:
        return new erroripdg1_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new erroripdg1_cell_integral_1_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace ErrorIPDG1
{

class CoefficientSpace_h: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_h(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg1_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_h(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg1_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_k: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_k(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg1_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_k(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg1_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg1_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_u1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_u1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg1_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_u1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg1_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_u2: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_u2(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg1_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_u2(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg1_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg1_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg1_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg1_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg1_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_a_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_a: public dolfin::Form
{
public:

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const erroripdg1_form_0>();
  }

  // Destructor
  ~Form_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

class MultiMeshForm_a: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_a(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_a(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Destructor
  ~MultiMeshForm_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

class Form_L_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg1_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg1_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg1_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_L_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_L_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_L_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_u1 Form_L_FunctionSpace_1;

typedef CoefficientSpace_u2 Form_L_FunctionSpace_2;

typedef CoefficientSpace_k Form_L_FunctionSpace_3;

typedef CoefficientSpace_h Form_L_FunctionSpace_4;

class Form_L: public dolfin::Form
{
public:

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 4), u1(*this, 0), u2(*this, 1), k(*this, 2), h(*this, 3)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const erroripdg1_form_1>();
  }

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u1, std::shared_ptr<const dolfin::GenericFunction> u2, std::shared_ptr<const dolfin::GenericFunction> k, std::shared_ptr<const dolfin::GenericFunction> h):
    dolfin::Form(1, 4), u1(*this, 0), u2(*this, 1), k(*this, 2), h(*this, 3)
  {
    _function_spaces[0] = V0;

    this->u1 = u1;
    this->u2 = u2;
    this->k = k;
    this->h = h;

    _ufc_form = std::make_shared<const erroripdg1_form_1>();
  }

  // Destructor
  ~Form_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u1")
      return 0;
    else if (name == "u2")
      return 1;
    else if (name == "k")
      return 2;
    else if (name == "h")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u1";
    case 1:
      return "u2";
    case 2:
      return "k";
    case 3:
      return "h";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_u1;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_u2;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_k;
  typedef Form_L_FunctionSpace_4 CoefficientSpace_h;

  // Coefficients
  dolfin::CoefficientAssigner u1;
  dolfin::CoefficientAssigner u2;
  dolfin::CoefficientAssigner k;
  dolfin::CoefficientAssigner h;
};

class MultiMeshForm_L: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), u1(*this, 0), u2(*this, 1), k(*this, 2), h(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u1, std::shared_ptr<const dolfin::GenericFunction> u2, std::shared_ptr<const dolfin::GenericFunction> k, std::shared_ptr<const dolfin::GenericFunction> h):
    dolfin::MultiMeshForm(V0), u1(*this, 0), u2(*this, 1), k(*this, 2), h(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->u1 = u1;
    this->u2 = u2;
    this->k = k;
    this->h = h;

  }

  // Destructor
  ~MultiMeshForm_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u1")
      return 0;
    else if (name == "u2")
      return 1;
    else if (name == "k")
      return 2;
    else if (name == "h")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u1";
    case 1:
      return "u2";
    case 2:
      return "k";
    case 3:
      return "h";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_u1;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_u2;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_k;
  typedef Form_L_FunctionSpace_4 CoefficientSpace_h;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner u1;
  dolfin::MultiMeshCoefficientAssigner u2;
  dolfin::MultiMeshCoefficientAssigner k;
  dolfin::MultiMeshCoefficientAssigner h;
};

// Class typedefs
typedef Form_a BilinearForm;
typedef MultiMeshForm_a MultiMeshBilinearForm;
typedef Form_a JacobianForm;
typedef MultiMeshForm_a MultiMeshJacobianForm;
typedef Form_L LinearForm;
typedef MultiMeshForm_L MultiMeshLinearForm;
typedef Form_L ResidualForm;
typedef MultiMeshForm_L MultiMeshResidualForm;
typedef Form_a::TestSpace FunctionSpace;
typedef Form_a::MultiMeshTestSpace MultiMeshFunctionSpace;

}

#endif
