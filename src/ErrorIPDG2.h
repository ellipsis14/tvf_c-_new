// This code conforms with the UFC specification version 2017.2.0
// and was automatically generated by FFC version 2017.2.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#ifndef __ERRORIPDG2_H
#define __ERRORIPDG2_H
#include <algorithm>
#include <cmath>
#include <iostream>
#include <stdexcept>
#include <ufc.h>

class erroripdg2_finite_element_0: public ufc::finite_element
{
public:

  erroripdg2_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~erroripdg2_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', triangle, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 3;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 3 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[3] = {};
    const std::size_t num_components[3] = { 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 3; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[3 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 3 * num_derivatives, 0.0);
    const std::size_t reference_offsets[3] = {};
    const std::size_t physical_offsets[3] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 3; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[3 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[3 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[3];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[3];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 3, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[6] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 6, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new erroripdg2_finite_element_0();
  }

};


class erroripdg2_finite_element_1: public ufc::finite_element
{
public:

  erroripdg2_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~erroripdg2_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 6;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 6 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 3 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 4 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 5 + 1] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 6 * num_derivatives * 2, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t num_components[6] = { 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 6; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 6 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t physical_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 6; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[12];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[12];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 6, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[3] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[5] = dof_values[5];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = coordinate_dofs[0];
    dof_coordinates[2 * 3 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 4] = coordinate_dofs[2];
    dof_coordinates[2 * 4 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 5] = coordinate_dofs[4];
    dof_coordinates[2 * 5 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new erroripdg2_finite_element_0();
    case 1:
        return new erroripdg2_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new erroripdg2_finite_element_1();
  }

};


class erroripdg2_finite_element_2: public ufc::finite_element
{
public:

  erroripdg2_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~erroripdg2_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', triangle, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][1] = { { 1.0 } };
    for (std::size_t k = 0; k < num_points; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basisvalues for each relevant embedded degree
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        // Accumulate products of coefficients and basisvalues
        reference_values[ip] += coefficients0[0][0] * basisvalues0[0];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * num_derivatives, 0.0);
    if (order > 0)
        return;
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    std::fill_n(values, num_points, 0.0);
    const std::size_t reference_offsets[1] = {};
    const std::size_t physical_offsets[1] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[1][1];
        for (std::size_t r = 0; r < 1; ++r)
            for (std::size_t s = 0; s < 1; ++s)
                transform[r][s] = 1.0;
        for (std::size_t d = 0; d < 1; ++d)
        {
            for (std::size_t s = 0; s < 1; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[ip + d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < 1; ++r)
                        values[ip + d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
    }
    // Evaluate basis on reference element
    double ref_values[1];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[1];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[2] = { 0.3333333333333333, 0.3333333333333333 };
    std::copy_n(dof_X, 2, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new erroripdg2_finite_element_2();
  }

};


class erroripdg2_finite_element_3: public ufc::finite_element
{
public:

  erroripdg2_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~erroripdg2_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Discontinuous Lagrange', triangle, 4)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 15;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 4;
  }

  const char * family() const final override
  {
    return "Discontinuous Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][15] = { { 0.0, -0.04123930494211611, -0.023809523809523794, 0.0289800294976278, 0.02244783432338244, 0.012960263189328946, -0.03959425806109994, -0.03346325566315745, -0.02592052637865798, -0.01496522288225498, 0.03212472543663117, 0.028331344813852282, 0.023944356611607962, 0.01854721887848183, 0.010708241812210409 } };
    static const double coefficients1[1][15] = { { 0.0, 0.04123930494211617, -0.023809523809523832, 0.02898002949762785, -0.02244783432338247, 0.012960263189328969, 0.03959425806109991, -0.03346325566315744, 0.025920526378657945, -0.014965222882254959, 0.03212472543663116, -0.028331344813852296, 0.023944356611607955, -0.018547218878481802, 0.010708241812210386 } };
    static const double coefficients2[1][15] = { { 0.0, 0.0, 0.04761904761904756, 0.0, 0.0, 0.03888078956798697, 0.0, 0.0, 0.0, 0.05986089152901992, 0.0, 0.0, 0.0, 0.0, 0.053541209061051906 } };
    static const double coefficients3[1][15] = { { 0.1257078722109417, 0.1319657758147716, -0.025396825396825362, 0.13910414158861362, -0.07183306983482383, 0.031104631654389585, 0.06335081289775982, 0.026770604530525925, -0.06220926330877914, 0.047888713223215904, 0.0, 0.056662689627704536, -0.08380524814062786, 0.08346248495316816, -0.05354120906105194 } };
    static const double coefficients4[1][15] = { { -0.03142696805273546, 0.010997147984564326, 0.006349206349206258, 0.0, 0.18856180831641273, -0.16329931618554516, 0.0, 0.09369711585684087, 0.0, -0.04190262407031389, 0.0, 0.0, 0.08380524814062784, -0.13910414158861362, 0.10708241812210381 } };
    static const double coefficients5[1][15] = { { 0.12570787221094165, 0.04398859193825734, 0.12698412698412695, 0.0, 0.035916534917411994, 0.15552315827194782, 0.0, 0.0, 0.10368210551463188, -0.011972178305803988, 0.0, 0.0, 0.0, 0.09273609439240912, -0.10708241812210383 } };
    static const double coefficients6[1][15] = { { 0.12570787221094193, -0.13196577581477165, -0.02539682539682538, 0.13910414158861362, 0.07183306983482386, 0.03110463165438953, -0.06335081289775985, 0.026770604530525936, 0.06220926330877919, 0.04788871322321592, 0.0, -0.05666268962770456, -0.08380524814062781, -0.08346248495316815, -0.053541209061051906 } };
    static const double coefficients7[1][15] = { { -0.03142696805273531, -0.010997147984564293, 0.0063492063492062096, 0.0, -0.18856180831641264, -0.16329931618554508, 0.0, 0.09369711585684087, 0.0, -0.041902624070313824, 0.0, 0.0, 0.08380524814062784, 0.13910414158861353, 0.10708241812210373 } };
    static const double coefficients8[1][15] = { { 0.12570787221094196, -0.043988591938257195, 0.12698412698412712, 0.0, -0.03591653491741193, 0.15552315827194776, 0.0, 0.0, -0.10368210551463188, -0.01197217830580402, 0.0, 0.0, 0.0, -0.09273609439240908, -0.10708241812210381 } };
    static const double coefficients9[1][15] = { { 0.1257078722109418, -0.08797718387651439, -0.10158730158730163, 0.09273609439240911, 0.10774960475223583, 0.07257747386024228, 0.07918851612219983, -0.013385302265262976, -0.05184105275731594, -0.041902624070313935, -0.12849890174652465, -0.05666268962770457, -0.01197217830580397, 0.00927360943924089, 0.01070824181221041 } };
    static const double coefficients10[1][15] = { { -0.03142696805273516, 0.0, -0.0126984126984128, -0.24343224778007388, 0.0, 0.05443310539518176, 0.0, 0.09369711585684087, 0.0, -0.04190262407031391, 0.19274835261978696, 0.0, -0.02394435661160795, 0.0, 0.01070824181221036 } };
    static const double coefficients11[1][15] = { { 0.1257078722109417, 0.08797718387651442, -0.1015873015873015, 0.09273609439240912, -0.1077496047522358, 0.0725774738602423, -0.07918851612219979, -0.013385302265262987, 0.05184105275731596, -0.041902624070313955, -0.12849890174652462, 0.0566626896277046, -0.011972178305804002, -0.009273609439240906, 0.010708241812210412 } };
    static const double coefficients12[1][15] = { { 0.2514157444218836, -0.35190873550605756, -0.20317460317460323, -0.13910414158861362, -0.10774960475223579, -0.06220926330877909, 0.19005243869327954, -0.026770604530525925, 0.12441852661755824, 0.15563831797545175, 0.0, 0.16998806888311374, 0.08380524814062784, -0.0278208283177227, -0.053541209061051954 } };
    static const double coefficients13[1][15] = { { 0.2514157444218834, 0.35190873550605767, -0.20317460317460323, -0.13910414158861364, 0.10774960475223579, -0.06220926330877917, -0.1900524386932796, -0.026770604530525943, -0.12441852661755828, 0.15563831797545175, 0.0, -0.16998806888311377, 0.08380524814062784, 0.02782082831772275, -0.05354120906105191 } };
    static const double coefficients14[1][15] = { { 0.2514157444218833, 0.0, 0.40634920634920646, 0.0, 0.0, -0.18662778992633744, 0.0, -0.18739423171368177, 0.0, -0.2035270311986677, 0.0, 0.0, -0.16761049628125563, 0.0, 0.10708241812210391 } };
    for (std::size_t k = 0; k < num_points * 15; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues4[15] = {};
        basisvalues4[0] = 1.0;
        const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues4[1] = tmp1_4;
        const double tmp2_4 = (1.0 - Y[1]) / 2.0;
        const double tmp3_4 = tmp2_4 * tmp2_4;
        basisvalues4[3] = 1.5 * tmp1_4 * basisvalues4[1] - 0.5 * tmp3_4 * basisvalues4[0];
        basisvalues4[6] = 1.6666666666666667 * tmp1_4 * basisvalues4[3] - 0.6666666666666666 * tmp3_4 * basisvalues4[1];
        basisvalues4[10] = 1.75 * tmp1_4 * basisvalues4[6] - 0.75 * tmp3_4 * basisvalues4[3];
        basisvalues4[2] = (0.5 + 1.5 * Y[1]) * basisvalues4[0];
        basisvalues4[4] = (1.5 + 2.5 * Y[1]) * basisvalues4[1];
        basisvalues4[7] = (2.5 + 3.5 * Y[1]) * basisvalues4[3];
        basisvalues4[11] = (3.5 + 4.5 * Y[1]) * basisvalues4[6];
        basisvalues4[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues4[2] - 0.5555555555555556 * basisvalues4[0];
        basisvalues4[9] = (0.05 + 1.75 * Y[1]) * basisvalues4[5] - 0.7 * basisvalues4[2];
        basisvalues4[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues4[9] - 0.7714285714285715 * basisvalues4[5];
        basisvalues4[8] = (0.54 + 2.1 * Y[1]) * basisvalues4[4] - 0.56 * basisvalues4[1];
        basisvalues4[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues4[8] - 0.7142857142857143 * basisvalues4[4];
        basisvalues4[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues4[7] - 0.5510204081632653 * basisvalues4[3];
        basisvalues4[0] *= std::sqrt(0.5);
        basisvalues4[2] *= std::sqrt(1.0);
        basisvalues4[5] *= std::sqrt(1.5);
        basisvalues4[9] *= std::sqrt(2.0);
        basisvalues4[14] *= std::sqrt(2.5);
        basisvalues4[1] *= std::sqrt(3.0);
        basisvalues4[4] *= std::sqrt(4.5);
        basisvalues4[8] *= std::sqrt(6.0);
        basisvalues4[13] *= std::sqrt(7.5);
        basisvalues4[3] *= std::sqrt(7.5);
        basisvalues4[7] *= std::sqrt(10.0);
        basisvalues4[12] *= std::sqrt(12.5);
        basisvalues4[6] *= std::sqrt(14.0);
        basisvalues4[11] *= std::sqrt(17.5);
        basisvalues4[10] *= std::sqrt(22.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip] += coefficients0[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 1] += coefficients1[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 2] += coefficients2[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 3] += coefficients3[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 4] += coefficients4[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 5] += coefficients5[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 6] += coefficients6[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 7] += coefficients7[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 8] += coefficients8[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 9] += coefficients9[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 10] += coefficients10[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 11] += coefficients11[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 12] += coefficients12[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 13] += coefficients13[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 14] += coefficients14[0][r] * basisvalues4[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 15 * num_derivatives, 0.0);
    if (order > 4)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][15][15] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.291502622129207, 0.0, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 10.954451150103308, 0.0, 0.0, -3.8332593899996574, 0.0, 17.748239349298842, 0.0, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.732863826479688, 0.0, 3.3466401061362943, 4.364357804719854, 0.0, -5.074680379332355, 0.0, 17.008401285415207, 0.0, 1.521277658511322, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 0.0, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 0.0, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, 0.0, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][15] = { { 0.0, -0.04123930494211611, -0.023809523809523794, 0.0289800294976278, 0.02244783432338244, 0.012960263189328946, -0.03959425806109994, -0.03346325566315745, -0.02592052637865798, -0.01496522288225498, 0.03212472543663117, 0.028331344813852282, 0.023944356611607962, 0.01854721887848183, 0.010708241812210409 } };
    static const double coefficients1[1][15] = { { 0.0, 0.04123930494211617, -0.023809523809523832, 0.02898002949762785, -0.02244783432338247, 0.012960263189328969, 0.03959425806109991, -0.03346325566315744, 0.025920526378657945, -0.014965222882254959, 0.03212472543663116, -0.028331344813852296, 0.023944356611607955, -0.018547218878481802, 0.010708241812210386 } };
    static const double coefficients2[1][15] = { { 0.0, 0.0, 0.04761904761904756, 0.0, 0.0, 0.03888078956798697, 0.0, 0.0, 0.0, 0.05986089152901992, 0.0, 0.0, 0.0, 0.0, 0.053541209061051906 } };
    static const double coefficients3[1][15] = { { 0.1257078722109417, 0.1319657758147716, -0.025396825396825362, 0.13910414158861362, -0.07183306983482383, 0.031104631654389585, 0.06335081289775982, 0.026770604530525925, -0.06220926330877914, 0.047888713223215904, 0.0, 0.056662689627704536, -0.08380524814062786, 0.08346248495316816, -0.05354120906105194 } };
    static const double coefficients4[1][15] = { { -0.03142696805273546, 0.010997147984564326, 0.006349206349206258, 0.0, 0.18856180831641273, -0.16329931618554516, 0.0, 0.09369711585684087, 0.0, -0.04190262407031389, 0.0, 0.0, 0.08380524814062784, -0.13910414158861362, 0.10708241812210381 } };
    static const double coefficients5[1][15] = { { 0.12570787221094165, 0.04398859193825734, 0.12698412698412695, 0.0, 0.035916534917411994, 0.15552315827194782, 0.0, 0.0, 0.10368210551463188, -0.011972178305803988, 0.0, 0.0, 0.0, 0.09273609439240912, -0.10708241812210383 } };
    static const double coefficients6[1][15] = { { 0.12570787221094193, -0.13196577581477165, -0.02539682539682538, 0.13910414158861362, 0.07183306983482386, 0.03110463165438953, -0.06335081289775985, 0.026770604530525936, 0.06220926330877919, 0.04788871322321592, 0.0, -0.05666268962770456, -0.08380524814062781, -0.08346248495316815, -0.053541209061051906 } };
    static const double coefficients7[1][15] = { { -0.03142696805273531, -0.010997147984564293, 0.0063492063492062096, 0.0, -0.18856180831641264, -0.16329931618554508, 0.0, 0.09369711585684087, 0.0, -0.041902624070313824, 0.0, 0.0, 0.08380524814062784, 0.13910414158861353, 0.10708241812210373 } };
    static const double coefficients8[1][15] = { { 0.12570787221094196, -0.043988591938257195, 0.12698412698412712, 0.0, -0.03591653491741193, 0.15552315827194776, 0.0, 0.0, -0.10368210551463188, -0.01197217830580402, 0.0, 0.0, 0.0, -0.09273609439240908, -0.10708241812210381 } };
    static const double coefficients9[1][15] = { { 0.1257078722109418, -0.08797718387651439, -0.10158730158730163, 0.09273609439240911, 0.10774960475223583, 0.07257747386024228, 0.07918851612219983, -0.013385302265262976, -0.05184105275731594, -0.041902624070313935, -0.12849890174652465, -0.05666268962770457, -0.01197217830580397, 0.00927360943924089, 0.01070824181221041 } };
    static const double coefficients10[1][15] = { { -0.03142696805273516, 0.0, -0.0126984126984128, -0.24343224778007388, 0.0, 0.05443310539518176, 0.0, 0.09369711585684087, 0.0, -0.04190262407031391, 0.19274835261978696, 0.0, -0.02394435661160795, 0.0, 0.01070824181221036 } };
    static const double coefficients11[1][15] = { { 0.1257078722109417, 0.08797718387651442, -0.1015873015873015, 0.09273609439240912, -0.1077496047522358, 0.0725774738602423, -0.07918851612219979, -0.013385302265262987, 0.05184105275731596, -0.041902624070313955, -0.12849890174652462, 0.0566626896277046, -0.011972178305804002, -0.009273609439240906, 0.010708241812210412 } };
    static const double coefficients12[1][15] = { { 0.2514157444218836, -0.35190873550605756, -0.20317460317460323, -0.13910414158861362, -0.10774960475223579, -0.06220926330877909, 0.19005243869327954, -0.026770604530525925, 0.12441852661755824, 0.15563831797545175, 0.0, 0.16998806888311374, 0.08380524814062784, -0.0278208283177227, -0.053541209061051954 } };
    static const double coefficients13[1][15] = { { 0.2514157444218834, 0.35190873550605767, -0.20317460317460323, -0.13910414158861364, 0.10774960475223579, -0.06220926330877917, -0.1900524386932796, -0.026770604530525943, -0.12441852661755828, 0.15563831797545175, 0.0, -0.16998806888311377, 0.08380524814062784, 0.02782082831772275, -0.05354120906105191 } };
    static const double coefficients14[1][15] = { { 0.2514157444218833, 0.0, 0.40634920634920646, 0.0, 0.0, -0.18662778992633744, 0.0, -0.18739423171368177, 0.0, -0.2035270311986677, 0.0, 0.0, -0.16761049628125563, 0.0, 0.10708241812210391 } };
    const std::size_t reference_offset[15] = {};
    const std::size_t num_components[15] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[4][16][4] =
        { { { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 },
            { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 0, 0, 1 },
            { 0, 0, 1, 0 },
            { 0, 0, 1, 1 },
            { 0, 1, 0, 0 },
            { 0, 1, 0, 1 },
            { 0, 1, 1, 0 },
            { 0, 1, 1, 1 },
            { 1, 0, 0, 0 },
            { 1, 0, 0, 1 },
            { 1, 0, 1, 0 },
            { 1, 0, 1, 1 },
            { 1, 1, 0, 0 },
            { 1, 1, 0, 1 },
            { 1, 1, 1, 0 },
            { 1, 1, 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues4[15] = {};
        basisvalues4[0] = 1.0;
        const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues4[1] = tmp1_4;
        const double tmp2_4 = (1.0 - Y[1]) / 2.0;
        const double tmp3_4 = tmp2_4 * tmp2_4;
        basisvalues4[3] = 1.5 * tmp1_4 * basisvalues4[1] - 0.5 * tmp3_4 * basisvalues4[0];
        basisvalues4[6] = 1.6666666666666667 * tmp1_4 * basisvalues4[3] - 0.6666666666666666 * tmp3_4 * basisvalues4[1];
        basisvalues4[10] = 1.75 * tmp1_4 * basisvalues4[6] - 0.75 * tmp3_4 * basisvalues4[3];
        basisvalues4[2] = (0.5 + 1.5 * Y[1]) * basisvalues4[0];
        basisvalues4[4] = (1.5 + 2.5 * Y[1]) * basisvalues4[1];
        basisvalues4[7] = (2.5 + 3.5 * Y[1]) * basisvalues4[3];
        basisvalues4[11] = (3.5 + 4.5 * Y[1]) * basisvalues4[6];
        basisvalues4[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues4[2] - 0.5555555555555556 * basisvalues4[0];
        basisvalues4[9] = (0.05 + 1.75 * Y[1]) * basisvalues4[5] - 0.7 * basisvalues4[2];
        basisvalues4[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues4[9] - 0.7714285714285715 * basisvalues4[5];
        basisvalues4[8] = (0.54 + 2.1 * Y[1]) * basisvalues4[4] - 0.56 * basisvalues4[1];
        basisvalues4[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues4[8] - 0.7142857142857143 * basisvalues4[4];
        basisvalues4[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues4[7] - 0.5510204081632653 * basisvalues4[3];
        basisvalues4[0] *= std::sqrt(0.5);
        basisvalues4[2] *= std::sqrt(1.0);
        basisvalues4[5] *= std::sqrt(1.5);
        basisvalues4[9] *= std::sqrt(2.0);
        basisvalues4[14] *= std::sqrt(2.5);
        basisvalues4[1] *= std::sqrt(3.0);
        basisvalues4[4] *= std::sqrt(4.5);
        basisvalues4[8] *= std::sqrt(6.0);
        basisvalues4[13] *= std::sqrt(7.5);
        basisvalues4[3] *= std::sqrt(7.5);
        basisvalues4[7] *= std::sqrt(10.0);
        basisvalues4[12] *= std::sqrt(12.5);
        basisvalues4[6] *= std::sqrt(14.0);
        basisvalues4[11] *= std::sqrt(17.5);
        basisvalues4[10] *= std::sqrt(22.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 15; ++i)
        {
            double derivatives[16] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients10[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients11[0][s] * aux[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[15 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[4][16][4] =
        { { { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 },
            { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 0, 0, 1 },
            { 0, 0, 1, 0 },
            { 0, 0, 1, 1 },
            { 0, 1, 0, 0 },
            { 0, 1, 0, 1 },
            { 0, 1, 1, 0 },
            { 0, 1, 1, 1 },
            { 1, 0, 0, 0 },
            { 1, 0, 0, 1 },
            { 1, 0, 1, 0 },
            { 1, 0, 1, 1 },
            { 1, 1, 0, 0 },
            { 1, 1, 0, 1 },
            { 1, 1, 1, 0 },
            { 1, 1, 1, 1 } } };
    std::fill_n(values, num_points * 15 * num_derivatives, 0.0);
    const std::size_t reference_offsets[15] = {};
    const std::size_t physical_offsets[15] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[16][16];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 15; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[15 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[15 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[15];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[15];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 15; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 4)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[4][16][4] =
        { { { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 },
            { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 0, 0, 1 },
            { 0, 0, 1, 0 },
            { 0, 0, 1, 1 },
            { 0, 1, 0, 0 },
            { 0, 1, 0, 1 },
            { 0, 1, 1, 0 },
            { 0, 1, 1, 1 },
            { 1, 0, 0, 0 },
            { 1, 0, 0, 1 },
            { 1, 0, 1, 0 },
            { 1, 0, 1, 1 },
            { 1, 1, 0, 0 },
            { 1, 1, 0, 1 },
            { 1, 1, 1, 0 },
            { 1, 1, 1, 1 } } };
    // Declare transformation matrix
    double transform[16][16] =
        { { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.0, -0.04123930494211611, -0.023809523809523794, 0.0289800294976278, 0.02244783432338244, 0.012960263189328946, -0.03959425806109994, -0.03346325566315745, -0.02592052637865798, -0.01496522288225498, 0.03212472543663117, 0.028331344813852282, 0.023944356611607962, 0.01854721887848183, 0.010708241812210409 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.0, 0.04123930494211617, -0.023809523809523832, 0.02898002949762785, -0.02244783432338247, 0.012960263189328969, 0.03959425806109991, -0.03346325566315744, 0.025920526378657945, -0.014965222882254959, 0.03212472543663116, -0.028331344813852296, 0.023944356611607955, -0.018547218878481802, 0.010708241812210386 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.0, 0.0, 0.04761904761904756, 0.0, 0.0, 0.03888078956798697, 0.0, 0.0, 0.0, 0.05986089152901992, 0.0, 0.0, 0.0, 0.0, 0.053541209061051906 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.1257078722109417, 0.1319657758147716, -0.025396825396825362, 0.13910414158861362, -0.07183306983482383, 0.031104631654389585, 0.06335081289775982, 0.026770604530525925, -0.06220926330877914, 0.047888713223215904, 0.0, 0.056662689627704536, -0.08380524814062786, 0.08346248495316816, -0.05354120906105194 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { -0.03142696805273546, 0.010997147984564326, 0.006349206349206258, 0.0, 0.18856180831641273, -0.16329931618554516, 0.0, 0.09369711585684087, 0.0, -0.04190262407031389, 0.0, 0.0, 0.08380524814062784, -0.13910414158861362, 0.10708241812210381 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.12570787221094165, 0.04398859193825734, 0.12698412698412695, 0.0, 0.035916534917411994, 0.15552315827194782, 0.0, 0.0, 0.10368210551463188, -0.011972178305803988, 0.0, 0.0, 0.0, 0.09273609439240912, -0.10708241812210383 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.12570787221094193, -0.13196577581477165, -0.02539682539682538, 0.13910414158861362, 0.07183306983482386, 0.03110463165438953, -0.06335081289775985, 0.026770604530525936, 0.06220926330877919, 0.04788871322321592, 0.0, -0.05666268962770456, -0.08380524814062781, -0.08346248495316815, -0.053541209061051906 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { -0.03142696805273531, -0.010997147984564293, 0.0063492063492062096, 0.0, -0.18856180831641264, -0.16329931618554508, 0.0, 0.09369711585684087, 0.0, -0.041902624070313824, 0.0, 0.0, 0.08380524814062784, 0.13910414158861353, 0.10708241812210373 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.12570787221094196, -0.043988591938257195, 0.12698412698412712, 0.0, -0.03591653491741193, 0.15552315827194776, 0.0, 0.0, -0.10368210551463188, -0.01197217830580402, 0.0, 0.0, 0.0, -0.09273609439240908, -0.10708241812210381 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.1257078722109418, -0.08797718387651439, -0.10158730158730163, 0.09273609439240911, 0.10774960475223583, 0.07257747386024228, 0.07918851612219983, -0.013385302265262976, -0.05184105275731594, -0.041902624070313935, -0.12849890174652465, -0.05666268962770457, -0.01197217830580397, 0.00927360943924089, 0.01070824181221041 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { -0.03142696805273516, 0.0, -0.0126984126984128, -0.24343224778007388, 0.0, 0.05443310539518176, 0.0, 0.09369711585684087, 0.0, -0.04190262407031391, 0.19274835261978696, 0.0, -0.02394435661160795, 0.0, 0.01070824181221036 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.1257078722109417, 0.08797718387651442, -0.1015873015873015, 0.09273609439240912, -0.1077496047522358, 0.0725774738602423, -0.07918851612219979, -0.013385302265262987, 0.05184105275731596, -0.041902624070313955, -0.12849890174652462, 0.0566626896277046, -0.011972178305804002, -0.009273609439240906, 0.010708241812210412 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 12:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.2514157444218836, -0.35190873550605756, -0.20317460317460323, -0.13910414158861362, -0.10774960475223579, -0.06220926330877909, 0.19005243869327954, -0.026770604530525925, 0.12441852661755824, 0.15563831797545175, 0.0, 0.16998806888311374, 0.08380524814062784, -0.0278208283177227, -0.053541209061051954 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 13:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.2514157444218834, 0.35190873550605767, -0.20317460317460323, -0.13910414158861364, 0.10774960475223579, -0.06220926330877917, -0.1900524386932796, -0.026770604530525943, -0.12441852661755828, 0.15563831797545175, 0.0, -0.16998806888311377, 0.08380524814062784, 0.02782082831772275, -0.05354120906105191 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 14:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.2514157444218833, 0.0, 0.40634920634920646, 0.0, 0.0, -0.18662778992633744, 0.0, -0.18739423171368177, 0.0, -0.2035270311986677, 0.0, 0.0, -0.16761049628125563, 0.0, 0.10708241812210391 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 15, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 4)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[16] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 15; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.75 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
            y[1] = 0.75 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.25 * coordinate_dofs[2] + 0.75 * coordinate_dofs[4];
            y[1] = 0.25 * coordinate_dofs[3] + 0.75 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[4];
            y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[4];
            y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2];
            y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 10:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 11:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[2];
            y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 12:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 13:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
            y[1] = 0.25 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 14:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.75 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
    y[1] = 0.75 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.25 * coordinate_dofs[2] + 0.75 * coordinate_dofs[4];
    y[1] = 0.25 * coordinate_dofs[3] + 0.75 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[4];
    y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[4];
    y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2];
    y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[2];
    y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
    y[1] = 0.25 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.75 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.75 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.25 * coordinate_dofs[2] + 0.75 * coordinate_dofs[4];
    dof_coordinates[2 * 5 + 1] = 0.25 * coordinate_dofs[3] + 0.75 * coordinate_dofs[5];
    dof_coordinates[2 * 6] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[4];
    dof_coordinates[2 * 6 + 1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[5];
    dof_coordinates[2 * 7] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 7 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 8] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[4];
    dof_coordinates[2 * 8 + 1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[5];
    dof_coordinates[2 * 9] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2];
    dof_coordinates[2 * 9 + 1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3];
    dof_coordinates[2 * 10] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 10 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 11] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[2];
    dof_coordinates[2 * 11 + 1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[3];
    dof_coordinates[2 * 12] = 0.5 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
    dof_coordinates[2 * 12 + 1] = 0.5 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
    dof_coordinates[2 * 13] = 0.25 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
    dof_coordinates[2 * 13 + 1] = 0.25 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
    dof_coordinates[2 * 14] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 14 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[30] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.75, 0.25, 0.5, 0.5, 0.25, 0.75, 0.0, 0.25, 0.0, 0.5, 0.0, 0.75, 0.25, 0.0, 0.5, 0.0, 0.75, 0.0, 0.25, 0.25, 0.5, 0.25, 0.25, 0.5 };
    std::copy_n(dof_X, 30, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new erroripdg2_finite_element_3();
  }

};


class erroripdg2_dofmap_0: public ufc::dofmap
{
public:

  erroripdg2_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~erroripdg2_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 3;
  }

  std::size_t num_element_dofs() const final override
  {
    return 3;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 2;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 2, 3 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new erroripdg2_dofmap_0();
  }

};


class erroripdg2_dofmap_1: public ufc::dofmap
{
public:

  erroripdg2_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~erroripdg2_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 2 * num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 6;
  }

  std::size_t num_element_dofs() const final override
  {
    return 6;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 4;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 4, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[0][0];
    dofs[4] = offset + entity_indices[0][1];
    dofs[5] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 5;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 5;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new erroripdg2_dofmap_0();
    case 1:
        return new erroripdg2_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new erroripdg2_dofmap_1();
  }

};


class erroripdg2_dofmap_2: public ufc::dofmap
{
public:

  erroripdg2_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~erroripdg2_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', triangle, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = {};
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 1;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new erroripdg2_dofmap_2();
  }

};


class erroripdg2_dofmap_3: public ufc::dofmap
{
public:

  erroripdg2_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~erroripdg2_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', triangle, 4)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { false, false, true };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 15 * num_global_entities[2];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 15;
  }

  std::size_t num_element_dofs() const final override
  {
    return 15;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 15 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 15 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 15 * entity_indices[2][0];
    dofs[1] = 15 * entity_indices[2][0] + 1;
    dofs[2] = 15 * entity_indices[2][0] + 2;
    dofs[3] = 15 * entity_indices[2][0] + 3;
    dofs[4] = 15 * entity_indices[2][0] + 4;
    dofs[5] = 15 * entity_indices[2][0] + 5;
    dofs[6] = 15 * entity_indices[2][0] + 6;
    dofs[7] = 15 * entity_indices[2][0] + 7;
    dofs[8] = 15 * entity_indices[2][0] + 8;
    dofs[9] = 15 * entity_indices[2][0] + 9;
    dofs[10] = 15 * entity_indices[2][0] + 10;
    dofs[11] = 15 * entity_indices[2][0] + 11;
    dofs[12] = 15 * entity_indices[2][0] + 12;
    dofs[13] = 15 * entity_indices[2][0] + 13;
    dofs[14] = 15 * entity_indices[2][0] + 14;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new erroripdg2_dofmap_3();
  }

};


class erroripdg2_coordinate_mapping_1: public ufc::coordinate_mapping
{
public:

  erroripdg2_coordinate_mapping_1() : ufc::coordinate_mapping()
  {
    // Do nothing
  }

  ~erroripdg2_coordinate_mapping_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::coordinate_mapping * create() const final override
  {
    return new erroripdg2_coordinate_mapping_1();
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new erroripdg2_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new erroripdg2_dofmap_1();
  }

  void compute_physical_coordinates(
      double * x, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    erroripdg2_finite_element_0 xelement;
    double phi[3];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[2 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t d = 0; d < 3; ++d)
                x[2 * ip + i] += coordinate_dofs[2 * d + i] * phi[d];
    }
  }

  void compute_reference_coordinates(
      double * X, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double J[4];
    double detJ[1];
    double K[4];
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_reference_geometry(
      double * X, double * J, double * detJ, double * K, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_jacobians(
      double * J, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    erroripdg2_finite_element_0 xelement;
    double dphi[6];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[2 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t j = 0; j < 2; ++j)
                for (std::size_t d = 0; d < 3; ++d)
                    J[2 * 2 * ip + 2 * i + j] += coordinate_dofs[2 * d + i] * dphi[2 * d + j];
    }
  }

  void compute_jacobian_determinants(
      double * detJ, std::size_t num_points,
      const double * J,
      int cell_orientation) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[2 * 2 * ip] * J[2 * 2 * ip + 2 + 1] - J[2 * 2 * ip + 1] * J[2 * 2 * ip + 2];
  }

  void compute_jacobian_inverses(
      double * K, std::size_t num_points,
      const double * J, const double * detJ) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[2 * 2 * ip] = J[2 * 2 * ip + 2 + 1] / detJ[ip];
        K[2 * 2 * ip + 1] = -J[2 * 2 * ip + 1] / detJ[ip];
        K[2 * 2 * ip + 2] = -J[2 * 2 * ip + 2] / detJ[ip];
        K[2 * 2 * ip + 2 + 1] = J[2 * 2 * ip] / detJ[ip];
    }
  }

  void compute_geometry(
      double * x, double * J, double * detJ, double * K, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
  }

  void compute_midpoint_geometry(
      double * x, double * J,
      const double * coordinate_dofs) const final override
  {
    const double phi_Xm[3] = { 0.33333333333333337, 0.33333333333333337, 0.3333333333333333 };
    const double dphi_Xm[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t d = 0; d < 3; ++d)
            x[i] += coordinate_dofs[2 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t d = 0; d < 3; ++d)
                J[2 * i + j] += coordinate_dofs[2 * d + i] * dphi_Xm[j][d];
  }

};


class erroripdg2_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  erroripdg2_cell_integral_0_otherwise() : ufc::cell_integral()
  {

  }

  ~erroripdg2_cell_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 8
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 8
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           8
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_Q25[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q25[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q25[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q25[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q25[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q25[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q25[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q25[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q25[0][0][1];
    alignas(32) double sp[4];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = std::abs(sp[2]);
    A[0] = 0.002557319223985889 * sp[3];
    A[1] = -0.0002380952380952383 * sp[3];
    A[2] = -0.000238095238095237 * sp[3];
    A[3] = -0.0009876543209876576 * sp[3];
    A[4] = -0.0001058201058201051 * sp[3];
    A[5] = -0.0009876543209876578 * sp[3];
    A[6] = 0.001410934744268067 * sp[3];
    A[7] = -0.00070546737213403 * sp[3];
    A[8] = 0.0;
    A[9] = 0.001410934744268069 * sp[3];
    A[10] = -0.0007054673721340332 * sp[3];
    A[11] = 0.0;
    A[12] = 0.00141093474426807 * sp[3];
    A[13] = -0.001410934744268076 * sp[3];
    A[14] = -0.001410934744268077 * sp[3];
    A[15] = -0.0002380952380952383 * sp[3];
    A[16] = 0.002557319223985889 * sp[3];
    A[17] = -0.0002380952380952376 * sp[3];
    A[18] = 0.00141093474426807 * sp[3];
    A[19] = -0.0007054673721340332 * sp[3];
    A[20] = 0.0;
    A[21] = -0.0009876543209876604 * sp[3];
    A[22] = -0.0001058201058201035 * sp[3];
    A[23] = -0.0009876543209876595 * sp[3];
    A[24] = 0.0;
    A[25] = -0.000705467372134037 * sp[3];
    A[26] = 0.001410934744268071 * sp[3];
    A[27] = -0.001410934744268087 * sp[3];
    A[28] = 0.001410934744268076 * sp[3];
    A[29] = -0.001410934744268085 * sp[3];
    A[30] = -0.000238095238095237 * sp[3];
    A[31] = -0.0002380952380952376 * sp[3];
    A[32] = 0.002557319223985887 * sp[3];
    A[33] = 0.0;
    A[34] = -0.0007054673721340393 * sp[3];
    A[35] = 0.001410934744268071 * sp[3];
    A[36] = 0.0;
    A[37] = -0.000705467372134038 * sp[3];
    A[38] = 0.001410934744268074 * sp[3];
    A[39] = -0.000987654320987652 * sp[3];
    A[40] = -0.000105820105820106 * sp[3];
    A[41] = -0.0009876543209876513 * sp[3];
    A[42] = -0.001410934744268069 * sp[3];
    A[43] = -0.001410934744268077 * sp[3];
    A[44] = 0.001410934744268064 * sp[3];
    A[45] = -0.0009876543209876576 * sp[3];
    A[46] = 0.00141093474426807 * sp[3];
    A[47] = 0.0;
    A[48] = 0.02257495590828922 * sp[3];
    A[49] = -0.01128747795414461 * sp[3];
    A[50] = 0.006772486772486767 * sp[3];
    A[51] = 0.002257495590828926 * sp[3];
    A[52] = 0.0005643738977072401 * sp[3];
    A[53] = 0.004514991181657844 * sp[3];
    A[54] = 0.004514991181657851 * sp[3];
    A[55] = -0.008465608465608459 * sp[3];
    A[56] = 0.01128747795414461 * sp[3];
    A[57] = -0.002257495590828934 * sp[3];
    A[58] = 0.01128747795414463 * sp[3];
    A[59] = 0.002257495590828913 * sp[3];
    A[60] = -0.0001058201058201051 * sp[3];
    A[61] = -0.0007054673721340332 * sp[3];
    A[62] = -0.0007054673721340393 * sp[3];
    A[63] = -0.01128747795414461 * sp[3];
    A[64] = 0.02793650793650791 * sp[3];
    A[65] = -0.0112874779541446 * sp[3];
    A[66] = 0.0005643738977072389 * sp[3];
    A[67] = 0.0004232804232803996 * sp[3];
    A[68] = -0.008465608465608454 * sp[3];
    A[69] = 0.0005643738977072429 * sp[3];
    A[70] = 0.0004232804232804184 * sp[3];
    A[71] = -0.008465608465608444 * sp[3];
    A[72] = -0.006772486772486767 * sp[3];
    A[73] = 0.003386243386243397 * sp[3];
    A[74] = 0.003386243386243386 * sp[3];
    A[75] = -0.0009876543209876578 * sp[3];
    A[76] = 0.0;
    A[77] = 0.001410934744268071 * sp[3];
    A[78] = 0.006772486772486767 * sp[3];
    A[79] = -0.0112874779541446 * sp[3];
    A[80] = 0.02257495590828921 * sp[3];
    A[81] = 0.004514991181657842 * sp[3];
    A[82] = -0.008465608465608452 * sp[3];
    A[83] = 0.01128747795414461 * sp[3];
    A[84] = 0.002257495590828912 * sp[3];
    A[85] = 0.0005643738977072367 * sp[3];
    A[86] = 0.004514991181657838 * sp[3];
    A[87] = -0.002257495590828947 * sp[3];
    A[88] = 0.00225749559082892 * sp[3];
    A[89] = 0.01128747795414461 * sp[3];
    A[90] = 0.001410934744268067 * sp[3];
    A[91] = -0.0009876543209876604 * sp[3];
    A[92] = 0.0;
    A[93] = 0.002257495590828926 * sp[3];
    A[94] = 0.0005643738977072389 * sp[3];
    A[95] = 0.004514991181657842 * sp[3];
    A[96] = 0.02257495590828923 * sp[3];
    A[97] = -0.0112874779541446 * sp[3];
    A[98] = 0.00677248677248677 * sp[3];
    A[99] = 0.01128747795414462 * sp[3];
    A[100] = -0.008465608465608464 * sp[3];
    A[101] = 0.00451499118165785 * sp[3];
    A[102] = 0.01128747795414465 * sp[3];
    A[103] = -0.002257495590828936 * sp[3];
    A[104] = 0.00225749559082893 * sp[3];
    A[105] = -0.00070546737213403 * sp[3];
    A[106] = -0.0001058201058201035 * sp[3];
    A[107] = -0.000705467372134038 * sp[3];
    A[108] = 0.0005643738977072401 * sp[3];
    A[109] = 0.0004232804232803996 * sp[3];
    A[110] = -0.008465608465608452 * sp[3];
    A[111] = -0.0112874779541446 * sp[3];
    A[112] = 0.02793650793650789 * sp[3];
    A[113] = -0.01128747795414459 * sp[3];
    A[114] = -0.008465608465608442 * sp[3];
    A[115] = 0.0004232804232804238 * sp[3];
    A[116] = 0.0005643738977072415 * sp[3];
    A[117] = 0.0033862433862434 * sp[3];
    A[118] = -0.006772486772486739 * sp[3];
    A[119] = 0.003386243386243369 * sp[3];
    A[120] = 0.0;
    A[121] = -0.0009876543209876595 * sp[3];
    A[122] = 0.001410934744268074 * sp[3];
    A[123] = 0.004514991181657844 * sp[3];
    A[124] = -0.008465608465608454 * sp[3];
    A[125] = 0.01128747795414461 * sp[3];
    A[126] = 0.00677248677248677 * sp[3];
    A[127] = -0.01128747795414459 * sp[3];
    A[128] = 0.02257495590828923 * sp[3];
    A[129] = 0.004514991181657839 * sp[3];
    A[130] = 0.0005643738977072323 * sp[3];
    A[131] = 0.00225749559082892 * sp[3];
    A[132] = 0.002257495590828924 * sp[3];
    A[133] = -0.002257495590828933 * sp[3];
    A[134] = 0.01128747795414465 * sp[3];
    A[135] = 0.001410934744268069 * sp[3];
    A[136] = 0.0;
    A[137] = -0.000987654320987652 * sp[3];
    A[138] = 0.004514991181657851 * sp[3];
    A[139] = 0.0005643738977072429 * sp[3];
    A[140] = 0.002257495590828912 * sp[3];
    A[141] = 0.01128747795414462 * sp[3];
    A[142] = -0.008465608465608442 * sp[3];
    A[143] = 0.004514991181657839 * sp[3];
    A[144] = 0.02257495590828923 * sp[3];
    A[145] = -0.01128747795414462 * sp[3];
    A[146] = 0.006772486772486766 * sp[3];
    A[147] = 0.01128747795414461 * sp[3];
    A[148] = 0.002257495590828914 * sp[3];
    A[149] = -0.00225749559082892 * sp[3];
    A[150] = -0.0007054673721340332 * sp[3];
    A[151] = -0.000705467372134037 * sp[3];
    A[152] = -0.000105820105820106 * sp[3];
    A[153] = -0.008465608465608459 * sp[3];
    A[154] = 0.0004232804232804184 * sp[3];
    A[155] = 0.0005643738977072367 * sp[3];
    A[156] = -0.008465608465608464 * sp[3];
    A[157] = 0.0004232804232804238 * sp[3];
    A[158] = 0.0005643738977072323 * sp[3];
    A[159] = -0.01128747795414462 * sp[3];
    A[160] = 0.02793650793650792 * sp[3];
    A[161] = -0.0112874779541446 * sp[3];
    A[162] = 0.003386243386243397 * sp[3];
    A[163] = 0.003386243386243412 * sp[3];
    A[164] = -0.00677248677248676 * sp[3];
    A[165] = 0.0;
    A[166] = 0.001410934744268071 * sp[3];
    A[167] = -0.0009876543209876513 * sp[3];
    A[168] = 0.01128747795414461 * sp[3];
    A[169] = -0.008465608465608444 * sp[3];
    A[170] = 0.004514991181657838 * sp[3];
    A[171] = 0.00451499118165785 * sp[3];
    A[172] = 0.0005643738977072415 * sp[3];
    A[173] = 0.00225749559082892 * sp[3];
    A[174] = 0.006772486772486766 * sp[3];
    A[175] = -0.0112874779541446 * sp[3];
    A[176] = 0.02257495590828919 * sp[3];
    A[177] = 0.002257495590828917 * sp[3];
    A[178] = 0.01128747795414458 * sp[3];
    A[179] = -0.002257495590828915 * sp[3];
    A[180] = 0.00141093474426807 * sp[3];
    A[181] = -0.001410934744268087 * sp[3];
    A[182] = -0.001410934744268069 * sp[3];
    A[183] = -0.002257495590828934 * sp[3];
    A[184] = -0.006772486772486767 * sp[3];
    A[185] = -0.002257495590828947 * sp[3];
    A[186] = 0.01128747795414465 * sp[3];
    A[187] = 0.0033862433862434 * sp[3];
    A[188] = 0.002257495590828924 * sp[3];
    A[189] = 0.01128747795414461 * sp[3];
    A[190] = 0.003386243386243397 * sp[3];
    A[191] = 0.002257495590828917 * sp[3];
    A[192] = 0.09481481481481484 * sp[3];
    A[193] = -0.01354497354497356 * sp[3];
    A[194] = -0.01354497354497358 * sp[3];
    A[195] = -0.001410934744268076 * sp[3];
    A[196] = 0.001410934744268076 * sp[3];
    A[197] = -0.001410934744268077 * sp[3];
    A[198] = 0.01128747795414463 * sp[3];
    A[199] = 0.003386243386243397 * sp[3];
    A[200] = 0.00225749559082892 * sp[3];
    A[201] = -0.002257495590828936 * sp[3];
    A[202] = -0.006772486772486739 * sp[3];
    A[203] = -0.002257495590828933 * sp[3];
    A[204] = 0.002257495590828914 * sp[3];
    A[205] = 0.003386243386243412 * sp[3];
    A[206] = 0.01128747795414458 * sp[3];
    A[207] = -0.01354497354497356 * sp[3];
    A[208] = 0.09481481481481487 * sp[3];
    A[209] = -0.01354497354497356 * sp[3];
    A[210] = -0.001410934744268077 * sp[3];
    A[211] = -0.001410934744268085 * sp[3];
    A[212] = 0.001410934744268064 * sp[3];
    A[213] = 0.002257495590828913 * sp[3];
    A[214] = 0.003386243386243386 * sp[3];
    A[215] = 0.01128747795414461 * sp[3];
    A[216] = 0.00225749559082893 * sp[3];
    A[217] = 0.003386243386243369 * sp[3];
    A[218] = 0.01128747795414465 * sp[3];
    A[219] = -0.00225749559082892 * sp[3];
    A[220] = -0.00677248677248676 * sp[3];
    A[221] = -0.002257495590828915 * sp[3];
    A[222] = -0.01354497354497358 * sp[3];
    A[223] = -0.01354497354497356 * sp[3];
    A[224] = 0.09481481481481484 * sp[3];
  }

};


class erroripdg2_exterior_facet_integral_1_otherwise: public ufc::exterior_facet_integral
{
public:

  erroripdg2_exterior_facet_integral_1_otherwise() : ufc::exterior_facet_integral()
  {

  }

  ~erroripdg2_exterior_facet_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 12
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 12
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           12
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights7[7] = { 0.06474248308443491, 0.1398526957446383, 0.1909150252525594, 0.2089795918367347, 0.1909150252525595, 0.1398526957446383, 0.06474248308443506 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE11_C0_D01_F_Q7[3][7][14] =
        { { { 1.0, -0.6571684215979529, 14.29719808066671, -8.997981868570923, 3.691285542835489, -0.1357122337526235, -0.09142415697001782, -0.1156951876793491, -5.197621099580689, 11.29787079114308, -14.29719808066669, 0.7935533658269562, -2.299888922572145, 0.7127821909181784 },
            { 1.0, 0.1858567064774843, 8.551002569451155, 0.2929756230329523, -0.6965015656282678, -0.6892501717349231, -0.2497131167305851, -0.2468934180119305, -4.644083161598374, 8.648661110462136, -8.551002569451141, 3.601052006268403, -8.94163673349507, 1.739532720958182 },
            { 1.0, 0.239554601470079, 2.75645267921309, 7.012378129912387, -1.675052077262232, -1.584412929660249, 0.2237702393217874, 0.1210880888684184, -3.748920403673042, 5.093912055850539, -2.756452679213075, 6.682317704827592, -12.10629018576292, -1.258345223892354 },
            { 1.0, -0.3333333333333341, 0.0, 5.999999999999985, 2.66666666666667, -2.666666666666651, 2.0, 0.0, -2.666666666666658, 1.999999999999994, 0.0, 7.999999999999948, -7.999999999999991, -7.999999999999983 },
            { 1.0, 0.4114610270355913, -0.1210880888683961, 1.034574984570569, 7.008385410595575, -3.748920403673046, 5.093912055850544, -2.756452679213073, -1.584412929660273, 0.2237702393217843, 0.1210880888684169, 6.682317704827646, -1.258345223892377, -12.10629018576295 },
            { 1.0, 3.546424620587393, 0.2468934180119602, -1.48981960422763, 6.029834898961623, -4.644083161598375, 8.648661110462129, -8.551002569451136, -0.6892501717349532, -0.249713116730592, -0.2468934180119336, 3.601052006268472, 1.73953272095819, -8.941636733495143 },
            { 1.0, 7.19694838910431, 0.1156951876793926, -0.621358033948253, 1.642047790497895, -5.197621099580689, 11.29787079114306, -14.29719808066667, -0.1357122337526566, -0.09142415697002804, -0.1156951876793569, 0.793553365827016, 0.7127821909182259, -2.299888922572244 } },
          { { -7.196948389104348, -0.6571684215979527, 0.0, 0.0, 0.0, 12.65515029016887, -8.376623834622675, 3.575590355156119, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -3.546424620587414, 0.1858567064774836, 0.0, 0.0, 0.0, 2.521167670489565, 1.782795227260572, -0.9433949836402036, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.4114610270355988, 0.2395546014700789, 0.0, 0.0, 0.0, -4.251932731382473, 5.977803145341812, -1.553963988393813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.3333333333333326, -0.3333333333333336, 0.0, 0.0, 0.0, -2.666666666666674, 0.0, 2.666666666666676, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.2395546014700797, 0.4114610270355911, 0.0, 0.0, 0.0, 1.553963988393809, -5.977803145341793, 4.251932731382487, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.1858567064774846, 3.546424620587391, 0.0, 0.0, 0.0, 0.9433949836401956, -1.782795227260551, -2.52116767048954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.6571684215979532, 7.19694838910431, 0.0, 0.0, 0.0, -3.575590355156123, 8.376623834622695, -12.65515029016883, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { -7.196948389104349, -1.0, 0.1156951876794108, 0.09142415696998363, 0.1357122337526606, 14.29719808066671, -11.29787079114303, 5.197621099580681, -1.642047790497813, 0.6213580339481817, -0.1156951876793628, 2.299888922572138, -0.7127821909182015, -0.7935533658269991 },
            { -3.546424620587411, -1.0, 0.2468934180119673, 0.2497131167305664, 0.6892501717349555, 8.551002569451157, -8.648661110462116, 4.644083161598384, -6.029834898961584, 1.489819604227595, -0.2468934180119378, 8.941636733495105, -1.739532720958182, -3.601052006268497 },
            { -0.4114610270355963, -1.0, -0.1210880888683934, -0.2237702393217988, 1.584412929660277, 2.756452679213083, -5.093912055850531, 3.748920403673061, -7.008385410595571, -1.034574984570587, 0.1210880888684111, 12.10629018576298, 1.258345223892374, -6.682317704827709 },
            { 0.333333333333335, -1.0, 0.0, -2.000000000000004, 2.666666666666665, 0.0, -1.999999999999981, 2.666666666666669, -2.666666666666686, -6.000000000000004, 0.0, 8.000000000000043, 7.999999999999996, -8.000000000000039 },
            { -0.2395546014700786, -1.0, 2.756452679213091, -5.093912055850552, 3.748920403673053, -0.1210880888684116, -0.2237702393217753, 1.584412929660283, 1.675052077262207, -7.012378129912407, -2.75645267921307, 1.258345223892417, 12.10629018576295, -6.682317704827701 },
            { -0.1858567064774898, -1.0, 8.551002569451153, -8.648661110462145, 4.644083161598379, 0.2468934180119495, 0.2497131167306046, 0.6892501717349631, 0.6965015656282474, -0.292975623032967, -8.551002569451132, -1.739532720958167, 8.941636733495104, -3.601052006268504 },
            { 0.6571684215979374, -1.0, 14.2971980806667, -11.29787079114308, 5.197621099580687, 0.1156951876793797, 0.09142415697005468, 0.1357122337526624, -3.691285542835489, 8.997981868570902, -14.29719808066668, -0.7127821909182268, 2.299888922572185, -0.7935533658270311 } } };
    alignas(32) static const double FE11_C0_D10_F_Q7[3][7][14] =
        { { { 1.0, 7.196948389104319, 1.642047790497841, -0.6213580339481972, 0.1156951876793695, -0.1357122337526754, -0.09142415697003137, -0.1156951876793693, -5.197621099580664, 11.297870791143, -14.29719808066666, 0.7935533658270516, -2.299888922572223, 0.7127821909182287 },
            { 1.0, 3.546424620587392, 6.029834898961593, -1.489819604227596, 0.2468934180119417, -0.689250171734947, -0.2497131167305924, -0.246893418011941, -4.644083161598347, 8.648661110462079, -8.551002569451112, 3.601052006268451, -8.9416367334951, 1.739532720958188 },
            { 1.0, 0.4114610270355905, 7.008385410595556, 1.034574984570589, -0.1210880888684108, -1.584412929660246, 0.2237702393217746, 0.1210880888684114, -3.748920403673021, 5.093912055850511, -2.756452679213064, 6.682317704827596, -12.10629018576291, -1.258345223892362 },
            { 1.0, -0.3333333333333338, 2.666666666666666, 5.999999999999996, 0.0, -2.666666666666638, 1.999999999999983, 0.0, -2.666666666666641, 1.99999999999998, 0.0, 7.999999999999942, -7.999999999999975, -7.999999999999975 },
            { 1.0, 0.2395546014700764, -1.675052077262221, 7.012378129912388, 2.7564526792131, -3.748920403673044, 5.093912055850553, -2.756452679213099, -1.584412929660262, 0.2237702393217799, 0.1210880888684111, 6.682317704827636, -1.258345223892371, -12.10629018576294 },
            { 1.0, 0.1858567064774799, -0.6965015656282532, 0.2929756230329499, 8.551002569451176, -4.644083161598385, 8.648661110462163, -8.551002569451175, -0.6892501717349445, -0.2497131167305984, -0.2468934180119355, 3.601052006268457, 1.739532720958184, -8.941636733495114 },
            { 1.0, -0.6571684215979532, 3.691285542835489, -8.997981868570903, 14.29719808066672, -5.197621099580694, 11.2978707911431, -14.29719808066672, -0.1357122337526477, -0.0914241569700437, -0.115695187679358, 0.7935533658269907, 0.7127821909182206, -2.299888922572203 } },
          { { -7.196948389104353, -1.0, 0.1357122337526566, 0.09142415697002571, 0.1156951876793689, -1.642047790497838, 0.6213580339481902, -0.1156951876793691, 14.29719808066678, -11.29787079114314, 5.197621099580719, 2.299888922572178, -0.7935533658270003, -0.7127821909182152 },
            { -3.546424620587413, -1.0, 0.6892501717349541, 0.2497131167305925, 0.2468934180119405, -6.029834898961599, 1.489819604227596, -0.2468934180119416, 8.551002569451191, -8.648661110462173, 4.644083161598398, 8.941636733495129, -3.601052006268486, -1.739532720958186 },
            { -0.4114610270355952, -1.0, 1.58441292966027, -0.2237702393217785, -0.1210880888684112, -7.008385410595577, -1.03457498457058, 0.1210880888684099, 2.756452679213094, -5.093912055850559, 3.74892040367306, 12.106290185763, -6.682317704827694, 1.258345223892362 },
            { 0.3333333333333385, -1.0, 2.66666666666666, -1.999999999999997, 0.0, -2.666666666666691, -5.999999999999986, 0.0, 0.0, -2.0, 2.666666666666668, 8.00000000000006, -8.00000000000003, 7.999999999999987 },
            { -0.2395546014700713, -1.0, 3.748920403673058, -5.093912055850567, 2.756452679213091, 1.675052077262203, -7.012378129912384, -2.756452679213089, -0.1210880888684195, -0.2237702393217861, 1.584412929660274, 1.258345223892416, -6.682317704827679, 12.10629018576295 },
            { -0.1858567064774764, -1.0, 4.64408316159839, -8.648661110462161, 8.551002569451168, 0.6965015656282469, -0.2929756230329472, -8.551002569451162, 0.2468934180119328, 0.2497131167305904, 0.6892501717349493, -1.73953272095817, -3.601052006268463, 8.9416367334951 },
            { 0.6571684215979583, -1.0, 5.197621099580694, -11.29787079114308, 14.29719808066672, -3.691285542835494, 8.997981868570921, -14.29719808066672, 0.1156951876793597, 0.09142415697002491, 0.1357122337526522, -0.7127821909182104, -0.7935533658269831, 2.299888922572148 } },
          { { -7.196948389104352, -0.6571684215979612, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.65515029016894, -8.376623834622775, 3.575590355156152, 0.0, 0.0, 0.0 },
            { -3.546424620587417, 0.1858567064774794, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.521167670489603, 1.782795227260526, -0.943394983640191, 0.0, 0.0, 0.0 },
            { -0.4114610270356014, 0.2395546014700793, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.25193273138246, 5.977803145341803, -1.553963988393821, 0.0, 0.0, 0.0 },
            { 0.3333333333333334, -0.3333333333333316, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.666666666666669, 0.0, 2.666666666666663, 0.0, 0.0, 0.0 },
            { -0.2395546014700734, 0.4114610270355937, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.553963988393813, -5.977803145341815, 4.251932731382482, 0.0, 0.0, 0.0 },
            { -0.1858567064774742, 3.546424620587395, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9433949836402067, -1.782795227260596, -2.521167670489532, 0.0, 0.0, 0.0 },
            { 0.6571684215979637, 7.196948389104317, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.575590355156101, 8.376623834622629, -12.65515029016881, 0.0, 0.0, 0.0 } } };
    alignas(32) static const double FE11_C0_F_Q7[3][7][12] =
        { { { 0.0, 0.8026230977948902, -0.02095685148576884, 0.3638071289871165, -0.2582245781591547, 0.1127512028629171, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.2581667235828759, -0.03831573474763156, 1.105083748031286, -0.5399210303600417, 0.214986293493512, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, -0.03244167309333449, 0.01371088227387546, 0.8188798621766097, 0.2849664799554532, -0.08511555131260401, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.01371088227387537, -0.03244167309333471, -0.0851155513126044, 0.2849664799554535, 0.81887986217661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, -0.0383157347476317, 0.2581667235828756, 0.2149862934935117, -0.5399210303600418, 1.105083748031286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, -0.02095685148576901, 0.8026230977948892, 0.1127512028629175, -0.258224578159156, 0.363807128987118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.8026230977948899, 0.0, -0.02095685148576884, 0.0, 0.0, 0.0, 0.3638071289871163, -0.2582245781591546, 0.1127512028629171, 0.0, 0.0, 0.0 },
            { 0.2581667235828757, 0.0, -0.03831573474763155, 0.0, 0.0, 0.0, 1.105083748031286, -0.5399210303600415, 0.2149862934935118, 0.0, 0.0, 0.0 },
            { -0.03244167309333452, 0.0, 0.01371088227387545, 0.0, 0.0, 0.0, 0.81887986217661, 0.284966479955453, -0.08511555131260408, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0137108822738755, 0.0, -0.03244167309333454, 0.0, 0.0, 0.0, -0.08511555131260437, 0.2849664799554536, 0.8188798621766101, 0.0, 0.0, 0.0 },
            { -0.03831573474763166, 0.0, 0.2581667235828757, 0.0, 0.0, 0.0, 0.2149862934935116, -0.5399210303600411, 1.105083748031286, 0.0, 0.0, 0.0 },
            { -0.02095685148576896, 0.0, 0.8026230977948892, 0.0, 0.0, 0.0, 0.1127512028629176, -0.2582245781591557, 0.3638071289871182, 0.0, 0.0, 0.0 } },
          { { 0.8026230977948902, -0.02095685148576887, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3638071289871163, -0.2582245781591544, 0.1127512028629169 },
            { 0.2581667235828756, -0.03831573474763168, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.105083748031286, -0.5399210303600416, 0.2149862934935116 },
            { -0.03244167309333462, 0.01371088227387541, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8188798621766104, 0.2849664799554534, -0.08511555131260426 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
            { 0.01371088227387549, -0.03244167309333462, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.08511555131260418, 0.2849664799554537, 0.8188798621766099 },
            { -0.03831573474763168, 0.2581667235828755, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2149862934935119, -0.5399210303600416, 1.105083748031286 },
            { -0.02095685148576898, 0.8026230977948891, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1127512028629177, -0.2582245781591558, 0.3638071289871185 } } };
    alignas(32) static const double FE3_C0_D01_F_Q7[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_F_Q7[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_F_Q7[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_F_Q7[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_F_Q7[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_F_Q7[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_F_Q7[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_F_Q7[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_F_Q7[0][0][1];
    alignas(32) double sp[30];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = triangle_reference_facet_normals[facet][1] * sp[3];
    sp[6] = triangle_reference_facet_normals[facet][0] * sp[4];
    sp[7] = sp[5] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet][0] * sp[9];
    sp[11] = -1 * J_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = std::pow(2 * w[3][0], 1 + w[2][0]);
    sp[20] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[21] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[22] = sp[20] + sp[21];
    sp[23] = sp[22] * sp[22];
    sp[24] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[25] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[26] = sp[24] + sp[25];
    sp[27] = sp[26] * sp[26];
    sp[28] = sp[23] + sp[27];
    sp[29] = std::sqrt(sp[28]);
    alignas(32) double BF0[12] = {};
    for (int iq = 0; iq < 7; ++iq)
    {
        // Quadrature loop body setup (num_points=7)
        // Unstructured varying computations for num_points=7
        const double w0_d1 = w[0][0] * FE11_C0_D01_F_Q7[facet][iq][0] + w[0][2] * FE11_C0_D01_F_Q7[facet][iq][1] + w[0][3] * FE11_C0_D01_F_Q7[facet][iq][2] + w[0][4] * FE11_C0_D01_F_Q7[facet][iq][3] + w[0][5] * FE11_C0_D01_F_Q7[facet][iq][4] + w[0][6] * FE11_C0_D01_F_Q7[facet][iq][5] + w[0][7] * FE11_C0_D01_F_Q7[facet][iq][6] + w[0][8] * FE11_C0_D01_F_Q7[facet][iq][7] + w[0][9] * FE11_C0_D01_F_Q7[facet][iq][8] + w[0][10] * FE11_C0_D01_F_Q7[facet][iq][9] + w[0][11] * FE11_C0_D01_F_Q7[facet][iq][10] + w[0][12] * FE11_C0_D01_F_Q7[facet][iq][11] + w[0][13] * FE11_C0_D01_F_Q7[facet][iq][12] + w[0][14] * FE11_C0_D01_F_Q7[facet][iq][13];
        const double w0_d0 = w[0][0] * FE11_C0_D10_F_Q7[facet][iq][0] + w[0][1] * FE11_C0_D10_F_Q7[facet][iq][1] + w[0][3] * FE11_C0_D10_F_Q7[facet][iq][2] + w[0][4] * FE11_C0_D10_F_Q7[facet][iq][3] + w[0][5] * FE11_C0_D10_F_Q7[facet][iq][4] + w[0][6] * FE11_C0_D10_F_Q7[facet][iq][5] + w[0][7] * FE11_C0_D10_F_Q7[facet][iq][6] + w[0][8] * FE11_C0_D10_F_Q7[facet][iq][7] + w[0][9] * FE11_C0_D10_F_Q7[facet][iq][8] + w[0][10] * FE11_C0_D10_F_Q7[facet][iq][9] + w[0][11] * FE11_C0_D10_F_Q7[facet][iq][10] + w[0][12] * FE11_C0_D10_F_Q7[facet][iq][11] + w[0][13] * FE11_C0_D10_F_Q7[facet][iq][12] + w[0][14] * FE11_C0_D10_F_Q7[facet][iq][13];
        const double w1_d1 = w[1][0] * FE11_C0_D01_F_Q7[facet][iq][0] + w[1][2] * FE11_C0_D01_F_Q7[facet][iq][1] + w[1][3] * FE11_C0_D01_F_Q7[facet][iq][2] + w[1][4] * FE11_C0_D01_F_Q7[facet][iq][3] + w[1][5] * FE11_C0_D01_F_Q7[facet][iq][4] + w[1][6] * FE11_C0_D01_F_Q7[facet][iq][5] + w[1][7] * FE11_C0_D01_F_Q7[facet][iq][6] + w[1][8] * FE11_C0_D01_F_Q7[facet][iq][7] + w[1][9] * FE11_C0_D01_F_Q7[facet][iq][8] + w[1][10] * FE11_C0_D01_F_Q7[facet][iq][9] + w[1][11] * FE11_C0_D01_F_Q7[facet][iq][10] + w[1][12] * FE11_C0_D01_F_Q7[facet][iq][11] + w[1][13] * FE11_C0_D01_F_Q7[facet][iq][12] + w[1][14] * FE11_C0_D01_F_Q7[facet][iq][13];
        const double w1_d0 = w[1][0] * FE11_C0_D10_F_Q7[facet][iq][0] + w[1][1] * FE11_C0_D10_F_Q7[facet][iq][1] + w[1][3] * FE11_C0_D10_F_Q7[facet][iq][2] + w[1][4] * FE11_C0_D10_F_Q7[facet][iq][3] + w[1][5] * FE11_C0_D10_F_Q7[facet][iq][4] + w[1][6] * FE11_C0_D10_F_Q7[facet][iq][5] + w[1][7] * FE11_C0_D10_F_Q7[facet][iq][6] + w[1][8] * FE11_C0_D10_F_Q7[facet][iq][7] + w[1][9] * FE11_C0_D10_F_Q7[facet][iq][8] + w[1][10] * FE11_C0_D10_F_Q7[facet][iq][9] + w[1][11] * FE11_C0_D10_F_Q7[facet][iq][10] + w[1][12] * FE11_C0_D10_F_Q7[facet][iq][11] + w[1][13] * FE11_C0_D10_F_Q7[facet][iq][12] + w[1][14] * FE11_C0_D10_F_Q7[facet][iq][13];
        alignas(32) double sv7[20];
        sv7[0] = w0_d1 * sp[3];
        sv7[1] = w0_d0 * sp[4];
        sv7[2] = sv7[0] + sv7[1];
        sv7[3] = w1_d1 * sp[3];
        sv7[4] = w1_d0 * sp[4];
        sv7[5] = sv7[3] + sv7[4];
        sv7[6] = sv7[2] + -1 * sv7[5];
        sv7[7] = sv7[6] * sp[17];
        sv7[8] = w0_d0 * sp[9];
        sv7[9] = w0_d1 * sp[11];
        sv7[10] = sv7[8] + sv7[9];
        sv7[11] = w1_d0 * sp[9];
        sv7[12] = w1_d1 * sp[11];
        sv7[13] = sv7[11] + sv7[12];
        sv7[14] = sv7[10] + -1 * sv7[13];
        sv7[15] = sv7[14] * sp[18];
        sv7[16] = sv7[7] + sv7[15];
        sv7[17] = sv7[16] * sv7[16];
        sv7[18] = sv7[17] * sp[19];
        sv7[19] = sv7[18] * sp[29];
        const double fw0 = sv7[19] * weights7[iq];
        for (int i = 0; i < 12; ++i)
            BF0[i] += fw0 * FE11_C0_F_Q7[facet][iq][i];
    }
    std::fill(A, A + 15, 0.0);
    for (int i = 0; i < 12; ++i)
        A[i] += BF0[i];
  }

};


class erroripdg2_interior_facet_integral_1_otherwise: public ufc::interior_facet_integral
{
public:

  erroripdg2_interior_facet_integral_1_otherwise() : ufc::interior_facet_integral()
  {

  }

  ~erroripdg2_interior_facet_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs_0,
                       const double * coordinate_dofs_1,
                       std::size_t facet_0,
                       std::size_t facet_1,
                       int cell_orientation_0,
                       int cell_orientation_1) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 12
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 12
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           12
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights7[7] = { 0.06474248308443491, 0.1398526957446383, 0.1909150252525594, 0.2089795918367347, 0.1909150252525595, 0.1398526957446383, 0.06474248308443506 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE19_C0_D01_F_Q7[3][7][14] =
        { { { 1.0, -0.6571684215979529, 14.29719808066671, -8.997981868570923, 3.691285542835489, -0.1357122337526235, -0.09142415697001782, -0.1156951876793491, -5.197621099580689, 11.29787079114308, -14.29719808066669, 0.7935533658269562, -2.299888922572145, 0.7127821909181784 },
            { 1.0, 0.1858567064774843, 8.551002569451155, 0.2929756230329523, -0.6965015656282678, -0.6892501717349231, -0.2497131167305851, -0.2468934180119305, -4.644083161598374, 8.648661110462136, -8.551002569451141, 3.601052006268403, -8.94163673349507, 1.739532720958182 },
            { 1.0, 0.239554601470079, 2.75645267921309, 7.012378129912387, -1.675052077262232, -1.584412929660249, 0.2237702393217874, 0.1210880888684184, -3.748920403673042, 5.093912055850539, -2.756452679213075, 6.682317704827592, -12.10629018576292, -1.258345223892354 },
            { 1.0, -0.3333333333333341, 0.0, 5.999999999999985, 2.66666666666667, -2.666666666666651, 2.0, 0.0, -2.666666666666658, 1.999999999999994, 0.0, 7.999999999999948, -7.999999999999991, -7.999999999999983 },
            { 1.0, 0.4114610270355913, -0.1210880888683961, 1.034574984570569, 7.008385410595575, -3.748920403673046, 5.093912055850544, -2.756452679213073, -1.584412929660273, 0.2237702393217843, 0.1210880888684169, 6.682317704827646, -1.258345223892377, -12.10629018576295 },
            { 1.0, 3.546424620587393, 0.2468934180119602, -1.48981960422763, 6.029834898961623, -4.644083161598375, 8.648661110462129, -8.551002569451136, -0.6892501717349532, -0.249713116730592, -0.2468934180119336, 3.601052006268472, 1.73953272095819, -8.941636733495143 },
            { 1.0, 7.19694838910431, 0.1156951876793926, -0.621358033948253, 1.642047790497895, -5.197621099580689, 11.29787079114306, -14.29719808066667, -0.1357122337526566, -0.09142415697002804, -0.1156951876793569, 0.793553365827016, 0.7127821909182259, -2.299888922572244 } },
          { { -7.196948389104348, -0.6571684215979527, 0.0, 0.0, 0.0, 12.65515029016887, -8.376623834622675, 3.575590355156119, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -3.546424620587414, 0.1858567064774836, 0.0, 0.0, 0.0, 2.521167670489565, 1.782795227260572, -0.9433949836402036, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.4114610270355988, 0.2395546014700789, 0.0, 0.0, 0.0, -4.251932731382473, 5.977803145341812, -1.553963988393813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.3333333333333326, -0.3333333333333336, 0.0, 0.0, 0.0, -2.666666666666674, 0.0, 2.666666666666676, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.2395546014700797, 0.4114610270355911, 0.0, 0.0, 0.0, 1.553963988393809, -5.977803145341793, 4.251932731382487, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.1858567064774846, 3.546424620587391, 0.0, 0.0, 0.0, 0.9433949836401956, -1.782795227260551, -2.52116767048954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.6571684215979532, 7.19694838910431, 0.0, 0.0, 0.0, -3.575590355156123, 8.376623834622695, -12.65515029016883, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { -7.196948389104349, -1.0, 0.1156951876794108, 0.09142415696998363, 0.1357122337526606, 14.29719808066671, -11.29787079114303, 5.197621099580681, -1.642047790497813, 0.6213580339481817, -0.1156951876793628, 2.299888922572138, -0.7127821909182015, -0.7935533658269991 },
            { -3.546424620587411, -1.0, 0.2468934180119673, 0.2497131167305664, 0.6892501717349555, 8.551002569451157, -8.648661110462116, 4.644083161598384, -6.029834898961584, 1.489819604227595, -0.2468934180119378, 8.941636733495105, -1.739532720958182, -3.601052006268497 },
            { -0.4114610270355963, -1.0, -0.1210880888683934, -0.2237702393217988, 1.584412929660277, 2.756452679213083, -5.093912055850531, 3.748920403673061, -7.008385410595571, -1.034574984570587, 0.1210880888684111, 12.10629018576298, 1.258345223892374, -6.682317704827709 },
            { 0.333333333333335, -1.0, 0.0, -2.000000000000004, 2.666666666666665, 0.0, -1.999999999999981, 2.666666666666669, -2.666666666666686, -6.000000000000004, 0.0, 8.000000000000043, 7.999999999999996, -8.000000000000039 },
            { -0.2395546014700786, -1.0, 2.756452679213091, -5.093912055850552, 3.748920403673053, -0.1210880888684116, -0.2237702393217753, 1.584412929660283, 1.675052077262207, -7.012378129912407, -2.75645267921307, 1.258345223892417, 12.10629018576295, -6.682317704827701 },
            { -0.1858567064774898, -1.0, 8.551002569451153, -8.648661110462145, 4.644083161598379, 0.2468934180119495, 0.2497131167306046, 0.6892501717349631, 0.6965015656282474, -0.292975623032967, -8.551002569451132, -1.739532720958167, 8.941636733495104, -3.601052006268504 },
            { 0.6571684215979374, -1.0, 14.2971980806667, -11.29787079114308, 5.197621099580687, 0.1156951876793797, 0.09142415697005468, 0.1357122337526624, -3.691285542835489, 8.997981868570902, -14.29719808066668, -0.7127821909182268, 2.299888922572185, -0.7935533658270311 } } };
    alignas(32) static const double FE19_C0_D10_F_Q7[3][7][14] =
        { { { 1.0, 7.196948389104319, 1.642047790497841, -0.6213580339481972, 0.1156951876793695, -0.1357122337526754, -0.09142415697003137, -0.1156951876793693, -5.197621099580664, 11.297870791143, -14.29719808066666, 0.7935533658270516, -2.299888922572223, 0.7127821909182287 },
            { 1.0, 3.546424620587392, 6.029834898961593, -1.489819604227596, 0.2468934180119417, -0.689250171734947, -0.2497131167305924, -0.246893418011941, -4.644083161598347, 8.648661110462079, -8.551002569451112, 3.601052006268451, -8.9416367334951, 1.739532720958188 },
            { 1.0, 0.4114610270355905, 7.008385410595556, 1.034574984570589, -0.1210880888684108, -1.584412929660246, 0.2237702393217746, 0.1210880888684114, -3.748920403673021, 5.093912055850511, -2.756452679213064, 6.682317704827596, -12.10629018576291, -1.258345223892362 },
            { 1.0, -0.3333333333333338, 2.666666666666666, 5.999999999999996, 0.0, -2.666666666666638, 1.999999999999983, 0.0, -2.666666666666641, 1.99999999999998, 0.0, 7.999999999999942, -7.999999999999975, -7.999999999999975 },
            { 1.0, 0.2395546014700764, -1.675052077262221, 7.012378129912388, 2.7564526792131, -3.748920403673044, 5.093912055850553, -2.756452679213099, -1.584412929660262, 0.2237702393217799, 0.1210880888684111, 6.682317704827636, -1.258345223892371, -12.10629018576294 },
            { 1.0, 0.1858567064774799, -0.6965015656282532, 0.2929756230329499, 8.551002569451176, -4.644083161598385, 8.648661110462163, -8.551002569451175, -0.6892501717349445, -0.2497131167305984, -0.2468934180119355, 3.601052006268457, 1.739532720958184, -8.941636733495114 },
            { 1.0, -0.6571684215979532, 3.691285542835489, -8.997981868570903, 14.29719808066672, -5.197621099580694, 11.2978707911431, -14.29719808066672, -0.1357122337526477, -0.0914241569700437, -0.115695187679358, 0.7935533658269907, 0.7127821909182206, -2.299888922572203 } },
          { { -7.196948389104353, -1.0, 0.1357122337526566, 0.09142415697002571, 0.1156951876793689, -1.642047790497838, 0.6213580339481902, -0.1156951876793691, 14.29719808066678, -11.29787079114314, 5.197621099580719, 2.299888922572178, -0.7935533658270003, -0.7127821909182152 },
            { -3.546424620587413, -1.0, 0.6892501717349541, 0.2497131167305925, 0.2468934180119405, -6.029834898961599, 1.489819604227596, -0.2468934180119416, 8.551002569451191, -8.648661110462173, 4.644083161598398, 8.941636733495129, -3.601052006268486, -1.739532720958186 },
            { -0.4114610270355952, -1.0, 1.58441292966027, -0.2237702393217785, -0.1210880888684112, -7.008385410595577, -1.03457498457058, 0.1210880888684099, 2.756452679213094, -5.093912055850559, 3.74892040367306, 12.106290185763, -6.682317704827694, 1.258345223892362 },
            { 0.3333333333333385, -1.0, 2.66666666666666, -1.999999999999997, 0.0, -2.666666666666691, -5.999999999999986, 0.0, 0.0, -2.0, 2.666666666666668, 8.00000000000006, -8.00000000000003, 7.999999999999987 },
            { -0.2395546014700713, -1.0, 3.748920403673058, -5.093912055850567, 2.756452679213091, 1.675052077262203, -7.012378129912384, -2.756452679213089, -0.1210880888684195, -0.2237702393217861, 1.584412929660274, 1.258345223892416, -6.682317704827679, 12.10629018576295 },
            { -0.1858567064774764, -1.0, 4.64408316159839, -8.648661110462161, 8.551002569451168, 0.6965015656282469, -0.2929756230329472, -8.551002569451162, 0.2468934180119328, 0.2497131167305904, 0.6892501717349493, -1.73953272095817, -3.601052006268463, 8.9416367334951 },
            { 0.6571684215979583, -1.0, 5.197621099580694, -11.29787079114308, 14.29719808066672, -3.691285542835494, 8.997981868570921, -14.29719808066672, 0.1156951876793597, 0.09142415697002491, 0.1357122337526522, -0.7127821909182104, -0.7935533658269831, 2.299888922572148 } },
          { { -7.196948389104352, -0.6571684215979612, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.65515029016894, -8.376623834622775, 3.575590355156152, 0.0, 0.0, 0.0 },
            { -3.546424620587417, 0.1858567064774794, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.521167670489603, 1.782795227260526, -0.943394983640191, 0.0, 0.0, 0.0 },
            { -0.4114610270356014, 0.2395546014700793, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.25193273138246, 5.977803145341803, -1.553963988393821, 0.0, 0.0, 0.0 },
            { 0.3333333333333334, -0.3333333333333316, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.666666666666669, 0.0, 2.666666666666663, 0.0, 0.0, 0.0 },
            { -0.2395546014700734, 0.4114610270355937, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.553963988393813, -5.977803145341815, 4.251932731382482, 0.0, 0.0, 0.0 },
            { -0.1858567064774742, 3.546424620587395, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9433949836402067, -1.782795227260596, -2.521167670489532, 0.0, 0.0, 0.0 },
            { 0.6571684215979637, 7.196948389104317, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.575590355156101, 8.376623834622629, -12.65515029016881, 0.0, 0.0, 0.0 } } };
    alignas(32) static const double FE19_C0_F_Q7[3][7][12] =
        { { { 0.0, 0.8026230977948902, -0.02095685148576884, 0.3638071289871165, -0.2582245781591547, 0.1127512028629171, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.2581667235828759, -0.03831573474763156, 1.105083748031286, -0.5399210303600417, 0.214986293493512, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, -0.03244167309333449, 0.01371088227387546, 0.8188798621766097, 0.2849664799554532, -0.08511555131260401, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.01371088227387537, -0.03244167309333471, -0.0851155513126044, 0.2849664799554535, 0.81887986217661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, -0.0383157347476317, 0.2581667235828756, 0.2149862934935117, -0.5399210303600418, 1.105083748031286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, -0.02095685148576901, 0.8026230977948892, 0.1127512028629175, -0.258224578159156, 0.363807128987118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.8026230977948899, 0.0, -0.02095685148576884, 0.0, 0.0, 0.0, 0.3638071289871163, -0.2582245781591546, 0.1127512028629171, 0.0, 0.0, 0.0 },
            { 0.2581667235828757, 0.0, -0.03831573474763155, 0.0, 0.0, 0.0, 1.105083748031286, -0.5399210303600415, 0.2149862934935118, 0.0, 0.0, 0.0 },
            { -0.03244167309333452, 0.0, 0.01371088227387545, 0.0, 0.0, 0.0, 0.81887986217661, 0.284966479955453, -0.08511555131260408, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0137108822738755, 0.0, -0.03244167309333454, 0.0, 0.0, 0.0, -0.08511555131260437, 0.2849664799554536, 0.8188798621766101, 0.0, 0.0, 0.0 },
            { -0.03831573474763166, 0.0, 0.2581667235828757, 0.0, 0.0, 0.0, 0.2149862934935116, -0.5399210303600411, 1.105083748031286, 0.0, 0.0, 0.0 },
            { -0.02095685148576896, 0.0, 0.8026230977948892, 0.0, 0.0, 0.0, 0.1127512028629176, -0.2582245781591557, 0.3638071289871182, 0.0, 0.0, 0.0 } },
          { { 0.8026230977948902, -0.02095685148576887, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3638071289871163, -0.2582245781591544, 0.1127512028629169 },
            { 0.2581667235828756, -0.03831573474763168, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.105083748031286, -0.5399210303600416, 0.2149862934935116 },
            { -0.03244167309333462, 0.01371088227387541, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8188798621766104, 0.2849664799554534, -0.08511555131260426 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
            { 0.01371088227387549, -0.03244167309333462, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.08511555131260418, 0.2849664799554537, 0.8188798621766099 },
            { -0.03831573474763168, 0.2581667235828755, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2149862934935119, -0.5399210303600416, 1.105083748031286 },
            { -0.02095685148576898, 0.8026230977948891, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1127512028629177, -0.2582245781591558, 0.3638071289871185 } } };
    alignas(32) static const double FE7_C0_D01_F_Q7[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_r0_c0 = coordinate_dofs_0[0] * FE7_C0_D01_F_Q7[0][0][0] + coordinate_dofs_0[2] * FE7_C0_D01_F_Q7[0][0][1];
    const double J_r0_c3 = coordinate_dofs_0[1] * FE7_C0_D01_F_Q7[0][0][0] + coordinate_dofs_0[5] * FE7_C0_D01_F_Q7[0][0][1];
    const double J_r0_c1 = coordinate_dofs_0[0] * FE7_C0_D01_F_Q7[0][0][0] + coordinate_dofs_0[4] * FE7_C0_D01_F_Q7[0][0][1];
    const double J_r0_c2 = coordinate_dofs_0[1] * FE7_C0_D01_F_Q7[0][0][0] + coordinate_dofs_0[3] * FE7_C0_D01_F_Q7[0][0][1];
    const double J_r1_c0 = coordinate_dofs_1[0] * FE7_C0_D01_F_Q7[0][0][0] + coordinate_dofs_1[2] * FE7_C0_D01_F_Q7[0][0][1];
    const double J_r1_c3 = coordinate_dofs_1[1] * FE7_C0_D01_F_Q7[0][0][0] + coordinate_dofs_1[5] * FE7_C0_D01_F_Q7[0][0][1];
    const double J_r1_c1 = coordinate_dofs_1[0] * FE7_C0_D01_F_Q7[0][0][0] + coordinate_dofs_1[4] * FE7_C0_D01_F_Q7[0][0][1];
    const double J_r1_c2 = coordinate_dofs_1[1] * FE7_C0_D01_F_Q7[0][0][0] + coordinate_dofs_1[3] * FE7_C0_D01_F_Q7[0][0][1];
    alignas(32) double sp[49];
    sp[0] = J_r0_c0 * J_r0_c3;
    sp[1] = J_r0_c1 * J_r0_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_r0_c0 / sp[2];
    sp[4] = -1 * J_r0_c1 / sp[2];
    sp[5] = triangle_reference_facet_normals[facet_0][1] * sp[3];
    sp[6] = triangle_reference_facet_normals[facet_0][0] * sp[4];
    sp[7] = sp[5] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_r0_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet_0][0] * sp[9];
    sp[11] = -1 * J_r0_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet_0][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = J_r1_c0 * J_r1_c3;
    sp[20] = J_r1_c1 * J_r1_c2;
    sp[21] = sp[19] + -1 * sp[20];
    sp[22] = J_r1_c0 / sp[21];
    sp[23] = -1 * J_r1_c1 / sp[21];
    sp[24] = triangle_reference_facet_normals[facet_1][1] * sp[22];
    sp[25] = triangle_reference_facet_normals[facet_1][0] * sp[23];
    sp[26] = sp[24] + sp[25];
    sp[27] = sp[26] * sp[26];
    sp[28] = J_r1_c3 / sp[21];
    sp[29] = triangle_reference_facet_normals[facet_1][0] * sp[28];
    sp[30] = -1 * J_r1_c2 / sp[21];
    sp[31] = triangle_reference_facet_normals[facet_1][1] * sp[30];
    sp[32] = sp[29] + sp[31];
    sp[33] = sp[32] * sp[32];
    sp[34] = sp[27] + sp[33];
    sp[35] = std::sqrt(sp[34]);
    sp[36] = sp[26] / sp[35];
    sp[37] = sp[32] / sp[35];
    sp[38] = std::pow(2 * w[3][0], 1 + w[2][0]);
    sp[39] = J_r0_c0 * triangle_reference_facet_jacobian[facet_0][0][0];
    sp[40] = J_r0_c1 * triangle_reference_facet_jacobian[facet_0][1][0];
    sp[41] = sp[39] + sp[40];
    sp[42] = sp[41] * sp[41];
    sp[43] = triangle_reference_facet_jacobian[facet_0][0][0] * J_r0_c2;
    sp[44] = triangle_reference_facet_jacobian[facet_0][1][0] * J_r0_c3;
    sp[45] = sp[43] + sp[44];
    sp[46] = sp[45] * sp[45];
    sp[47] = sp[42] + sp[46];
    sp[48] = std::sqrt(sp[47]);
    alignas(32) double BF0[12] = {};
    for (int iq = 0; iq < 7; ++iq)
    {
        // Quadrature loop body setup (num_points=7)
        // Unstructured varying computations for num_points=7
        const double w0_r0_d1 = w[0][0] * FE19_C0_D01_F_Q7[facet_0][iq][0] + w[0][2] * FE19_C0_D01_F_Q7[facet_0][iq][1] + w[0][3] * FE19_C0_D01_F_Q7[facet_0][iq][2] + w[0][4] * FE19_C0_D01_F_Q7[facet_0][iq][3] + w[0][5] * FE19_C0_D01_F_Q7[facet_0][iq][4] + w[0][6] * FE19_C0_D01_F_Q7[facet_0][iq][5] + w[0][7] * FE19_C0_D01_F_Q7[facet_0][iq][6] + w[0][8] * FE19_C0_D01_F_Q7[facet_0][iq][7] + w[0][9] * FE19_C0_D01_F_Q7[facet_0][iq][8] + w[0][10] * FE19_C0_D01_F_Q7[facet_0][iq][9] + w[0][11] * FE19_C0_D01_F_Q7[facet_0][iq][10] + w[0][12] * FE19_C0_D01_F_Q7[facet_0][iq][11] + w[0][13] * FE19_C0_D01_F_Q7[facet_0][iq][12] + w[0][14] * FE19_C0_D01_F_Q7[facet_0][iq][13];
        const double w0_r0_d0 = w[0][0] * FE19_C0_D10_F_Q7[facet_0][iq][0] + w[0][1] * FE19_C0_D10_F_Q7[facet_0][iq][1] + w[0][3] * FE19_C0_D10_F_Q7[facet_0][iq][2] + w[0][4] * FE19_C0_D10_F_Q7[facet_0][iq][3] + w[0][5] * FE19_C0_D10_F_Q7[facet_0][iq][4] + w[0][6] * FE19_C0_D10_F_Q7[facet_0][iq][5] + w[0][7] * FE19_C0_D10_F_Q7[facet_0][iq][6] + w[0][8] * FE19_C0_D10_F_Q7[facet_0][iq][7] + w[0][9] * FE19_C0_D10_F_Q7[facet_0][iq][8] + w[0][10] * FE19_C0_D10_F_Q7[facet_0][iq][9] + w[0][11] * FE19_C0_D10_F_Q7[facet_0][iq][10] + w[0][12] * FE19_C0_D10_F_Q7[facet_0][iq][11] + w[0][13] * FE19_C0_D10_F_Q7[facet_0][iq][12] + w[0][14] * FE19_C0_D10_F_Q7[facet_0][iq][13];
        const double w1_r0_d1 = w[1][0] * FE19_C0_D01_F_Q7[facet_0][iq][0] + w[1][2] * FE19_C0_D01_F_Q7[facet_0][iq][1] + w[1][3] * FE19_C0_D01_F_Q7[facet_0][iq][2] + w[1][4] * FE19_C0_D01_F_Q7[facet_0][iq][3] + w[1][5] * FE19_C0_D01_F_Q7[facet_0][iq][4] + w[1][6] * FE19_C0_D01_F_Q7[facet_0][iq][5] + w[1][7] * FE19_C0_D01_F_Q7[facet_0][iq][6] + w[1][8] * FE19_C0_D01_F_Q7[facet_0][iq][7] + w[1][9] * FE19_C0_D01_F_Q7[facet_0][iq][8] + w[1][10] * FE19_C0_D01_F_Q7[facet_0][iq][9] + w[1][11] * FE19_C0_D01_F_Q7[facet_0][iq][10] + w[1][12] * FE19_C0_D01_F_Q7[facet_0][iq][11] + w[1][13] * FE19_C0_D01_F_Q7[facet_0][iq][12] + w[1][14] * FE19_C0_D01_F_Q7[facet_0][iq][13];
        const double w1_r0_d0 = w[1][0] * FE19_C0_D10_F_Q7[facet_0][iq][0] + w[1][1] * FE19_C0_D10_F_Q7[facet_0][iq][1] + w[1][3] * FE19_C0_D10_F_Q7[facet_0][iq][2] + w[1][4] * FE19_C0_D10_F_Q7[facet_0][iq][3] + w[1][5] * FE19_C0_D10_F_Q7[facet_0][iq][4] + w[1][6] * FE19_C0_D10_F_Q7[facet_0][iq][5] + w[1][7] * FE19_C0_D10_F_Q7[facet_0][iq][6] + w[1][8] * FE19_C0_D10_F_Q7[facet_0][iq][7] + w[1][9] * FE19_C0_D10_F_Q7[facet_0][iq][8] + w[1][10] * FE19_C0_D10_F_Q7[facet_0][iq][9] + w[1][11] * FE19_C0_D10_F_Q7[facet_0][iq][10] + w[1][12] * FE19_C0_D10_F_Q7[facet_0][iq][11] + w[1][13] * FE19_C0_D10_F_Q7[facet_0][iq][12] + w[1][14] * FE19_C0_D10_F_Q7[facet_0][iq][13];
        const double w0_r1_d1 = w[0][15] * FE19_C0_D01_F_Q7[facet_1][iq][0] + w[0][17] * FE19_C0_D01_F_Q7[facet_1][iq][1] + w[0][18] * FE19_C0_D01_F_Q7[facet_1][iq][2] + w[0][19] * FE19_C0_D01_F_Q7[facet_1][iq][3] + w[0][20] * FE19_C0_D01_F_Q7[facet_1][iq][4] + w[0][21] * FE19_C0_D01_F_Q7[facet_1][iq][5] + w[0][22] * FE19_C0_D01_F_Q7[facet_1][iq][6] + w[0][23] * FE19_C0_D01_F_Q7[facet_1][iq][7] + w[0][24] * FE19_C0_D01_F_Q7[facet_1][iq][8] + w[0][25] * FE19_C0_D01_F_Q7[facet_1][iq][9] + w[0][26] * FE19_C0_D01_F_Q7[facet_1][iq][10] + w[0][27] * FE19_C0_D01_F_Q7[facet_1][iq][11] + w[0][28] * FE19_C0_D01_F_Q7[facet_1][iq][12] + w[0][29] * FE19_C0_D01_F_Q7[facet_1][iq][13];
        const double w0_r1_d0 = w[0][15] * FE19_C0_D10_F_Q7[facet_1][iq][0] + w[0][16] * FE19_C0_D10_F_Q7[facet_1][iq][1] + w[0][18] * FE19_C0_D10_F_Q7[facet_1][iq][2] + w[0][19] * FE19_C0_D10_F_Q7[facet_1][iq][3] + w[0][20] * FE19_C0_D10_F_Q7[facet_1][iq][4] + w[0][21] * FE19_C0_D10_F_Q7[facet_1][iq][5] + w[0][22] * FE19_C0_D10_F_Q7[facet_1][iq][6] + w[0][23] * FE19_C0_D10_F_Q7[facet_1][iq][7] + w[0][24] * FE19_C0_D10_F_Q7[facet_1][iq][8] + w[0][25] * FE19_C0_D10_F_Q7[facet_1][iq][9] + w[0][26] * FE19_C0_D10_F_Q7[facet_1][iq][10] + w[0][27] * FE19_C0_D10_F_Q7[facet_1][iq][11] + w[0][28] * FE19_C0_D10_F_Q7[facet_1][iq][12] + w[0][29] * FE19_C0_D10_F_Q7[facet_1][iq][13];
        const double w1_r1_d1 = w[1][15] * FE19_C0_D01_F_Q7[facet_1][iq][0] + w[1][17] * FE19_C0_D01_F_Q7[facet_1][iq][1] + w[1][18] * FE19_C0_D01_F_Q7[facet_1][iq][2] + w[1][19] * FE19_C0_D01_F_Q7[facet_1][iq][3] + w[1][20] * FE19_C0_D01_F_Q7[facet_1][iq][4] + w[1][21] * FE19_C0_D01_F_Q7[facet_1][iq][5] + w[1][22] * FE19_C0_D01_F_Q7[facet_1][iq][6] + w[1][23] * FE19_C0_D01_F_Q7[facet_1][iq][7] + w[1][24] * FE19_C0_D01_F_Q7[facet_1][iq][8] + w[1][25] * FE19_C0_D01_F_Q7[facet_1][iq][9] + w[1][26] * FE19_C0_D01_F_Q7[facet_1][iq][10] + w[1][27] * FE19_C0_D01_F_Q7[facet_1][iq][11] + w[1][28] * FE19_C0_D01_F_Q7[facet_1][iq][12] + w[1][29] * FE19_C0_D01_F_Q7[facet_1][iq][13];
        const double w1_r1_d0 = w[1][15] * FE19_C0_D10_F_Q7[facet_1][iq][0] + w[1][16] * FE19_C0_D10_F_Q7[facet_1][iq][1] + w[1][18] * FE19_C0_D10_F_Q7[facet_1][iq][2] + w[1][19] * FE19_C0_D10_F_Q7[facet_1][iq][3] + w[1][20] * FE19_C0_D10_F_Q7[facet_1][iq][4] + w[1][21] * FE19_C0_D10_F_Q7[facet_1][iq][5] + w[1][22] * FE19_C0_D10_F_Q7[facet_1][iq][6] + w[1][23] * FE19_C0_D10_F_Q7[facet_1][iq][7] + w[1][24] * FE19_C0_D10_F_Q7[facet_1][iq][8] + w[1][25] * FE19_C0_D10_F_Q7[facet_1][iq][9] + w[1][26] * FE19_C0_D10_F_Q7[facet_1][iq][10] + w[1][27] * FE19_C0_D10_F_Q7[facet_1][iq][11] + w[1][28] * FE19_C0_D10_F_Q7[facet_1][iq][12] + w[1][29] * FE19_C0_D10_F_Q7[facet_1][iq][13];
        alignas(32) double sv7[38];
        sv7[0] = w0_r0_d1 * sp[3];
        sv7[1] = w0_r0_d0 * sp[4];
        sv7[2] = sv7[0] + sv7[1];
        sv7[3] = w1_r0_d1 * sp[3];
        sv7[4] = w1_r0_d0 * sp[4];
        sv7[5] = sv7[3] + sv7[4];
        sv7[6] = sv7[2] + -1 * sv7[5];
        sv7[7] = sv7[6] * sp[17];
        sv7[8] = w0_r0_d0 * sp[9];
        sv7[9] = w0_r0_d1 * sp[11];
        sv7[10] = sv7[8] + sv7[9];
        sv7[11] = w1_r0_d0 * sp[9];
        sv7[12] = w1_r0_d1 * sp[11];
        sv7[13] = sv7[11] + sv7[12];
        sv7[14] = sv7[10] + -1 * sv7[13];
        sv7[15] = sv7[14] * sp[18];
        sv7[16] = sv7[7] + sv7[15];
        sv7[17] = w0_r1_d1 * sp[22];
        sv7[18] = w0_r1_d0 * sp[23];
        sv7[19] = sv7[17] + sv7[18];
        sv7[20] = w1_r1_d1 * sp[22];
        sv7[21] = w1_r1_d0 * sp[23];
        sv7[22] = sv7[20] + sv7[21];
        sv7[23] = sv7[19] + -1 * sv7[22];
        sv7[24] = sv7[23] * sp[36];
        sv7[25] = w0_r1_d0 * sp[28];
        sv7[26] = w0_r1_d1 * sp[30];
        sv7[27] = sv7[25] + sv7[26];
        sv7[28] = w1_r1_d0 * sp[28];
        sv7[29] = w1_r1_d1 * sp[30];
        sv7[30] = sv7[28] + sv7[29];
        sv7[31] = sv7[27] + -1 * sv7[30];
        sv7[32] = sv7[31] * sp[37];
        sv7[33] = sv7[24] + sv7[32];
        sv7[34] = sv7[16] + -1 * sv7[33];
        sv7[35] = sv7[34] * sv7[34];
        sv7[36] = sv7[35] * (0.5 * sp[38]);
        sv7[37] = sv7[36] * sp[48];
        const double fw0 = sv7[37] * weights7[iq];
        for (int i = 0; i < 12; ++i)
            BF0[i] += fw0 * FE19_C0_F_Q7[facet_0][iq][i];
    }
    std::fill(A, A + 30, 0.0);
    for (int i = 0; i < 12; ++i)
        A[i] += BF0[i];
  }

};


class erroripdg2_form_0: public ufc::form
{
public:

  erroripdg2_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~erroripdg2_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "bb2b0102c1fb551018281be61b83dfd73d474889234ed8f9b0c73f06b57fd7b2bcabd8c7491374947099fb10c19531256b11f94aa542cbef7c715951b7c38db2";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 0;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new erroripdg2_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new erroripdg2_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new erroripdg2_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new erroripdg2_finite_element_3();
    case 1:
        return new erroripdg2_finite_element_3();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new erroripdg2_dofmap_3();
    case 1:
        return new erroripdg2_dofmap_3();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new erroripdg2_cell_integral_0_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class erroripdg2_form_1: public ufc::form
{
public:

  erroripdg2_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~erroripdg2_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "debd7b8c4fae94b02a609c138abd6fd9954c776f6b25e56d3eb8e58736fcbd08a17f9a763a169b0ed9f08079c95c62ecee79edccf33f2f525837c28d2ae50b62";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 4;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 4)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new erroripdg2_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new erroripdg2_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new erroripdg2_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new erroripdg2_finite_element_3();
    case 1:
        return new erroripdg2_finite_element_3();
    case 2:
        return new erroripdg2_finite_element_3();
    case 3:
        return new erroripdg2_finite_element_2();
    case 4:
        return new erroripdg2_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new erroripdg2_dofmap_3();
    case 1:
        return new erroripdg2_dofmap_3();
    case 2:
        return new erroripdg2_dofmap_3();
    case 3:
        return new erroripdg2_dofmap_2();
    case 4:
        return new erroripdg2_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return false;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return true;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return new erroripdg2_exterior_facet_integral_1_otherwise();
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return new erroripdg2_interior_facet_integral_1_otherwise();
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace ErrorIPDG2
{

class CoefficientSpace_h: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_h(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg2_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg2_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_h(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg2_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg2_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_k: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_k(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg2_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg2_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_k(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg2_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg2_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_u1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_u1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg2_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg2_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_u1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg2_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg2_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_u2: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_u2(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg2_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg2_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_u2(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg2_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg2_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg2_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg2_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg2_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg2_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg2_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg2_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg2_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg2_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_a_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_a: public dolfin::Form
{
public:

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const erroripdg2_form_0>();
  }

  // Destructor
  ~Form_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

class MultiMeshForm_a: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_a(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_a(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Destructor
  ~MultiMeshForm_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

class Form_L_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg2_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg2_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg2_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg2_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_L_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_L_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_L_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_u1 Form_L_FunctionSpace_1;

typedef CoefficientSpace_u2 Form_L_FunctionSpace_2;

typedef CoefficientSpace_k Form_L_FunctionSpace_3;

typedef CoefficientSpace_h Form_L_FunctionSpace_4;

class Form_L: public dolfin::Form
{
public:

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 4), u1(*this, 0), u2(*this, 1), k(*this, 2), h(*this, 3)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const erroripdg2_form_1>();
  }

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u1, std::shared_ptr<const dolfin::GenericFunction> u2, std::shared_ptr<const dolfin::GenericFunction> k, std::shared_ptr<const dolfin::GenericFunction> h):
    dolfin::Form(1, 4), u1(*this, 0), u2(*this, 1), k(*this, 2), h(*this, 3)
  {
    _function_spaces[0] = V0;

    this->u1 = u1;
    this->u2 = u2;
    this->k = k;
    this->h = h;

    _ufc_form = std::make_shared<const erroripdg2_form_1>();
  }

  // Destructor
  ~Form_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u1")
      return 0;
    else if (name == "u2")
      return 1;
    else if (name == "k")
      return 2;
    else if (name == "h")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u1";
    case 1:
      return "u2";
    case 2:
      return "k";
    case 3:
      return "h";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_u1;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_u2;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_k;
  typedef Form_L_FunctionSpace_4 CoefficientSpace_h;

  // Coefficients
  dolfin::CoefficientAssigner u1;
  dolfin::CoefficientAssigner u2;
  dolfin::CoefficientAssigner k;
  dolfin::CoefficientAssigner h;
};

class MultiMeshForm_L: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), u1(*this, 0), u2(*this, 1), k(*this, 2), h(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u1, std::shared_ptr<const dolfin::GenericFunction> u2, std::shared_ptr<const dolfin::GenericFunction> k, std::shared_ptr<const dolfin::GenericFunction> h):
    dolfin::MultiMeshForm(V0), u1(*this, 0), u2(*this, 1), k(*this, 2), h(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->u1 = u1;
    this->u2 = u2;
    this->k = k;
    this->h = h;

  }

  // Destructor
  ~MultiMeshForm_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u1")
      return 0;
    else if (name == "u2")
      return 1;
    else if (name == "k")
      return 2;
    else if (name == "h")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u1";
    case 1:
      return "u2";
    case 2:
      return "k";
    case 3:
      return "h";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_u1;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_u2;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_k;
  typedef Form_L_FunctionSpace_4 CoefficientSpace_h;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner u1;
  dolfin::MultiMeshCoefficientAssigner u2;
  dolfin::MultiMeshCoefficientAssigner k;
  dolfin::MultiMeshCoefficientAssigner h;
};

// Class typedefs
typedef Form_a BilinearForm;
typedef MultiMeshForm_a MultiMeshBilinearForm;
typedef Form_a JacobianForm;
typedef MultiMeshForm_a MultiMeshJacobianForm;
typedef Form_L LinearForm;
typedef MultiMeshForm_L MultiMeshLinearForm;
typedef Form_L ResidualForm;
typedef MultiMeshForm_L MultiMeshResidualForm;
typedef Form_a::TestSpace FunctionSpace;
typedef Form_a::MultiMeshTestSpace MultiMeshFunctionSpace;

}

#endif
