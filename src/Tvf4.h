// This code conforms with the UFC specification version 2017.2.0
// and was automatically generated by FFC version 2017.2.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#ifndef __TVF4_H
#define __TVF4_H
#include <algorithm>
#include <cmath>
#include <iostream>
#include <stdexcept>
#include <ufc.h>

class tvf4_finite_element_0: public ufc::finite_element
{
public:

  tvf4_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~tvf4_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', triangle, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 3;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 3 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[3] = {};
    const std::size_t num_components[3] = { 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 3; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[3 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 3 * num_derivatives, 0.0);
    const std::size_t reference_offsets[3] = {};
    const std::size_t physical_offsets[3] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 3; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[3 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[3 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[3];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[3];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 3, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[6] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 6, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new tvf4_finite_element_0();
  }

};


class tvf4_finite_element_1: public ufc::finite_element
{
public:

  tvf4_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~tvf4_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 6;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 6 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 3 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 4 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 5 + 1] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 6 * num_derivatives * 2, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t num_components[6] = { 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 6; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 6 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t physical_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 6; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[12];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[12];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 6, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[3] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[5] = dof_values[5];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = coordinate_dofs[0];
    dof_coordinates[2 * 3 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 4] = coordinate_dofs[2];
    dof_coordinates[2 * 4 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 5] = coordinate_dofs[4];
    dof_coordinates[2 * 5 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new tvf4_finite_element_0();
    case 1:
        return new tvf4_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new tvf4_finite_element_1();
  }

};


class tvf4_finite_element_2: public ufc::finite_element
{
public:

  tvf4_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~tvf4_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', triangle, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][1] = { { 1.0 } };
    for (std::size_t k = 0; k < num_points; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basisvalues for each relevant embedded degree
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        // Accumulate products of coefficients and basisvalues
        reference_values[ip] += coefficients0[0][0] * basisvalues0[0];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * num_derivatives, 0.0);
    if (order > 0)
        return;
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    std::fill_n(values, num_points, 0.0);
    const std::size_t reference_offsets[1] = {};
    const std::size_t physical_offsets[1] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[1][1];
        for (std::size_t r = 0; r < 1; ++r)
            for (std::size_t s = 0; s < 1; ++s)
                transform[r][s] = 1.0;
        for (std::size_t d = 0; d < 1; ++d)
        {
            for (std::size_t s = 0; s < 1; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[ip + d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < 1; ++r)
                        values[ip + d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
    }
    // Evaluate basis on reference element
    double ref_values[1];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[1];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[2] = { 0.3333333333333333, 0.3333333333333333 };
    std::copy_n(dof_X, 2, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new tvf4_finite_element_2();
  }

};


class tvf4_finite_element_3: public ufc::finite_element
{
public:

  tvf4_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~tvf4_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', triangle, 2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 6;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    for (std::size_t k = 0; k < num_points * 6; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 5] += coefficients5[0][r] * basisvalues2[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 6 * num_derivatives, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
            { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
            { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 } };
    static const double coefficients4[1][6] = { { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 } };
    const std::size_t reference_offset[6] = {};
    const std::size_t num_components[6] = { 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 6; ++i)
        {
            double derivatives[4] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[6 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 6 * num_derivatives, 0.0);
    const std::size_t reference_offsets[6] = {};
    const std::size_t physical_offsets[6] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 6; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[6 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[6 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[6];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[6];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    // Declare transformation matrix
    double transform[4][4] =
        { { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.17320508075688776, -0.10000000000000003, 0.12171612389003691, -0.09428090415820635, 0.05443310539518176 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.2309401076758503, 0.1333333333333333, 0.0, 0.18856180831641264, -0.1632993161855452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.47140452079103146, -0.2309401076758503, 0.1333333333333333, 0.0, -0.18856180831641264, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910317, 0.0, -0.2666666666666666, -0.24343224778007383, 0.0, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505147, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783181, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119284, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716174, 4.7434164902525735, -0.9128709291752795, 0.0, 0.0, 0.0 },
                  { 1.9999999999999127, 6.123724356957938, 3.535533905932734, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 6, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new tvf4_finite_element_3();
  }

};


class tvf4_dofmap_0: public ufc::dofmap
{
public:

  tvf4_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~tvf4_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 3;
  }

  std::size_t num_element_dofs() const final override
  {
    return 3;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 2;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 2, 3 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new tvf4_dofmap_0();
  }

};


class tvf4_dofmap_1: public ufc::dofmap
{
public:

  tvf4_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~tvf4_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 2 * num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 6;
  }

  std::size_t num_element_dofs() const final override
  {
    return 6;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 4;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 4, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[0][0];
    dofs[4] = offset + entity_indices[0][1];
    dofs[5] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 5;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 5;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new tvf4_dofmap_0();
    case 1:
        return new tvf4_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new tvf4_dofmap_1();
  }

};


class tvf4_dofmap_2: public ufc::dofmap
{
public:

  tvf4_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~tvf4_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', triangle, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = {};
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 1;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new tvf4_dofmap_2();
  }

};


class tvf4_dofmap_3: public ufc::dofmap
{
public:

  tvf4_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~tvf4_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, true, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0] + num_global_entities[1];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 6;
  }

  std::size_t num_element_dofs() const final override
  {
    return 6;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 3;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 1, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 3, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 5;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 3;
            break;
        case 1:
            dofs[0] = 4;
            break;
        case 2:
            dofs[0] = 5;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 5;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new tvf4_dofmap_3();
  }

};


class tvf4_coordinate_mapping_1: public ufc::coordinate_mapping
{
public:

  tvf4_coordinate_mapping_1() : ufc::coordinate_mapping()
  {
    // Do nothing
  }

  ~tvf4_coordinate_mapping_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::coordinate_mapping * create() const final override
  {
    return new tvf4_coordinate_mapping_1();
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new tvf4_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new tvf4_dofmap_1();
  }

  void compute_physical_coordinates(
      double * x, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    tvf4_finite_element_0 xelement;
    double phi[3];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[2 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t d = 0; d < 3; ++d)
                x[2 * ip + i] += coordinate_dofs[2 * d + i] * phi[d];
    }
  }

  void compute_reference_coordinates(
      double * X, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double J[4];
    double detJ[1];
    double K[4];
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_reference_geometry(
      double * X, double * J, double * detJ, double * K, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_jacobians(
      double * J, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    tvf4_finite_element_0 xelement;
    double dphi[6];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[2 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t j = 0; j < 2; ++j)
                for (std::size_t d = 0; d < 3; ++d)
                    J[2 * 2 * ip + 2 * i + j] += coordinate_dofs[2 * d + i] * dphi[2 * d + j];
    }
  }

  void compute_jacobian_determinants(
      double * detJ, std::size_t num_points,
      const double * J,
      int cell_orientation) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[2 * 2 * ip] * J[2 * 2 * ip + 2 + 1] - J[2 * 2 * ip + 1] * J[2 * 2 * ip + 2];
  }

  void compute_jacobian_inverses(
      double * K, std::size_t num_points,
      const double * J, const double * detJ) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[2 * 2 * ip] = J[2 * 2 * ip + 2 + 1] / detJ[ip];
        K[2 * 2 * ip + 1] = -J[2 * 2 * ip + 1] / detJ[ip];
        K[2 * 2 * ip + 2] = -J[2 * 2 * ip + 2] / detJ[ip];
        K[2 * 2 * ip + 2 + 1] = J[2 * 2 * ip] / detJ[ip];
    }
  }

  void compute_geometry(
      double * x, double * J, double * detJ, double * K, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
  }

  void compute_midpoint_geometry(
      double * x, double * J,
      const double * coordinate_dofs) const final override
  {
    const double phi_Xm[3] = { 0.33333333333333337, 0.33333333333333337, 0.3333333333333333 };
    const double dphi_Xm[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t d = 0; d < 3; ++d)
            x[i] += coordinate_dofs[2 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t d = 0; d < 3; ++d)
                J[2 * i + j] += coordinate_dofs[2 * d + i] * dphi_Xm[j][d];
  }

};


class tvf4_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  tvf4_cell_integral_0_otherwise() : ufc::cell_integral()
  {

  }

  ~tvf4_cell_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, false, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 6
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE18_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339873, -0.7476439420339919, 3.49528788406797, 0.0, -3.495287884067985 },
            { 0.7476439420339871, 2.495287884067986, 0.2523560579659927, -3.242931826101967, -0.2523560579660052 },
            { -2.495287884067988, -0.7476439420339921, 0.2523560579659985, 3.242931826101984, -0.2523560579660069 },
            { 0.002853019316351207, -0.002853019316358729, 2.005706038632703, 0.0, -2.005706038632718 },
            { 0.002853019316350791, 1.005706038632718, 0.9971469806836264, -1.008559057949063, -0.9971469806836402 },
            { -1.005706038632725, -0.002853019316358729, 0.9971469806836283, 1.008559057949089, -0.9971469806836405 },
            { 0.787419800620731, 0.2414098041351416, 2.546009996485582, -1.028829604755865, -2.546009996485598 },
            { -0.2414098041351445, -0.7874198006207358, 2.546009996485584, 1.028829604755886, -2.546009996485597 },
            { 0.7874198006207309, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.5460099964856, -0.7874198006207358, 1.241409804135129, 2.333429797106341, -1.24140980413514 },
            { -0.2414098041351452, 1.546009996485598, 0.2125801993792508, -1.304600192350447, -0.212580199379263 },
            { -1.546009996485601, 0.2414098041351413, 0.212580199379253, 1.304600192350464, -0.2125801993792636 } } };
    alignas(32) static const double FE18_C0_D02_Q12[1][1][3] = { { { 3.999999999999996, 4.000000000000002, -7.999999999999991 } } };
    alignas(32) static const double FE18_C0_D10_Q12[1][12][5] =
        { { { 0.7476439420339935, 2.495287884067984, 0.2523560579660068, -0.2523560579660068, -3.242931826101977 },
            { 0.7476439420339916, -0.7476439420339919, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067985, -0.7476439420339949, 0.2523560579660065, -0.2523560579660065, 3.24293182610198 },
            { 0.002853019316357286, 1.005706038632716, 0.9971469806836385, -0.9971469806836385, -1.008559057949073 },
            { 0.002853019316356287, -0.002853019316360061, 2.005706038632714, -2.005706038632714, 0.0 },
            { -1.00570603863272, -0.002853019316361047, 0.9971469806836385, -0.9971469806836385, 1.008559057949081 },
            { 0.7874198006207371, 1.546009996485596, 1.241409804135139, -1.241409804135139, -2.333429797106333 },
            { -0.2414098041351386, 1.546009996485595, 0.2125801993792624, -0.2125801993792624, -1.304600192350457 },
            { 0.7874198006207367, 0.2414098041351402, 2.546009996485593, -2.546009996485593, -1.028829604755877 },
            { -1.546009996485596, 0.2414098041351381, 0.2125801993792622, -0.2125801993792622, 1.304600192350458 },
            { -0.2414098041351403, -0.7874198006207362, 2.546009996485593, -2.546009996485593, 1.028829604755877 },
            { -1.546009996485597, -0.7874198006207376, 1.241409804135139, -1.241409804135139, 2.333429797106335 } } };
    alignas(32) static const double FE18_C0_D11_Q12[1][1][4] = { { { 3.999999999999997, 3.999999999999998, -3.999999999999998, -4.000000000000004 } } };
    alignas(32) static const double FE18_C0_Q12[1][12][6] =
        { { { -0.05512856699248406, 0.6533077030470595, -0.05512856699248411, 0.2205142679699365, 0.01592089499803573, 0.2205142679699365 },
            { -0.05512856699248403, -0.05512856699248408, 0.6533077030470595, 0.2205142679699363, 0.2205142679699362, 0.01592089499803598 },
            { 0.6533077030470595, -0.05512856699248414, -0.05512856699248411, 0.01592089499803585, 0.2205142679699363, 0.2205142679699365 },
            { -0.1249989825350975, 0.001430579517788792, -0.1249989825350975, 0.4999959301403892, 0.2485755252716257, 0.4999959301403913 },
            { -0.1249989825350975, -0.1249989825350976, 0.001430579517788827, 0.4999959301403892, 0.4999959301403911, 0.2485755252716259 },
            { 0.00143057951778983, -0.1249989825350976, -0.1249989825350975, 0.2485755252716249, 0.4999959301403901, 0.4999959301403903 },
            { -0.04749625719880002, 0.173768363654174, -0.1177151633084292, 0.7901604427658229, 0.06597478591860528, 0.1353078281686269 },
            { -0.1177151633084291, 0.1737683636541742, -0.04749625719880002, 0.1353078281686269, 0.06597478591860514, 0.7901604427658232 },
            { -0.04749625719879997, -0.1177151633084292, 0.1737683636541741, 0.790160442765823, 0.1353078281686267, 0.06597478591860537 },
            { 0.1737683636541741, -0.1177151633084291, -0.04749625719880002, 0.06597478591860527, 0.1353078281686267, 0.7901604427658232 },
            { -0.1177151633084291, -0.04749625719880009, 0.1737683636541741, 0.1353078281686268, 0.7901604427658229, 0.06597478591860537 },
            { 0.173768363654174, -0.04749625719880014, -0.1177151633084292, 0.06597478591860538, 0.7901604427658229, 0.1353078281686269 } } };
    alignas(32) static const double FE3_C0_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double w4_d01 = w[4][0] * FE18_C0_D11_Q12[0][0][0] + w[4][3] * FE18_C0_D11_Q12[0][0][1] + w[4][4] * FE18_C0_D11_Q12[0][0][2] + w[4][5] * FE18_C0_D11_Q12[0][0][3];
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q12[0][0][1];
    const double w4_d00 = w[4][0] * FE18_C0_D02_Q12[0][0][0] + w[4][1] * FE18_C0_D02_Q12[0][0][1] + w[4][5] * FE18_C0_D02_Q12[0][0][2];
    const double w4_d11 = w[4][0] * FE18_C0_D02_Q12[0][0][0] + w[4][2] * FE18_C0_D02_Q12[0][0][1] + w[4][4] * FE18_C0_D02_Q12[0][0][2];
    alignas(32) double sp[47];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = w4_d01 * sp[3];
    sp[5] = -1 * J_c1 / sp[2];
    sp[6] = w4_d00 * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = J_c3 / sp[2];
    sp[9] = sp[7] * sp[8];
    sp[10] = w4_d11 * sp[3];
    sp[11] = w4_d01 * sp[5];
    sp[12] = sp[10] + sp[11];
    sp[13] = -1 * J_c2 / sp[2];
    sp[14] = sp[12] * sp[13];
    sp[15] = sp[9] + sp[14];
    sp[16] = sp[15] * w[2][0];
    sp[17] = sp[12] * sp[3];
    sp[18] = sp[7] * sp[5];
    sp[19] = sp[17] + sp[18];
    sp[20] = sp[3] * sp[8];
    sp[21] = sp[8] * sp[5];
    sp[22] = sp[5] * sp[13];
    sp[23] = sp[3] * sp[13];
    sp[24] = sp[20] + sp[22];
    sp[25] = w4_d00 * sp[8];
    sp[26] = w4_d01 * sp[13];
    sp[27] = sp[25] + sp[26];
    sp[28] = sp[27] * sp[8];
    sp[29] = w4_d01 * sp[8];
    sp[30] = w4_d11 * sp[13];
    sp[31] = sp[29] + sp[30];
    sp[32] = sp[31] * sp[13];
    sp[33] = sp[28] + sp[32];
    sp[34] = sp[33] * w[2][0];
    sp[35] = sp[8] * sp[13];
    sp[36] = sp[8] * sp[8];
    sp[37] = sp[13] * sp[13];
    sp[38] = sp[35] + sp[35];
    sp[39] = sp[19] * w[2][0];
    sp[40] = sp[3] * sp[5];
    sp[41] = sp[3] * sp[3];
    sp[42] = sp[5] * sp[5];
    sp[43] = sp[40] + sp[40];
    sp[44] = std::pow(w[2][0], 2) * w[0][0];
    sp[45] = sp[44] * w[1][0];
    sp[46] = std::abs(sp[2]);
    alignas(32) double BF0[6] = {};
    alignas(32) double BF1[3] = {};
    alignas(32) double BF2[3] = {};
    alignas(32) double BF3[4] = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        const double w4_d1 = w[4][0] * FE18_C0_D01_Q12[0][iq][0] + w[4][2] * FE18_C0_D01_Q12[0][iq][1] + w[4][3] * FE18_C0_D01_Q12[0][iq][2] + w[4][4] * FE18_C0_D01_Q12[0][iq][3] + w[4][5] * FE18_C0_D01_Q12[0][iq][4];
        const double w4_d0 = w[4][0] * FE18_C0_D10_Q12[0][iq][0] + w[4][1] * FE18_C0_D10_Q12[0][iq][1] + w[4][3] * FE18_C0_D10_Q12[0][iq][2] + w[4][4] * FE18_C0_D10_Q12[0][iq][3] + w[4][5] * FE18_C0_D10_Q12[0][iq][4];
        double w5 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w5 += w[5][ic] * FE18_C0_Q12[0][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w4 += w[4][ic] * FE18_C0_Q12[0][iq][ic];
        alignas(32) double sv12[58];
        sv12[0] = w4_d1 * sp[3];
        sv12[1] = w4_d0 * sp[5];
        sv12[2] = sv12[0] + sv12[1];
        sv12[3] = sv12[2] * sv12[2];
        sv12[4] = sp[15] * sv12[3];
        sv12[5] = sv12[4] + sp[16];
        sv12[6] = w4_d0 * sp[8];
        sv12[7] = w4_d1 * sp[13];
        sv12[8] = sv12[6] + sv12[7];
        sv12[9] = sv12[2] * sv12[8];
        sv12[10] = sp[19] * sv12[9];
        sv12[11] = sv12[5] + -1 * sv12[10];
        sv12[12] = sv12[11] * sp[24];
        sv12[13] = sv12[11] * sp[21];
        sv12[14] = sv12[11] * sp[23];
        sv12[15] = sp[33] * sv12[3];
        sv12[16] = sv12[15] + sp[34];
        sv12[17] = sp[15] * sv12[9];
        sv12[18] = sv12[16] + -1 * sv12[17];
        sv12[19] = sv12[18] * sp[38];
        sv12[20] = sv12[18] * sp[36];
        sv12[21] = sv12[18] * sp[37];
        sv12[22] = sv12[19] + sv12[12];
        sv12[23] = sv12[20] + sv12[13];
        sv12[24] = sv12[14] + sv12[21];
        sv12[25] = sp[33] * sv12[9];
        sv12[26] = -1 * sv12[25] + sp[16];
        sv12[27] = sv12[8] * sv12[8];
        sv12[28] = sp[15] * sv12[27];
        sv12[29] = sv12[26] + sv12[28];
        sv12[30] = sv12[29] * sp[24];
        sv12[31] = sv12[29] * sp[21];
        sv12[32] = sv12[29] * sp[23];
        sv12[33] = sv12[22] + sv12[30];
        sv12[34] = sv12[23] + sv12[31];
        sv12[35] = sv12[24] + sv12[32];
        sv12[36] = -1 * sv12[17] + sp[39];
        sv12[37] = sp[19] * sv12[27];
        sv12[38] = sv12[36] + sv12[37];
        sv12[39] = sv12[38] * sp[43];
        sv12[40] = sv12[38] * sp[42];
        sv12[41] = sv12[38] * sp[41];
        sv12[42] = sv12[33] + sv12[39];
        sv12[43] = sv12[34] + sv12[40];
        sv12[44] = sv12[35] + sv12[41];
        sv12[45] = sv12[3] + sv12[27];
        sv12[46] = sv12[45] + w[2][0];
        sv12[47] = sv12[42] * std::pow(sv12[46], -1.5);
        sv12[48] = sv12[43] * std::pow(sv12[46], -1.5);
        sv12[49] = sv12[44] * std::pow(sv12[46], -1.5);
        sv12[50] = sv12[47] * sp[45];
        sv12[51] = sv12[48] * sp[45];
        sv12[52] = sv12[49] * sp[45];
        sv12[53] = -1 * w5 + w4;
        sv12[54] = sv12[50] * sp[46];
        sv12[55] = sv12[51] * sp[46];
        sv12[56] = sv12[52] * sp[46];
        sv12[57] = sv12[53] * sp[46];
        const double fw0 = sv12[57] * weights12[iq];
        for (int i = 0; i < 6; ++i)
            BF0[i] += fw0 * FE18_C0_Q12[0][iq][i];
        const double fw1 = sv12[55] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF1[i] += fw1 * FE18_C0_D02_Q12[0][0][i];
        const double fw2 = sv12[56] * weights12[iq];
        for (int i = 0; i < 3; ++i)
            BF2[i] += fw2 * FE18_C0_D02_Q12[0][0][i];
        const double fw3 = sv12[54] * weights12[iq];
        for (int i = 0; i < 4; ++i)
            BF3[i] += fw3 * FE18_C0_D11_Q12[0][0][i];
    }
    std::fill(A, A + 6, 0.0);
    static const int DM0[3] = { 0, 1, 5 };
    static const int DM1[3] = { 0, 2, 4 };
    static const int DM2[4] = { 0, 3, 4, 5 };
    for (int i = 0; i < 6; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 3; ++i)
        A[DM0[i]] += BF1[i];
    for (int i = 0; i < 3; ++i)
        A[DM1[i]] += BF2[i];
    for (int i = 0; i < 4; ++i)
        A[DM2[i]] += BF3[i];
  }

};


class tvf4_exterior_facet_integral_0_otherwise: public ufc::exterior_facet_integral
{
public:

  tvf4_exterior_facet_integral_0_otherwise() : ufc::exterior_facet_integral()
  {

  }

  ~tvf4_exterior_facet_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, false});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 11
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 11
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           11
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights6[6] = { 0.08566224618958505, 0.1803807865240693, 0.2339569672863456, 0.2339569672863455, 0.1803807865240693, 0.08566224618958529 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE18_C0_D01_F_Q6[3][6][5] =
        { { { 1.0, -0.8649390284063047, 3.864939028406289, -0.1350609715936839, -3.864939028406305 },
            { 1.0, -0.3224187729325285, 3.322418772932515, -0.677581227067459, -3.322418772932531 },
            { 1.0, 0.5227616278336077, 2.477238372166379, -1.522761627833595, -2.477238372166395 },
            { 1.0, 1.477238372166396, 1.52276162783359, -2.477238372166383, -1.522761627833606 },
            { 1.0, 2.322418772932532, 0.6775812270674544, -3.322418772932521, -0.6775812270674686 },
            { 1.0, 2.864939028406306, 0.1350609715936804, -3.864939028406296, -0.1350609715936926 } },
          { { -2.864939028406309, -0.8649390284063044, 0.0, 3.729878056812615, 0.0 },
            { -2.322418772932534, -0.3224187729325287, 0.0, 2.644837545865066, 0.0 },
            { -1.477238372166399, 0.5227616278336074, 0.0, 0.9544767443327962, 0.0 },
            { -0.5227616278336114, 1.477238372166396, 0.0, -0.9544767443327794, 0.0 },
            { 0.3224187729325244, 2.322418772932532, 0.0, -2.644837545865051, 0.0 },
            { 0.8649390284062988, 2.864939028406306, 0.0, -3.729878056812599, 0.0 } },
          { { -2.864939028406309, -1.0, 0.1350609715936861, 3.864939028406311, -0.1350609715936933 },
            { -2.322418772932533, -1.0, 0.6775812270674609, 3.322418772932537, -0.6775812270674697 },
            { -1.477238372166398, -1.0, 1.522761627833595, 2.477238372166403, -1.522761627833606 },
            { -0.5227616278336102, -1.0, 2.477238372166382, 1.522761627833616, -2.477238372166394 },
            { 0.322418772932525, -1.0, 3.322418772932516, 0.6775812270674819, -3.322418772932531 },
            { 0.8649390284062988, -1.0, 3.864939028406289, 0.1350609715937086, -3.864939028406305 } } };
    alignas(32) static const double FE18_C0_D02_F_Q6[1][1][3] = { { { 3.999999999999994, 4.0, -7.999999999999988 } } };
    alignas(32) static const double FE18_C0_D10_F_Q6[3][6][5] =
        { { { 1.0, 2.864939028406304, 0.135060971593695, -0.135060971593695, -3.864939028406305 },
            { 1.0, 2.322418772932529, 0.6775812270674698, -0.6775812270674698, -3.322418772932531 },
            { 1.0, 1.477238372166394, 1.522761627833604, -1.522761627833604, -2.477238372166395 },
            { 1.0, 0.5227616278336064, 2.47723837216639, -2.47723837216639, -1.522761627833607 },
            { 1.0, -0.3224187729325293, 3.322418772932524, -3.322418772932524, -0.6775812270674704 },
            { 1.0, -0.8649390284063034, 3.864939028406296, -3.864939028406296, -0.1350609715936956 } },
          { { -2.864939028406306, -1.0, 0.1350609715936943, -0.1350609715936943, 3.86493902840631 },
            { -2.322418772932531, -1.0, 0.6775812270674698, -0.6775812270674698, 3.322418772932534 },
            { -1.477238372166396, -1.0, 1.522761627833604, -1.522761627833604, 2.477238372166398 },
            { -0.5227616278336069, -1.0, 2.477238372166391, -2.477238372166391, 1.522761627833608 },
            { 0.3224187729325286, -1.0, 3.322418772932524, -3.322418772932524, 0.6775812270674717 },
            { 0.8649390284063031, -1.0, 3.864939028406296, -3.864939028406296, 0.1350609715936973 } },
          { { -2.864939028406305, -0.8649390284063081, 0.0, 0.0, 3.729878056812614 },
            { -2.322418772932529, -0.3224187729325324, 0.0, 0.0, 2.644837545865062 },
            { -1.477238372166393, 0.522761627833604, 0.0, 0.0, 0.9544767443327891 },
            { -0.5227616278336041, 1.477238372166393, 0.0, 0.0, -0.9544767443327888 },
            { 0.3224187729325312, 2.322418772932529, 0.0, 0.0, -2.64483754586506 },
            { 0.8649390284063053, 2.864939028406303, 0.0, 0.0, -3.729878056812609 } } };
    alignas(32) static const double FE18_C0_D11_F_Q6[1][1][4] = { { { 3.999999999999996, 3.999999999999997, -3.999999999999997, -4.000000000000003 } } };
    alignas(32) static const double FE3_C0_D01_F_Q6[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_F_Q6[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_F_Q6[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_F_Q6[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_F_Q6[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_F_Q6[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_F_Q6[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_F_Q6[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_F_Q6[0][0][1];
    const double w4_d01 = w[4][0] * FE18_C0_D11_F_Q6[0][0][0] + w[4][3] * FE18_C0_D11_F_Q6[0][0][1] + w[4][4] * FE18_C0_D11_F_Q6[0][0][2] + w[4][5] * FE18_C0_D11_F_Q6[0][0][3];
    const double w4_d00 = w[4][0] * FE18_C0_D02_F_Q6[0][0][0] + w[4][1] * FE18_C0_D02_F_Q6[0][0][1] + w[4][5] * FE18_C0_D02_F_Q6[0][0][2];
    const double w4_d11 = w[4][0] * FE18_C0_D02_F_Q6[0][0][0] + w[4][2] * FE18_C0_D02_F_Q6[0][0][1] + w[4][4] * FE18_C0_D02_F_Q6[0][0][2];
    alignas(32) double sp[104];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = triangle_reference_facet_normals[facet][1] * sp[3];
    sp[6] = triangle_reference_facet_normals[facet][0] * sp[4];
    sp[7] = sp[5] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet][0] * sp[9];
    sp[11] = -1 * J_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = sp[3] * sp[9];
    sp[20] = sp[9] * sp[4];
    sp[21] = sp[4] * sp[11];
    sp[22] = sp[3] * sp[11];
    sp[23] = sp[19] + sp[21];
    sp[24] = sp[23] * w[2][0];
    sp[25] = sp[20] * w[2][0];
    sp[26] = sp[22] * w[2][0];
    sp[27] = sp[3] * sp[4];
    sp[28] = sp[3] * sp[3];
    sp[29] = sp[4] * sp[4];
    sp[30] = sp[27] + sp[27];
    sp[31] = sp[17] * sp[18];
    sp[32] = sp[9] * sp[11];
    sp[33] = sp[9] * sp[9];
    sp[34] = sp[11] * sp[11];
    sp[35] = sp[32] + sp[32];
    sp[36] = sp[35] * w[2][0];
    sp[37] = sp[33] * w[2][0];
    sp[38] = sp[34] * w[2][0];
    sp[39] = sp[18] * sp[18];
    sp[40] = sp[30] * w[2][0];
    sp[41] = sp[29] * w[2][0];
    sp[42] = sp[28] * w[2][0];
    sp[43] = sp[17] * sp[17];
    sp[44] = std::pow(w[2][0], 2) * w[0][0];
    sp[45] = sp[44] * w[1][0];
    sp[46] = sp[3] * sp[17];
    sp[47] = sp[4] * sp[17];
    sp[48] = sp[11] * sp[18];
    sp[49] = sp[9] * sp[18];
    sp[50] = sp[46] + sp[48];
    sp[51] = sp[47] + sp[49];
    sp[52] = w4_d01 * sp[3];
    sp[53] = w4_d00 * sp[4];
    sp[54] = sp[52] + sp[53];
    sp[55] = sp[54] * sp[9];
    sp[56] = w4_d11 * sp[3];
    sp[57] = w4_d01 * sp[4];
    sp[58] = sp[56] + sp[57];
    sp[59] = sp[58] * sp[11];
    sp[60] = sp[55] + sp[59];
    sp[61] = sp[60] * w[2][0];
    sp[62] = sp[58] * sp[3];
    sp[63] = sp[54] * sp[4];
    sp[64] = sp[62] + sp[63];
    sp[65] = w4_d00 * sp[9];
    sp[66] = w4_d01 * sp[11];
    sp[67] = sp[65] + sp[66];
    sp[68] = sp[67] * sp[9];
    sp[69] = w4_d01 * sp[9];
    sp[70] = w4_d11 * sp[11];
    sp[71] = sp[69] + sp[70];
    sp[72] = sp[71] * sp[11];
    sp[73] = sp[68] + sp[72];
    sp[74] = sp[73] * w[2][0];
    sp[75] = sp[64] * w[2][0];
    sp[76] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[77] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[78] = sp[76] + sp[77];
    sp[79] = std::sqrt(sp[78]);
    sp[80] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[81] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[82] = sp[80] + sp[81];
    sp[83] = std::sqrt(sp[82]);
    sp[84] = sp[79] * sp[83];
    sp[85] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[86] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[87] = sp[85] + sp[86];
    sp[88] = std::sqrt(sp[87]);
    sp[89] = sp[84] * sp[88];
    sp[90] = triangle_reference_cell_volume * sp[2];
    sp[91] = std::abs(sp[90]);
    sp[92] = sp[89] / (4.0 * sp[91]);
    sp[93] = w[3][0] / (2.0 * sp[92]);
    sp[94] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[95] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[96] = sp[94] + sp[95];
    sp[97] = sp[96] * sp[96];
    sp[98] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[99] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[100] = sp[98] + sp[99];
    sp[101] = sp[100] * sp[100];
    sp[102] = sp[97] + sp[101];
    sp[103] = std::sqrt(sp[102]);
    alignas(32) double BF0[5] = {};
    alignas(32) double BF1[3] = {};
    alignas(32) double BF2[5] = {};
    alignas(32) double BF3[3] = {};
    alignas(32) double BF4[4] = {};
    for (int iq = 0; iq < 6; ++iq)
    {
        // Quadrature loop body setup (num_points=6)
        // Unstructured varying computations for num_points=6
        const double w4_d1 = w[4][0] * FE18_C0_D01_F_Q6[facet][iq][0] + w[4][2] * FE18_C0_D01_F_Q6[facet][iq][1] + w[4][3] * FE18_C0_D01_F_Q6[facet][iq][2] + w[4][4] * FE18_C0_D01_F_Q6[facet][iq][3] + w[4][5] * FE18_C0_D01_F_Q6[facet][iq][4];
        const double w4_d0 = w[4][0] * FE18_C0_D10_F_Q6[facet][iq][0] + w[4][1] * FE18_C0_D10_F_Q6[facet][iq][1] + w[4][3] * FE18_C0_D10_F_Q6[facet][iq][2] + w[4][4] * FE18_C0_D10_F_Q6[facet][iq][3] + w[4][5] * FE18_C0_D10_F_Q6[facet][iq][4];
        alignas(32) double sv6[132];
        sv6[0] = w4_d1 * sp[3];
        sv6[1] = w4_d0 * sp[4];
        sv6[2] = sv6[0] + sv6[1];
        sv6[3] = sv6[2] * sp[17];
        sv6[4] = w4_d0 * sp[9];
        sv6[5] = w4_d1 * sp[11];
        sv6[6] = sv6[4] + sv6[5];
        sv6[7] = sv6[6] * sp[18];
        sv6[8] = sv6[3] + sv6[7];
        sv6[9] = sv6[2] * sv6[2];
        sv6[10] = sv6[6] * sv6[6];
        sv6[11] = sv6[9] + sv6[10];
        sv6[12] = sv6[11] + w[2][0];
        sv6[13] = sv6[8] * std::pow(sv6[12], -0.25);
        sv6[14] = sp[23] * sv6[9];
        sv6[15] = sv6[9] * sp[20];
        sv6[16] = sv6[9] * sp[22];
        sv6[17] = sv6[14] + sp[24];
        sv6[18] = sv6[15] + sp[25];
        sv6[19] = sv6[16] + sp[26];
        sv6[20] = sv6[2] * sv6[6];
        sv6[21] = sp[30] * sv6[20];
        sv6[22] = sv6[20] * sp[29];
        sv6[23] = sv6[20] * sp[28];
        sv6[24] = sv6[17] + -1 * sv6[21];
        sv6[25] = sv6[18] + -1 * sv6[22];
        sv6[26] = sv6[19] + -1 * sv6[23];
        sv6[27] = sv6[24] * sp[31];
        sv6[28] = sv6[25] * sp[31];
        sv6[29] = sv6[26] * sp[31];
        sv6[30] = sp[35] * sv6[9];
        sv6[31] = sv6[9] * sp[33];
        sv6[32] = sv6[9] * sp[34];
        sv6[33] = sv6[30] + sp[36];
        sv6[34] = sv6[31] + sp[37];
        sv6[35] = sv6[32] + sp[38];
        sv6[36] = sp[23] * sv6[20];
        sv6[37] = sv6[20] * sp[20];
        sv6[38] = sv6[20] * sp[22];
        sv6[39] = sv6[33] + -1 * sv6[36];
        sv6[40] = sv6[34] + -1 * sv6[37];
        sv6[41] = sv6[35] + -1 * sv6[38];
        sv6[42] = sv6[39] * sp[39];
        sv6[43] = sv6[40] * sp[39];
        sv6[44] = sv6[41] * sp[39];
        sv6[45] = sv6[27] + sv6[42];
        sv6[46] = sv6[28] + sv6[43];
        sv6[47] = sv6[29] + sv6[44];
        sv6[48] = sp[23] * sv6[10];
        sv6[49] = sv6[10] * sp[20];
        sv6[50] = sv6[10] * sp[22];
        sv6[51] = sv6[48] + sp[24];
        sv6[52] = sv6[49] + sp[25];
        sv6[53] = sv6[50] + sp[26];
        sv6[54] = sp[35] * sv6[20];
        sv6[55] = sv6[20] * sp[33];
        sv6[56] = sv6[20] * sp[34];
        sv6[57] = sv6[51] + -1 * sv6[54];
        sv6[58] = sv6[52] + -1 * sv6[55];
        sv6[59] = sv6[53] + -1 * sv6[56];
        sv6[60] = sv6[57] * sp[31];
        sv6[61] = sv6[58] * sp[31];
        sv6[62] = sv6[59] * sp[31];
        sv6[63] = sv6[45] + sv6[60];
        sv6[64] = sv6[46] + sv6[61];
        sv6[65] = sv6[47] + sv6[62];
        sv6[66] = sp[30] * sv6[10];
        sv6[67] = sv6[10] * sp[29];
        sv6[68] = sv6[10] * sp[28];
        sv6[69] = sv6[66] + sp[40];
        sv6[70] = sv6[67] + sp[41];
        sv6[71] = sv6[68] + sp[42];
        sv6[72] = sv6[69] + -1 * sv6[36];
        sv6[73] = sv6[70] + -1 * sv6[37];
        sv6[74] = sv6[71] + -1 * sv6[38];
        sv6[75] = sv6[72] * sp[43];
        sv6[76] = sv6[73] * sp[43];
        sv6[77] = sv6[74] * sp[43];
        sv6[78] = sv6[63] + sv6[75];
        sv6[79] = sv6[64] + sv6[76];
        sv6[80] = sv6[65] + sv6[77];
        sv6[81] = sv6[78] * std::pow(sv6[12], -1.25);
        sv6[82] = sv6[79] * std::pow(sv6[12], -1.25);
        sv6[83] = sv6[80] * std::pow(sv6[12], -1.25);
        sv6[84] = sv6[13] * sv6[81];
        sv6[85] = sv6[13] * sv6[82];
        sv6[86] = sv6[13] * sv6[83];
        sv6[87] = -1 * sv6[84] * sp[45];
        sv6[88] = -1 * sv6[85] * sp[45];
        sv6[89] = -1 * sv6[86] * sp[45];
        sv6[90] = sp[50] * std::pow(sv6[12], -0.25);
        sv6[91] = sp[51] * std::pow(sv6[12], -0.25);
        sv6[92] = sp[60] * sv6[9];
        sv6[93] = sv6[92] + sp[61];
        sv6[94] = sp[64] * sv6[20];
        sv6[95] = sv6[93] + -1 * sv6[94];
        sv6[96] = sv6[95] * sp[31];
        sv6[97] = sp[73] * sv6[9];
        sv6[98] = sv6[97] + sp[74];
        sv6[99] = sp[60] * sv6[20];
        sv6[100] = sv6[98] + -1 * sv6[99];
        sv6[101] = sv6[100] * sp[39];
        sv6[102] = sv6[96] + sv6[101];
        sv6[103] = sp[60] * sv6[10];
        sv6[104] = sv6[103] + sp[61];
        sv6[105] = sp[73] * sv6[20];
        sv6[106] = sv6[104] + -1 * sv6[105];
        sv6[107] = sv6[106] * sp[31];
        sv6[108] = sv6[102] + sv6[107];
        sv6[109] = sp[64] * sv6[10];
        sv6[110] = sv6[109] + sp[75];
        sv6[111] = sv6[110] + -1 * sv6[99];
        sv6[112] = sv6[111] * sp[43];
        sv6[113] = sv6[108] + sv6[112];
        sv6[114] = sv6[113] * std::pow(sv6[12], -1.25);
        sv6[115] = sv6[90] * sv6[114];
        sv6[116] = sv6[91] * sv6[114];
        sv6[117] = -1 * sv6[115] * sp[45];
        sv6[118] = -1 * sv6[116] * sp[45];
        sv6[119] = sv6[13] * sv6[90];
        sv6[120] = sv6[13] * sv6[91];
        sv6[121] = sv6[119] * sp[93];
        sv6[122] = sv6[120] * sp[93];
        sv6[123] = sv6[121] * sp[45];
        sv6[124] = sv6[122] * sp[45];
        sv6[125] = sv6[117] + sv6[123];
        sv6[126] = sv6[118] + sv6[124];
        sv6[127] = sv6[87] * sp[103];
        sv6[128] = sv6[88] * sp[103];
        sv6[129] = sv6[89] * sp[103];
        sv6[130] = sv6[125] * sp[103];
        sv6[131] = sv6[126] * sp[103];
        const double fw0 = sv6[131] * weights6[iq];
        for (int i = 0; i < 5; ++i)
            BF0[i] += fw0 * FE18_C0_D10_F_Q6[facet][iq][i];
        const double fw1 = sv6[128] * weights6[iq];
        for (int i = 0; i < 3; ++i)
            BF1[i] += fw1 * FE18_C0_D02_F_Q6[0][0][i];
        const double fw2 = sv6[130] * weights6[iq];
        for (int i = 0; i < 5; ++i)
            BF2[i] += fw2 * FE18_C0_D01_F_Q6[facet][iq][i];
        const double fw3 = sv6[129] * weights6[iq];
        for (int i = 0; i < 3; ++i)
            BF3[i] += fw3 * FE18_C0_D02_F_Q6[0][0][i];
        const double fw4 = sv6[127] * weights6[iq];
        for (int i = 0; i < 4; ++i)
            BF4[i] += fw4 * FE18_C0_D11_F_Q6[0][0][i];
    }
    std::fill(A, A + 6, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[3] = { 0, 1, 5 };
    static const int DM2[5] = { 0, 2, 3, 4, 5 };
    static const int DM3[3] = { 0, 2, 4 };
    static const int DM4[4] = { 0, 3, 4, 5 };
    for (int i = 0; i < 5; ++i)
        A[DM0[i]] += BF0[i];
    for (int i = 0; i < 3; ++i)
        A[DM1[i]] += BF1[i];
    for (int i = 0; i < 5; ++i)
        A[DM2[i]] += BF2[i];
    for (int i = 0; i < 3; ++i)
        A[DM3[i]] += BF3[i];
    for (int i = 0; i < 4; ++i)
        A[DM4[i]] += BF4[i];
  }

};


class tvf4_interior_facet_integral_0_otherwise: public ufc::interior_facet_integral
{
public:

  tvf4_interior_facet_integral_0_otherwise() : ufc::interior_facet_integral()
  {

  }

  ~tvf4_interior_facet_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, false});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs_0,
                       const double * coordinate_dofs_1,
                       std::size_t facet_0,
                       std::size_t facet_1,
                       int cell_orientation_0,
                       int cell_orientation_1) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 11
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 11
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           11
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights6[6] = { 0.08566224618958505, 0.1803807865240693, 0.2339569672863456, 0.2339569672863455, 0.1803807865240693, 0.08566224618958529 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE32_C0_D01_F_Q6[3][6][5] =
        { { { 1.0, -0.8649390284063047, 3.864939028406289, -0.1350609715936839, -3.864939028406305 },
            { 1.0, -0.3224187729325285, 3.322418772932515, -0.677581227067459, -3.322418772932531 },
            { 1.0, 0.5227616278336077, 2.477238372166379, -1.522761627833595, -2.477238372166395 },
            { 1.0, 1.477238372166396, 1.52276162783359, -2.477238372166383, -1.522761627833606 },
            { 1.0, 2.322418772932532, 0.6775812270674544, -3.322418772932521, -0.6775812270674686 },
            { 1.0, 2.864939028406306, 0.1350609715936804, -3.864939028406296, -0.1350609715936926 } },
          { { -2.864939028406309, -0.8649390284063044, 0.0, 3.729878056812615, 0.0 },
            { -2.322418772932534, -0.3224187729325287, 0.0, 2.644837545865066, 0.0 },
            { -1.477238372166399, 0.5227616278336074, 0.0, 0.9544767443327962, 0.0 },
            { -0.5227616278336114, 1.477238372166396, 0.0, -0.9544767443327794, 0.0 },
            { 0.3224187729325244, 2.322418772932532, 0.0, -2.644837545865051, 0.0 },
            { 0.8649390284062988, 2.864939028406306, 0.0, -3.729878056812599, 0.0 } },
          { { -2.864939028406309, -1.0, 0.1350609715936861, 3.864939028406311, -0.1350609715936933 },
            { -2.322418772932533, -1.0, 0.6775812270674609, 3.322418772932537, -0.6775812270674697 },
            { -1.477238372166398, -1.0, 1.522761627833595, 2.477238372166403, -1.522761627833606 },
            { -0.5227616278336102, -1.0, 2.477238372166382, 1.522761627833616, -2.477238372166394 },
            { 0.322418772932525, -1.0, 3.322418772932516, 0.6775812270674819, -3.322418772932531 },
            { 0.8649390284062988, -1.0, 3.864939028406289, 0.1350609715937086, -3.864939028406305 } } };
    alignas(32) static const double FE32_C0_D02_F_Q6[1][1][3] = { { { 3.999999999999994, 4.0, -7.999999999999988 } } };
    alignas(32) static const double FE32_C0_D10_F_Q6[3][6][5] =
        { { { 1.0, 2.864939028406304, 0.135060971593695, -0.135060971593695, -3.864939028406305 },
            { 1.0, 2.322418772932529, 0.6775812270674698, -0.6775812270674698, -3.322418772932531 },
            { 1.0, 1.477238372166394, 1.522761627833604, -1.522761627833604, -2.477238372166395 },
            { 1.0, 0.5227616278336064, 2.47723837216639, -2.47723837216639, -1.522761627833607 },
            { 1.0, -0.3224187729325293, 3.322418772932524, -3.322418772932524, -0.6775812270674704 },
            { 1.0, -0.8649390284063034, 3.864939028406296, -3.864939028406296, -0.1350609715936956 } },
          { { -2.864939028406306, -1.0, 0.1350609715936943, -0.1350609715936943, 3.86493902840631 },
            { -2.322418772932531, -1.0, 0.6775812270674698, -0.6775812270674698, 3.322418772932534 },
            { -1.477238372166396, -1.0, 1.522761627833604, -1.522761627833604, 2.477238372166398 },
            { -0.5227616278336069, -1.0, 2.477238372166391, -2.477238372166391, 1.522761627833608 },
            { 0.3224187729325286, -1.0, 3.322418772932524, -3.322418772932524, 0.6775812270674717 },
            { 0.8649390284063031, -1.0, 3.864939028406296, -3.864939028406296, 0.1350609715936973 } },
          { { -2.864939028406305, -0.8649390284063081, 0.0, 0.0, 3.729878056812614 },
            { -2.322418772932529, -0.3224187729325324, 0.0, 0.0, 2.644837545865062 },
            { -1.477238372166393, 0.522761627833604, 0.0, 0.0, 0.9544767443327891 },
            { -0.5227616278336041, 1.477238372166393, 0.0, 0.0, -0.9544767443327888 },
            { 0.3224187729325312, 2.322418772932529, 0.0, 0.0, -2.64483754586506 },
            { 0.8649390284063053, 2.864939028406303, 0.0, 0.0, -3.729878056812609 } } };
    alignas(32) static const double FE32_C0_D11_F_Q6[1][1][4] = { { { 3.999999999999996, 3.999999999999997, -3.999999999999997, -4.000000000000003 } } };
    alignas(32) static const double FE7_C0_D01_F_Q6[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_r1_c0 = coordinate_dofs_1[0] * FE7_C0_D01_F_Q6[0][0][0] + coordinate_dofs_1[2] * FE7_C0_D01_F_Q6[0][0][1];
    const double J_r1_c3 = coordinate_dofs_1[1] * FE7_C0_D01_F_Q6[0][0][0] + coordinate_dofs_1[5] * FE7_C0_D01_F_Q6[0][0][1];
    const double J_r1_c1 = coordinate_dofs_1[0] * FE7_C0_D01_F_Q6[0][0][0] + coordinate_dofs_1[4] * FE7_C0_D01_F_Q6[0][0][1];
    const double J_r1_c2 = coordinate_dofs_1[1] * FE7_C0_D01_F_Q6[0][0][0] + coordinate_dofs_1[3] * FE7_C0_D01_F_Q6[0][0][1];
    const double J_r0_c0 = coordinate_dofs_0[0] * FE7_C0_D01_F_Q6[0][0][0] + coordinate_dofs_0[2] * FE7_C0_D01_F_Q6[0][0][1];
    const double J_r0_c3 = coordinate_dofs_0[1] * FE7_C0_D01_F_Q6[0][0][0] + coordinate_dofs_0[5] * FE7_C0_D01_F_Q6[0][0][1];
    const double J_r0_c1 = coordinate_dofs_0[0] * FE7_C0_D01_F_Q6[0][0][0] + coordinate_dofs_0[4] * FE7_C0_D01_F_Q6[0][0][1];
    const double J_r0_c2 = coordinate_dofs_0[1] * FE7_C0_D01_F_Q6[0][0][0] + coordinate_dofs_0[3] * FE7_C0_D01_F_Q6[0][0][1];
    const double w4_r0_d01 = w[4][0] * FE32_C0_D11_F_Q6[0][0][0] + w[4][3] * FE32_C0_D11_F_Q6[0][0][1] + w[4][4] * FE32_C0_D11_F_Q6[0][0][2] + w[4][5] * FE32_C0_D11_F_Q6[0][0][3];
    const double w4_r0_d00 = w[4][0] * FE32_C0_D02_F_Q6[0][0][0] + w[4][1] * FE32_C0_D02_F_Q6[0][0][1] + w[4][5] * FE32_C0_D02_F_Q6[0][0][2];
    const double w4_r0_d11 = w[4][0] * FE32_C0_D02_F_Q6[0][0][0] + w[4][2] * FE32_C0_D02_F_Q6[0][0][1] + w[4][4] * FE32_C0_D02_F_Q6[0][0][2];
    const double w4_r1_d01 = w[4][6] * FE32_C0_D11_F_Q6[0][0][0] + w[4][9] * FE32_C0_D11_F_Q6[0][0][1] + w[4][10] * FE32_C0_D11_F_Q6[0][0][2] + w[4][11] * FE32_C0_D11_F_Q6[0][0][3];
    const double w4_r1_d00 = w[4][6] * FE32_C0_D02_F_Q6[0][0][0] + w[4][7] * FE32_C0_D02_F_Q6[0][0][1] + w[4][11] * FE32_C0_D02_F_Q6[0][0][2];
    const double w4_r1_d11 = w[4][6] * FE32_C0_D02_F_Q6[0][0][0] + w[4][8] * FE32_C0_D02_F_Q6[0][0][1] + w[4][10] * FE32_C0_D02_F_Q6[0][0][2];
    alignas(32) double sp[190];
    sp[0] = J_r1_c0 * J_r1_c3;
    sp[1] = J_r1_c1 * J_r1_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_r1_c0 / sp[2];
    sp[4] = -1 * J_r1_c1 / sp[2];
    sp[5] = triangle_reference_facet_normals[facet_1][1] * sp[3];
    sp[6] = triangle_reference_facet_normals[facet_1][0] * sp[4];
    sp[7] = sp[5] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_r1_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet_1][0] * sp[9];
    sp[11] = -1 * J_r1_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet_1][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = J_r0_c0 * J_r0_c3;
    sp[20] = J_r0_c1 * J_r0_c2;
    sp[21] = sp[19] + -1 * sp[20];
    sp[22] = J_r0_c0 / sp[21];
    sp[23] = -1 * J_r0_c1 / sp[21];
    sp[24] = triangle_reference_facet_normals[facet_0][1] * sp[22];
    sp[25] = triangle_reference_facet_normals[facet_0][0] * sp[23];
    sp[26] = sp[24] + sp[25];
    sp[27] = sp[26] * sp[26];
    sp[28] = J_r0_c3 / sp[21];
    sp[29] = triangle_reference_facet_normals[facet_0][0] * sp[28];
    sp[30] = -1 * J_r0_c2 / sp[21];
    sp[31] = triangle_reference_facet_normals[facet_0][1] * sp[30];
    sp[32] = sp[29] + sp[31];
    sp[33] = sp[32] * sp[32];
    sp[34] = sp[27] + sp[33];
    sp[35] = std::sqrt(sp[34]);
    sp[36] = sp[26] / sp[35];
    sp[37] = sp[32] / sp[35];
    sp[38] = sp[22] * sp[28];
    sp[39] = sp[28] * sp[23];
    sp[40] = sp[23] * sp[30];
    sp[41] = sp[22] * sp[30];
    sp[42] = sp[38] + sp[40];
    sp[43] = sp[42] * w[2][0];
    sp[44] = sp[39] * w[2][0];
    sp[45] = sp[41] * w[2][0];
    sp[46] = sp[22] * sp[23];
    sp[47] = sp[22] * sp[22];
    sp[48] = sp[23] * sp[23];
    sp[49] = sp[46] + sp[46];
    sp[50] = sp[28] * sp[30];
    sp[51] = sp[28] * sp[28];
    sp[52] = sp[30] * sp[30];
    sp[53] = sp[50] + sp[50];
    sp[54] = sp[53] * w[2][0];
    sp[55] = sp[51] * w[2][0];
    sp[56] = sp[52] * w[2][0];
    sp[57] = sp[49] * w[2][0];
    sp[58] = sp[48] * w[2][0];
    sp[59] = sp[47] * w[2][0];
    sp[60] = sp[3] * sp[9];
    sp[61] = sp[9] * sp[4];
    sp[62] = sp[4] * sp[11];
    sp[63] = sp[3] * sp[11];
    sp[64] = sp[60] + sp[62];
    sp[65] = sp[64] * w[2][0];
    sp[66] = sp[61] * w[2][0];
    sp[67] = sp[63] * w[2][0];
    sp[68] = sp[3] * sp[4];
    sp[69] = sp[3] * sp[3];
    sp[70] = sp[4] * sp[4];
    sp[71] = sp[68] + sp[68];
    sp[72] = sp[9] * sp[11];
    sp[73] = sp[9] * sp[9];
    sp[74] = sp[11] * sp[11];
    sp[75] = sp[72] + sp[72];
    sp[76] = sp[75] * w[2][0];
    sp[77] = sp[73] * w[2][0];
    sp[78] = sp[74] * w[2][0];
    sp[79] = sp[71] * w[2][0];
    sp[80] = sp[70] * w[2][0];
    sp[81] = sp[69] * w[2][0];
    sp[82] = std::pow(w[2][0], 2) * w[0][0];
    sp[83] = sp[82] * w[1][0];
    sp[84] = sp[3] * sp[17];
    sp[85] = sp[4] * sp[17];
    sp[86] = sp[11] * sp[18];
    sp[87] = sp[9] * sp[18];
    sp[88] = sp[84] + sp[86];
    sp[89] = sp[85] + sp[87];
    sp[90] = sp[22] * sp[36];
    sp[91] = sp[23] * sp[36];
    sp[92] = sp[30] * sp[37];
    sp[93] = sp[28] * sp[37];
    sp[94] = sp[90] + sp[92];
    sp[95] = sp[91] + sp[93];
    sp[96] = w4_r0_d01 * sp[22];
    sp[97] = w4_r0_d00 * sp[23];
    sp[98] = sp[96] + sp[97];
    sp[99] = sp[98] * sp[28];
    sp[100] = w4_r0_d11 * sp[22];
    sp[101] = w4_r0_d01 * sp[23];
    sp[102] = sp[100] + sp[101];
    sp[103] = sp[102] * sp[30];
    sp[104] = sp[99] + sp[103];
    sp[105] = sp[104] * w[2][0];
    sp[106] = sp[102] * sp[22];
    sp[107] = sp[98] * sp[23];
    sp[108] = sp[106] + sp[107];
    sp[109] = w4_r0_d00 * sp[28];
    sp[110] = w4_r0_d01 * sp[30];
    sp[111] = sp[109] + sp[110];
    sp[112] = sp[111] * sp[28];
    sp[113] = w4_r0_d01 * sp[28];
    sp[114] = w4_r0_d11 * sp[30];
    sp[115] = sp[113] + sp[114];
    sp[116] = sp[115] * sp[30];
    sp[117] = sp[112] + sp[116];
    sp[118] = sp[117] * w[2][0];
    sp[119] = sp[108] * w[2][0];
    sp[120] = w4_r1_d01 * sp[3];
    sp[121] = w4_r1_d00 * sp[4];
    sp[122] = sp[120] + sp[121];
    sp[123] = sp[122] * sp[9];
    sp[124] = w4_r1_d11 * sp[3];
    sp[125] = w4_r1_d01 * sp[4];
    sp[126] = sp[124] + sp[125];
    sp[127] = sp[126] * sp[11];
    sp[128] = sp[123] + sp[127];
    sp[129] = sp[128] * w[2][0];
    sp[130] = sp[126] * sp[3];
    sp[131] = sp[122] * sp[4];
    sp[132] = sp[130] + sp[131];
    sp[133] = w4_r1_d00 * sp[9];
    sp[134] = w4_r1_d01 * sp[11];
    sp[135] = sp[133] + sp[134];
    sp[136] = sp[135] * sp[9];
    sp[137] = w4_r1_d01 * sp[9];
    sp[138] = w4_r1_d11 * sp[11];
    sp[139] = sp[137] + sp[138];
    sp[140] = sp[139] * sp[11];
    sp[141] = sp[136] + sp[140];
    sp[142] = sp[141] * w[2][0];
    sp[143] = sp[132] * w[2][0];
    sp[144] = (coordinate_dofs_0[2] - coordinate_dofs_0[4]) * (coordinate_dofs_0[2] - coordinate_dofs_0[4]);
    sp[145] = (coordinate_dofs_0[3] - coordinate_dofs_0[5]) * (coordinate_dofs_0[3] - coordinate_dofs_0[5]);
    sp[146] = sp[144] + sp[145];
    sp[147] = std::sqrt(sp[146]);
    sp[148] = (coordinate_dofs_0[0] - coordinate_dofs_0[4]) * (coordinate_dofs_0[0] - coordinate_dofs_0[4]);
    sp[149] = (coordinate_dofs_0[1] - coordinate_dofs_0[5]) * (coordinate_dofs_0[1] - coordinate_dofs_0[5]);
    sp[150] = sp[148] + sp[149];
    sp[151] = std::sqrt(sp[150]);
    sp[152] = sp[147] * sp[151];
    sp[153] = (coordinate_dofs_0[0] - coordinate_dofs_0[2]) * (coordinate_dofs_0[0] - coordinate_dofs_0[2]);
    sp[154] = (coordinate_dofs_0[1] - coordinate_dofs_0[3]) * (coordinate_dofs_0[1] - coordinate_dofs_0[3]);
    sp[155] = sp[153] + sp[154];
    sp[156] = std::sqrt(sp[155]);
    sp[157] = sp[152] * sp[156];
    sp[158] = triangle_reference_cell_volume * sp[21];
    sp[159] = std::abs(sp[158]);
    sp[160] = sp[157] / (4.0 * sp[159]);
    sp[161] = (coordinate_dofs_1[2] - coordinate_dofs_1[4]) * (coordinate_dofs_1[2] - coordinate_dofs_1[4]);
    sp[162] = (coordinate_dofs_1[3] - coordinate_dofs_1[5]) * (coordinate_dofs_1[3] - coordinate_dofs_1[5]);
    sp[163] = sp[161] + sp[162];
    sp[164] = std::sqrt(sp[163]);
    sp[165] = (coordinate_dofs_1[0] - coordinate_dofs_1[4]) * (coordinate_dofs_1[0] - coordinate_dofs_1[4]);
    sp[166] = (coordinate_dofs_1[1] - coordinate_dofs_1[5]) * (coordinate_dofs_1[1] - coordinate_dofs_1[5]);
    sp[167] = sp[165] + sp[166];
    sp[168] = std::sqrt(sp[167]);
    sp[169] = sp[164] * sp[168];
    sp[170] = (coordinate_dofs_1[0] - coordinate_dofs_1[2]) * (coordinate_dofs_1[0] - coordinate_dofs_1[2]);
    sp[171] = (coordinate_dofs_1[1] - coordinate_dofs_1[3]) * (coordinate_dofs_1[1] - coordinate_dofs_1[3]);
    sp[172] = sp[170] + sp[171];
    sp[173] = std::sqrt(sp[172]);
    sp[174] = sp[169] * sp[173];
    sp[175] = triangle_reference_cell_volume * sp[2];
    sp[176] = std::abs(sp[175]);
    sp[177] = sp[174] / (4.0 * sp[176]);
    sp[178] = 2.0 * sp[160] + 2.0 * sp[177];
    sp[179] = w[3][0] / (sp[178] / 2);
    sp[180] = J_r0_c0 * triangle_reference_facet_jacobian[facet_0][0][0];
    sp[181] = J_r0_c1 * triangle_reference_facet_jacobian[facet_0][1][0];
    sp[182] = sp[180] + sp[181];
    sp[183] = sp[182] * sp[182];
    sp[184] = triangle_reference_facet_jacobian[facet_0][0][0] * J_r0_c2;
    sp[185] = triangle_reference_facet_jacobian[facet_0][1][0] * J_r0_c3;
    sp[186] = sp[184] + sp[185];
    sp[187] = sp[186] * sp[186];
    sp[188] = sp[183] + sp[187];
    sp[189] = std::sqrt(sp[188]);
    alignas(32) double BF0[5] = {};
    alignas(32) double BF1[3] = {};
    alignas(32) double BF2[5] = {};
    alignas(32) double BF3[3] = {};
    alignas(32) double BF4[4] = {};
    alignas(32) double BF5[5] = {};
    alignas(32) double BF6[3] = {};
    alignas(32) double BF7[5] = {};
    alignas(32) double BF8[3] = {};
    alignas(32) double BF9[4] = {};
    for (int iq = 0; iq < 6; ++iq)
    {
        // Quadrature loop body setup (num_points=6)
        // Unstructured varying computations for num_points=6
        const double w4_r1_d1 = w[4][6] * FE32_C0_D01_F_Q6[facet_1][iq][0] + w[4][8] * FE32_C0_D01_F_Q6[facet_1][iq][1] + w[4][9] * FE32_C0_D01_F_Q6[facet_1][iq][2] + w[4][10] * FE32_C0_D01_F_Q6[facet_1][iq][3] + w[4][11] * FE32_C0_D01_F_Q6[facet_1][iq][4];
        const double w4_r1_d0 = w[4][6] * FE32_C0_D10_F_Q6[facet_1][iq][0] + w[4][7] * FE32_C0_D10_F_Q6[facet_1][iq][1] + w[4][9] * FE32_C0_D10_F_Q6[facet_1][iq][2] + w[4][10] * FE32_C0_D10_F_Q6[facet_1][iq][3] + w[4][11] * FE32_C0_D10_F_Q6[facet_1][iq][4];
        const double w4_r0_d1 = w[4][0] * FE32_C0_D01_F_Q6[facet_0][iq][0] + w[4][2] * FE32_C0_D01_F_Q6[facet_0][iq][1] + w[4][3] * FE32_C0_D01_F_Q6[facet_0][iq][2] + w[4][4] * FE32_C0_D01_F_Q6[facet_0][iq][3] + w[4][5] * FE32_C0_D01_F_Q6[facet_0][iq][4];
        const double w4_r0_d0 = w[4][0] * FE32_C0_D10_F_Q6[facet_0][iq][0] + w[4][1] * FE32_C0_D10_F_Q6[facet_0][iq][1] + w[4][3] * FE32_C0_D10_F_Q6[facet_0][iq][2] + w[4][4] * FE32_C0_D10_F_Q6[facet_0][iq][3] + w[4][5] * FE32_C0_D10_F_Q6[facet_0][iq][4];
        alignas(32) double sv6[298];
        sv6[0] = w4_r1_d1 * sp[3];
        sv6[1] = w4_r1_d0 * sp[4];
        sv6[2] = sv6[0] + sv6[1];
        sv6[3] = sv6[2] * sp[17];
        sv6[4] = w4_r1_d0 * sp[9];
        sv6[5] = w4_r1_d1 * sp[11];
        sv6[6] = sv6[4] + sv6[5];
        sv6[7] = sv6[6] * sp[18];
        sv6[8] = sv6[3] + sv6[7];
        sv6[9] = sv6[2] * sv6[2];
        sv6[10] = sv6[6] * sv6[6];
        sv6[11] = sv6[9] + sv6[10];
        sv6[12] = sv6[11] + w[2][0];
        sv6[13] = sv6[8] * std::pow(sv6[12], -0.25);
        sv6[14] = w4_r0_d1 * sp[22];
        sv6[15] = w4_r0_d0 * sp[23];
        sv6[16] = sv6[14] + sv6[15];
        sv6[17] = sv6[16] * sp[36];
        sv6[18] = w4_r0_d0 * sp[28];
        sv6[19] = w4_r0_d1 * sp[30];
        sv6[20] = sv6[18] + sv6[19];
        sv6[21] = sv6[20] * sp[37];
        sv6[22] = sv6[17] + sv6[21];
        sv6[23] = sv6[16] * sv6[16];
        sv6[24] = sv6[20] * sv6[20];
        sv6[25] = sv6[23] + sv6[24];
        sv6[26] = sv6[25] + w[2][0];
        sv6[27] = sv6[22] * std::pow(sv6[26], -0.25);
        sv6[28] = -1 * sv6[13] + sv6[27];
        sv6[29] = sp[42] * sv6[23];
        sv6[30] = sv6[23] * sp[39];
        sv6[31] = sv6[23] * sp[41];
        sv6[32] = sv6[29] + sp[43];
        sv6[33] = sv6[30] + sp[44];
        sv6[34] = sv6[31] + sp[45];
        sv6[35] = sv6[16] * sv6[20];
        sv6[36] = sp[49] * sv6[35];
        sv6[37] = sv6[35] * sp[48];
        sv6[38] = sv6[35] * sp[47];
        sv6[39] = sv6[32] + -1 * sv6[36];
        sv6[40] = sv6[33] + -1 * sv6[37];
        sv6[41] = sv6[34] + -1 * sv6[38];
        sv6[42] = sv6[39] * sp[37];
        sv6[43] = sv6[40] * sp[37];
        sv6[44] = sv6[41] * sp[37];
        sv6[45] = sv6[42] * sp[36];
        sv6[46] = sv6[43] * sp[36];
        sv6[47] = sv6[44] * sp[36];
        sv6[48] = sp[53] * sv6[23];
        sv6[49] = sv6[23] * sp[51];
        sv6[50] = sv6[23] * sp[52];
        sv6[51] = sv6[48] + sp[54];
        sv6[52] = sv6[49] + sp[55];
        sv6[53] = sv6[50] + sp[56];
        sv6[54] = sp[42] * sv6[35];
        sv6[55] = sv6[35] * sp[39];
        sv6[56] = sv6[35] * sp[41];
        sv6[57] = sv6[51] + -1 * sv6[54];
        sv6[58] = sv6[52] + -1 * sv6[55];
        sv6[59] = sv6[53] + -1 * sv6[56];
        sv6[60] = sv6[57] * sp[37];
        sv6[61] = sv6[58] * sp[37];
        sv6[62] = sv6[59] * sp[37];
        sv6[63] = sv6[60] * sp[37];
        sv6[64] = sv6[61] * sp[37];
        sv6[65] = sv6[62] * sp[37];
        sv6[66] = sv6[45] + sv6[63];
        sv6[67] = sv6[46] + sv6[64];
        sv6[68] = sv6[47] + sv6[65];
        sv6[69] = sp[42] * sv6[24];
        sv6[70] = sv6[24] * sp[39];
        sv6[71] = sv6[24] * sp[41];
        sv6[72] = sv6[69] + sp[43];
        sv6[73] = sv6[70] + sp[44];
        sv6[74] = sv6[71] + sp[45];
        sv6[75] = sp[53] * sv6[35];
        sv6[76] = sv6[35] * sp[51];
        sv6[77] = sv6[35] * sp[52];
        sv6[78] = sv6[72] + -1 * sv6[75];
        sv6[79] = sv6[73] + -1 * sv6[76];
        sv6[80] = sv6[74] + -1 * sv6[77];
        sv6[81] = sv6[78] * sp[37];
        sv6[82] = sv6[79] * sp[37];
        sv6[83] = sv6[80] * sp[37];
        sv6[84] = sv6[81] * sp[36];
        sv6[85] = sv6[82] * sp[36];
        sv6[86] = sv6[83] * sp[36];
        sv6[87] = sv6[66] + sv6[84];
        sv6[88] = sv6[67] + sv6[85];
        sv6[89] = sv6[68] + sv6[86];
        sv6[90] = sp[49] * sv6[24];
        sv6[91] = sv6[24] * sp[48];
        sv6[92] = sv6[24] * sp[47];
        sv6[93] = sv6[90] + sp[57];
        sv6[94] = sv6[91] + sp[58];
        sv6[95] = sv6[92] + sp[59];
        sv6[96] = sv6[93] + -1 * sv6[54];
        sv6[97] = sv6[94] + -1 * sv6[55];
        sv6[98] = sv6[95] + -1 * sv6[56];
        sv6[99] = sv6[96] * sp[36];
        sv6[100] = sv6[97] * sp[36];
        sv6[101] = sv6[98] * sp[36];
        sv6[102] = sv6[99] * sp[36];
        sv6[103] = sv6[100] * sp[36];
        sv6[104] = sv6[101] * sp[36];
        sv6[105] = sv6[87] + sv6[102];
        sv6[106] = sv6[88] + sv6[103];
        sv6[107] = sv6[89] + sv6[104];
        sv6[108] = sv6[105] * std::pow(sv6[26], -1.25);
        sv6[109] = sv6[106] * std::pow(sv6[26], -1.25);
        sv6[110] = sv6[107] * std::pow(sv6[26], -1.25);
        sv6[111] = sp[64] * sv6[9];
        sv6[112] = sv6[9] * sp[61];
        sv6[113] = sv6[9] * sp[63];
        sv6[114] = sv6[111] + sp[65];
        sv6[115] = sv6[112] + sp[66];
        sv6[116] = sv6[113] + sp[67];
        sv6[117] = sv6[2] * sv6[6];
        sv6[118] = sp[71] * sv6[117];
        sv6[119] = sv6[117] * sp[70];
        sv6[120] = sv6[117] * sp[69];
        sv6[121] = sv6[114] + -1 * sv6[118];
        sv6[122] = sv6[115] + -1 * sv6[119];
        sv6[123] = sv6[116] + -1 * sv6[120];
        sv6[124] = sv6[121] * sp[18];
        sv6[125] = sv6[122] * sp[18];
        sv6[126] = sv6[123] * sp[18];
        sv6[127] = sv6[124] * sp[17];
        sv6[128] = sv6[125] * sp[17];
        sv6[129] = sv6[126] * sp[17];
        sv6[130] = sp[75] * sv6[9];
        sv6[131] = sv6[9] * sp[73];
        sv6[132] = sv6[9] * sp[74];
        sv6[133] = sv6[130] + sp[76];
        sv6[134] = sv6[131] + sp[77];
        sv6[135] = sv6[132] + sp[78];
        sv6[136] = sp[64] * sv6[117];
        sv6[137] = sv6[117] * sp[61];
        sv6[138] = sv6[117] * sp[63];
        sv6[139] = sv6[133] + -1 * sv6[136];
        sv6[140] = sv6[134] + -1 * sv6[137];
        sv6[141] = sv6[135] + -1 * sv6[138];
        sv6[142] = sv6[139] * sp[18];
        sv6[143] = sv6[140] * sp[18];
        sv6[144] = sv6[141] * sp[18];
        sv6[145] = sv6[142] * sp[18];
        sv6[146] = sv6[143] * sp[18];
        sv6[147] = sv6[144] * sp[18];
        sv6[148] = sv6[127] + sv6[145];
        sv6[149] = sv6[128] + sv6[146];
        sv6[150] = sv6[129] + sv6[147];
        sv6[151] = sp[64] * sv6[10];
        sv6[152] = sv6[10] * sp[61];
        sv6[153] = sv6[10] * sp[63];
        sv6[154] = sv6[151] + sp[65];
        sv6[155] = sv6[152] + sp[66];
        sv6[156] = sv6[153] + sp[67];
        sv6[157] = sp[75] * sv6[117];
        sv6[158] = sv6[117] * sp[73];
        sv6[159] = sv6[117] * sp[74];
        sv6[160] = sv6[154] + -1 * sv6[157];
        sv6[161] = sv6[155] + -1 * sv6[158];
        sv6[162] = sv6[156] + -1 * sv6[159];
        sv6[163] = sv6[160] * sp[18];
        sv6[164] = sv6[161] * sp[18];
        sv6[165] = sv6[162] * sp[18];
        sv6[166] = sv6[163] * sp[17];
        sv6[167] = sv6[164] * sp[17];
        sv6[168] = sv6[165] * sp[17];
        sv6[169] = sv6[148] + sv6[166];
        sv6[170] = sv6[149] + sv6[167];
        sv6[171] = sv6[150] + sv6[168];
        sv6[172] = sp[71] * sv6[10];
        sv6[173] = sv6[10] * sp[70];
        sv6[174] = sv6[10] * sp[69];
        sv6[175] = sv6[172] + sp[79];
        sv6[176] = sv6[173] + sp[80];
        sv6[177] = sv6[174] + sp[81];
        sv6[178] = sv6[175] + -1 * sv6[136];
        sv6[179] = sv6[176] + -1 * sv6[137];
        sv6[180] = sv6[177] + -1 * sv6[138];
        sv6[181] = sv6[178] * sp[17];
        sv6[182] = sv6[179] * sp[17];
        sv6[183] = sv6[180] * sp[17];
        sv6[184] = sv6[181] * sp[17];
        sv6[185] = sv6[182] * sp[17];
        sv6[186] = sv6[183] * sp[17];
        sv6[187] = sv6[169] + sv6[184];
        sv6[188] = sv6[170] + sv6[185];
        sv6[189] = sv6[171] + sv6[186];
        sv6[190] = sv6[187] * std::pow(sv6[12], -1.25);
        sv6[191] = sv6[188] * std::pow(sv6[12], -1.25);
        sv6[192] = sv6[189] * std::pow(sv6[12], -1.25);
        sv6[193] = sv6[28] * (0.5 * sv6[108]);
        sv6[194] = sv6[28] * (0.5 * sv6[109]);
        sv6[195] = sv6[28] * (0.5 * sv6[110]);
        sv6[196] = sv6[28] * (0.5 * sv6[190]);
        sv6[197] = sv6[28] * (0.5 * sv6[191]);
        sv6[198] = sv6[28] * (0.5 * sv6[192]);
        sv6[199] = -1 * sv6[193] * sp[83];
        sv6[200] = -1 * sv6[194] * sp[83];
        sv6[201] = -1 * sv6[195] * sp[83];
        sv6[202] = -1 * sv6[196] * sp[83];
        sv6[203] = -1 * sv6[197] * sp[83];
        sv6[204] = -1 * sv6[198] * sp[83];
        sv6[205] = sp[88] * std::pow(sv6[12], -0.25);
        sv6[206] = sp[89] * std::pow(sv6[12], -0.25);
        sv6[207] = sp[94] * std::pow(sv6[26], -0.25);
        sv6[208] = sp[95] * std::pow(sv6[26], -0.25);
        sv6[209] = sp[104] * sv6[23];
        sv6[210] = sv6[209] + sp[105];
        sv6[211] = sp[108] * sv6[35];
        sv6[212] = sv6[210] + -1 * sv6[211];
        sv6[213] = sv6[212] * sp[37];
        sv6[214] = sv6[213] * sp[36];
        sv6[215] = sp[117] * sv6[23];
        sv6[216] = sv6[215] + sp[118];
        sv6[217] = sp[104] * sv6[35];
        sv6[218] = sv6[216] + -1 * sv6[217];
        sv6[219] = sv6[218] * sp[37];
        sv6[220] = sv6[219] * sp[37];
        sv6[221] = sv6[214] + sv6[220];
        sv6[222] = sp[104] * sv6[24];
        sv6[223] = sv6[222] + sp[105];
        sv6[224] = sp[117] * sv6[35];
        sv6[225] = sv6[223] + -1 * sv6[224];
        sv6[226] = sv6[225] * sp[37];
        sv6[227] = sv6[226] * sp[36];
        sv6[228] = sv6[221] + sv6[227];
        sv6[229] = sp[108] * sv6[24];
        sv6[230] = sv6[229] + sp[119];
        sv6[231] = sv6[230] + -1 * sv6[217];
        sv6[232] = sv6[231] * sp[36];
        sv6[233] = sv6[232] * sp[36];
        sv6[234] = sv6[228] + sv6[233];
        sv6[235] = sv6[234] * std::pow(sv6[26], -1.25);
        sv6[236] = sp[128] * sv6[9];
        sv6[237] = sv6[236] + sp[129];
        sv6[238] = sp[132] * sv6[117];
        sv6[239] = sv6[237] + -1 * sv6[238];
        sv6[240] = sv6[239] * sp[18];
        sv6[241] = sv6[240] * sp[17];
        sv6[242] = sp[141] * sv6[9];
        sv6[243] = sv6[242] + sp[142];
        sv6[244] = sp[128] * sv6[117];
        sv6[245] = sv6[243] + -1 * sv6[244];
        sv6[246] = sv6[245] * sp[18];
        sv6[247] = sv6[246] * sp[18];
        sv6[248] = sv6[241] + sv6[247];
        sv6[249] = sp[128] * sv6[10];
        sv6[250] = sv6[249] + sp[129];
        sv6[251] = sp[141] * sv6[117];
        sv6[252] = sv6[250] + -1 * sv6[251];
        sv6[253] = sv6[252] * sp[18];
        sv6[254] = sv6[253] * sp[17];
        sv6[255] = sv6[248] + sv6[254];
        sv6[256] = sp[132] * sv6[10];
        sv6[257] = sv6[256] + sp[143];
        sv6[258] = sv6[257] + -1 * sv6[244];
        sv6[259] = sv6[258] * sp[17];
        sv6[260] = sv6[259] * sp[17];
        sv6[261] = sv6[255] + sv6[260];
        sv6[262] = sv6[261] * std::pow(sv6[12], -1.25);
        sv6[263] = sv6[235] + sv6[262];
        sv6[264] = 0.5 * sv6[263] * (-1 * sv6[205]);
        sv6[265] = 0.5 * sv6[263] * (-1 * sv6[206]);
        sv6[266] = 0.5 * sv6[263] * sv6[207];
        sv6[267] = 0.5 * sv6[263] * sv6[208];
        sv6[268] = -1 * sv6[264] * sp[83];
        sv6[269] = -1 * sv6[265] * sp[83];
        sv6[270] = -1 * sv6[266] * sp[83];
        sv6[271] = -1 * sv6[267] * sp[83];
        sv6[272] = sv6[28] * (-1 * sv6[205]);
        sv6[273] = sv6[28] * (-1 * sv6[206]);
        sv6[274] = sv6[28] * sv6[207];
        sv6[275] = sv6[28] * sv6[208];
        sv6[276] = sv6[272] * sp[179];
        sv6[277] = sv6[273] * sp[179];
        sv6[278] = sv6[274] * sp[179];
        sv6[279] = sv6[275] * sp[179];
        sv6[280] = sv6[276] * sp[83];
        sv6[281] = sv6[277] * sp[83];
        sv6[282] = sv6[278] * sp[83];
        sv6[283] = sv6[279] * sp[83];
        sv6[284] = sv6[268] + sv6[280];
        sv6[285] = sv6[269] + sv6[281];
        sv6[286] = sv6[270] + sv6[282];
        sv6[287] = sv6[271] + sv6[283];
        sv6[288] = sv6[199] * sp[189];
        sv6[289] = sv6[200] * sp[189];
        sv6[290] = sv6[201] * sp[189];
        sv6[291] = sv6[202] * sp[189];
        sv6[292] = sv6[203] * sp[189];
        sv6[293] = sv6[204] * sp[189];
        sv6[294] = sv6[284] * sp[189];
        sv6[295] = sv6[285] * sp[189];
        sv6[296] = sv6[286] * sp[189];
        sv6[297] = sv6[287] * sp[189];
        const double fw0 = sv6[297] * weights6[iq];
        for (int i = 0; i < 5; ++i)
            BF0[i] += fw0 * FE32_C0_D10_F_Q6[facet_0][iq][i];
        const double fw1 = sv6[289] * weights6[iq];
        for (int i = 0; i < 3; ++i)
            BF1[i] += fw1 * FE32_C0_D02_F_Q6[0][0][i];
        const double fw2 = sv6[296] * weights6[iq];
        for (int i = 0; i < 5; ++i)
            BF2[i] += fw2 * FE32_C0_D01_F_Q6[facet_0][iq][i];
        const double fw3 = sv6[290] * weights6[iq];
        for (int i = 0; i < 3; ++i)
            BF3[i] += fw3 * FE32_C0_D02_F_Q6[0][0][i];
        const double fw4 = sv6[288] * weights6[iq];
        for (int i = 0; i < 4; ++i)
            BF4[i] += fw4 * FE32_C0_D11_F_Q6[0][0][i];
        const double fw5 = sv6[295] * weights6[iq];
        for (int i = 0; i < 5; ++i)
            BF5[i] += fw5 * FE32_C0_D10_F_Q6[facet_1][iq][i];
        const double fw6 = sv6[292] * weights6[iq];
        for (int i = 0; i < 3; ++i)
            BF6[i] += fw6 * FE32_C0_D02_F_Q6[0][0][i];
        const double fw7 = sv6[294] * weights6[iq];
        for (int i = 0; i < 5; ++i)
            BF7[i] += fw7 * FE32_C0_D01_F_Q6[facet_1][iq][i];
        const double fw8 = sv6[293] * weights6[iq];
        for (int i = 0; i < 3; ++i)
            BF8[i] += fw8 * FE32_C0_D02_F_Q6[0][0][i];
        const double fw9 = sv6[291] * weights6[iq];
        for (int i = 0; i < 4; ++i)
            BF9[i] += fw9 * FE32_C0_D11_F_Q6[0][0][i];
    }
    std::fill(A, A + 12, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[3] = { 0, 1, 5 };
    static const int DM2[5] = { 0, 2, 3, 4, 5 };
    static const int DM3[3] = { 0, 2, 4 };
    static const int DM4[4] = { 0, 3, 4, 5 };
    static const int DM5[5] = { 6, 7, 9, 10, 11 };
    static const int DM6[3] = { 6, 7, 11 };
    static const int DM7[5] = { 6, 8, 9, 10, 11 };
    static const int DM8[3] = { 6, 8, 10 };
    static const int DM9[4] = { 6, 9, 10, 11 };
    for (int i = 0; i < 5; ++i)
        A[DM0[i]] += BF0[i];
    for (int i = 0; i < 3; ++i)
        A[DM1[i]] += BF1[i];
    for (int i = 0; i < 5; ++i)
        A[DM2[i]] += BF2[i];
    for (int i = 0; i < 3; ++i)
        A[DM3[i]] += BF3[i];
    for (int i = 0; i < 4; ++i)
        A[DM4[i]] += BF4[i];
    for (int i = 0; i < 5; ++i)
        A[DM5[i]] += BF5[i];
    for (int i = 0; i < 3; ++i)
        A[DM6[i]] += BF6[i];
    for (int i = 0; i < 5; ++i)
        A[DM7[i]] += BF7[i];
    for (int i = 0; i < 3; ++i)
        A[DM8[i]] += BF8[i];
    for (int i = 0; i < 4; ++i)
        A[DM9[i]] += BF9[i];
  }

};


class tvf4_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  tvf4_cell_integral_1_otherwise() : ufc::cell_integral()
  {

  }

  ~tvf4_cell_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, false, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 8
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 8
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           8
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights25[25] = { 0.01146508035159253, 0.01980408313204737, 0.0173415064313657, 0.008755499182163834, 0.001865552166877836, 0.02316122192949835, 0.04000728738616045, 0.03503250450337171, 0.01768745211048347, 0.003768701695327616, 0.02752898566446977, 0.04755189705795404, 0.04163896521519497, 0.02102296748732208, 0.004479406797281353, 0.02316122192949835, 0.04000728738616045, 0.03503250450337171, 0.01768745211048347, 0.003768701695327616, 0.01146508035159253, 0.01980408313204737, 0.0173415064313657, 0.008755499182163834, 0.001865552166877837 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE22_C0_D01_Q25[1][25][5] =
        { { { -2.660590197514914, -0.8407605717941249, 0.1801703742792053, 3.501350769309042, -0.1801703742792131 },
            { -2.057461319125127, -0.2079463285055665, 0.1504850093804347, 2.265407647630697, -0.150485009380444 },
            { -1.142642179232577, 0.7518992409895462, 0.1054585797778723, 0.3907429382430352, -0.1054585797778832 },
            { -0.1609997290031756, 1.781857093414546, 0.05714317758227239, -1.620857364411365, -0.0571431775822841 },
            { 0.6243488106648749, 2.605859656804697, 0.01848915386017014, -3.230208467469566, -0.01848915386018257 },
            { -1.954446133584613, -0.840760571794125, 0.8863144382095063, 2.795206705378741, -0.8863144382095163 },
            { -1.467663487436015, -0.207946328505566, 0.7402828410695467, 1.675609815941585, -0.7402828410695574 },
            { -0.7293170118814442, 0.7518992409895464, 0.5187837471290044, -0.02258222910809696, -0.5187837471290165 },
            { 0.06296226144766576, 1.781857093414546, 0.2811051680331134, -1.844819354862206, -0.2811051680331258 },
            { 0.6968135890597453, 2.605859656804697, 0.09095393225504056, -3.302673245864436, -0.0909539322550531 },
            { -0.9203802858970667, -0.8407605717941249, 1.920380285897051, 1.761140857691197, -1.920380285897064 },
            { -0.6039731642527881, -0.2079463285055659, 1.603973164252772, 0.8119194927583602, -1.603973164252785 },
            { -0.1240503795052328, 0.7518992409895465, 1.124050379505215, -0.6278488614843074, -1.124050379505228 },
            { 0.3909285467072669, 1.781857093414546, 0.6090714532927137, -2.172785640121807, -0.609071453292727 },
            { 0.8029298284023421, 2.605859656804697, 0.1970701715976371, -3.408789485207033, -0.1970701715976499 },
            { 0.1136855617904787, -0.8407605717941248, 2.954446133584595, 0.7270750100036528, -2.95444613358461 },
            { 0.2597171589304373, -0.207946328505566, 2.467663487435996, -0.05177083042486419, -2.467663487436011 },
            { 0.4812162528709782, 0.7518992409895466, 1.729317011881424, -1.233115493860517, -1.72931701188144 },
            { 0.7188948319668677, 1.781857093414546, 0.9370377385523134, -2.500751925381407, -0.9370377385523281 },
            { 0.9090460677449387, 2.605859656804696, 0.303186410940234, -3.514905724549629, -0.3031864109402467 },
            { 0.8198296257207802, -0.8407605717941251, 3.660590197514896, 0.02093094607335177, -3.660590197514911 },
            { 0.84951499061955, -0.2079463285055662, 3.057461319125108, -0.6415686621139763, -3.057461319125124 },
            { 0.8945414202221108, 0.7518992409895466, 2.142642179232557, -1.64644066121165, -2.142642179232572 },
            { 0.942856822417709, 1.781857093414546, 1.160999729003154, -2.724713915832248, -1.16099972900317 },
            { 0.9815108461398092, 2.605859656804696, 0.375651189335104, -3.587370502944499, -0.3756511893351173 } } };
    alignas(32) static const double FE22_C0_D02_Q25[1][1][3] = { { { 3.999999999999996, 4.000000000000002, -7.999999999999992 } } };
    alignas(32) static const double FE22_C0_D10_Q25[1][25][5] =
        { { { -2.660590197514911, -0.8198296257207884, 0.1592394282058733, -0.1592394282058733, 3.4804198232357 },
            { -2.057461319125123, -0.8495149906195576, 0.7920536714944317, -0.7920536714944317, 2.906976309744681 },
            { -1.142642179232573, -0.8945414202221175, 1.751899240989543, -1.751899240989543, 2.037183599454691 },
            { -0.1609997290031708, -0.9428568224177148, 2.781857093414541, -2.781857093414541, 1.103856551420886 },
            { 0.6243488106648796, -0.9815108461398143, 3.605859656804688, -3.605859656804688, 0.3571620354749353 },
            { -1.954446133584608, -0.1136855617904856, 0.1592394282058733, -0.1592394282058733, 2.068131695375094 },
            { -1.46766348743601, -0.2597171589304441, 0.7920536714944316, -0.7920536714944316, 1.727380646366454 },
            { -0.7293170118814392, -0.4812162528709841, 1.751899240989543, -1.751899240989543, 1.210533264752424 },
            { 0.0629622614476707, -0.7188948319668733, 2.781857093414541, -2.781857093414541, 0.655932570519203 },
            { 0.69681358905975, -0.909046067744944, 3.605859656804688, -3.605859656804688, 0.2122324786851943 },
            { -0.9203802858970611, 0.9203802858970616, 0.1592394282058733, -0.1592394282058733, 0.0 },
            { -0.6039731642527825, 0.6039731642527829, 0.7920536714944315, -0.7920536714944315, 0.0 },
            { -0.1240503795052273, 0.1240503795052276, 1.751899240989543, -1.751899240989543, 0.0 },
            { 0.3909285467072722, -0.3909285467072721, 2.781857093414541, -2.781857093414541, 0.0 },
            { 0.8029298284023468, -0.8029298284023472, 3.605859656804688, -3.605859656804688, 0.0 },
            { 0.1136855617904848, 1.954446133584608, 0.1592394282058736, -0.1592394282058736, -2.068131695375092 },
            { 0.2597171589304435, 1.467663487436009, 0.7920536714944316, -0.7920536714944316, -1.727380646366452 },
            { 0.4812162528709842, 0.729317011881439, 1.751899240989542, -1.751899240989542, -1.210533264752423 },
            { 0.7188948319668731, -0.06296226144767125, 2.781857093414541, -2.781857093414541, -0.6559325705192016 },
            { 0.9090460677449435, -0.6968135890597502, 3.605859656804688, -3.605859656804688, -0.2122324786851928 },
            { 0.8198296257207867, 2.66059019751491, 0.159239428205874, -0.159239428205874, -3.480419823235696 },
            { 0.8495149906195565, 2.057461319125122, 0.7920536714944317, -0.7920536714944317, -2.906976309744679 },
            { 0.8945414202221168, 1.142642179232572, 1.751899240989543, -1.751899240989543, -2.037183599454688 },
            { 0.9428568224177144, 0.1609997290031701, 2.781857093414541, -2.781857093414541, -1.103856551420884 },
            { 0.9815108461398141, -0.6243488106648798, 3.605859656804688, -3.605859656804688, -0.3571620354749339 } } };
    alignas(32) static const double FE22_C0_D11_Q25[1][1][4] = { { { 4.000000000000001, 3.999999999999999, -3.999999999999999, -4.000000000000012 } } };
    alignas(32) static const double FE3_C0_D01_Q25[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double w4_d01 = w[4][0] * FE22_C0_D11_Q25[0][0][0] + w[4][3] * FE22_C0_D11_Q25[0][0][1] + w[4][4] * FE22_C0_D11_Q25[0][0][2] + w[4][5] * FE22_C0_D11_Q25[0][0][3];
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q25[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q25[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q25[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q25[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q25[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q25[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q25[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q25[0][0][1];
    const double w4_d00 = w[4][0] * FE22_C0_D02_Q25[0][0][0] + w[4][1] * FE22_C0_D02_Q25[0][0][1] + w[4][5] * FE22_C0_D02_Q25[0][0][2];
    const double w4_d11 = w[4][0] * FE22_C0_D02_Q25[0][0][0] + w[4][2] * FE22_C0_D02_Q25[0][0][1] + w[4][4] * FE22_C0_D02_Q25[0][0][2];
    alignas(32) double sp[56];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = w4_d01 * sp[3];
    sp[5] = -1 * J_c1 / sp[2];
    sp[6] = w4_d00 * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = J_c3 / sp[2];
    sp[9] = sp[7] * sp[8];
    sp[10] = w4_d11 * sp[3];
    sp[11] = w4_d01 * sp[5];
    sp[12] = sp[10] + sp[11];
    sp[13] = -1 * J_c2 / sp[2];
    sp[14] = sp[12] * sp[13];
    sp[15] = sp[9] + sp[14];
    sp[16] = sp[15] * w[2][0];
    sp[17] = sp[12] * sp[3];
    sp[18] = sp[7] * sp[5];
    sp[19] = sp[17] + sp[18];
    sp[20] = sp[3] * sp[8];
    sp[21] = sp[8] * sp[5];
    sp[22] = sp[5] * sp[13];
    sp[23] = sp[3] * sp[13];
    sp[24] = sp[20] + sp[22];
    sp[25] = w4_d00 * sp[8];
    sp[26] = w4_d01 * sp[13];
    sp[27] = sp[25] + sp[26];
    sp[28] = sp[27] * sp[8];
    sp[29] = w4_d01 * sp[8];
    sp[30] = w4_d11 * sp[13];
    sp[31] = sp[29] + sp[30];
    sp[32] = sp[31] * sp[13];
    sp[33] = sp[28] + sp[32];
    sp[34] = sp[33] * w[2][0];
    sp[35] = sp[8] * sp[13];
    sp[36] = sp[8] * sp[8];
    sp[37] = sp[13] * sp[13];
    sp[38] = sp[35] + sp[35];
    sp[39] = sp[19] * w[2][0];
    sp[40] = sp[3] * sp[5];
    sp[41] = sp[3] * sp[3];
    sp[42] = sp[5] * sp[5];
    sp[43] = sp[40] + sp[40];
    sp[44] = sp[24] * w[2][0];
    sp[45] = sp[21] * w[2][0];
    sp[46] = sp[23] * w[2][0];
    sp[47] = sp[38] * w[2][0];
    sp[48] = sp[36] * w[2][0];
    sp[49] = sp[37] * w[2][0];
    sp[50] = sp[43] * w[2][0];
    sp[51] = sp[42] * w[2][0];
    sp[52] = sp[41] * w[2][0];
    sp[53] = std::pow(w[2][0], 2) * w[0][0];
    sp[54] = sp[53] * w[1][0];
    sp[55] = std::abs(sp[2]);
    alignas(32) double TP0[5] = {};
    alignas(32) double TP1[3] = {};
    alignas(32) double TP2[5] = {};
    alignas(32) double TP3[3] = {};
    alignas(32) double TP4[4] = {};
    alignas(32) double TP5[5] = {};
    alignas(32) double TP6[3] = {};
    alignas(32) double TP7[5] = {};
    alignas(32) double TP8[3] = {};
    alignas(32) double TP9[4] = {};
    alignas(32) double TP10[5] = {};
    alignas(32) double TP11[3] = {};
    alignas(32) double TP12[5] = {};
    alignas(32) double TP13[3] = {};
    alignas(32) double TP14[4] = {};
    for (int iq = 0; iq < 25; ++iq)
    {
        // Quadrature loop body setup (num_points=25)
        // Unstructured varying computations for num_points=25
        const double w4_d1 = w[4][0] * FE22_C0_D01_Q25[0][iq][0] + w[4][2] * FE22_C0_D01_Q25[0][iq][1] + w[4][3] * FE22_C0_D01_Q25[0][iq][2] + w[4][4] * FE22_C0_D01_Q25[0][iq][3] + w[4][5] * FE22_C0_D01_Q25[0][iq][4];
        const double w4_d0 = w[4][0] * FE22_C0_D10_Q25[0][iq][0] + w[4][1] * FE22_C0_D10_Q25[0][iq][1] + w[4][3] * FE22_C0_D10_Q25[0][iq][2] + w[4][4] * FE22_C0_D10_Q25[0][iq][3] + w[4][5] * FE22_C0_D10_Q25[0][iq][4];
        alignas(32) double sv25[294];
        sv25[0] = w4_d1 * sp[3];
        sv25[1] = w4_d0 * sp[5];
        sv25[2] = sv25[0] + sv25[1];
        sv25[3] = sv25[2] * sv25[2];
        sv25[4] = sp[15] * sv25[3];
        sv25[5] = sv25[4] + sp[16];
        sv25[6] = w4_d0 * sp[8];
        sv25[7] = w4_d1 * sp[13];
        sv25[8] = sv25[6] + sv25[7];
        sv25[9] = sv25[2] * sv25[8];
        sv25[10] = sp[19] * sv25[9];
        sv25[11] = sv25[5] + -1 * sv25[10];
        sv25[12] = sv25[11] * sp[24];
        sv25[13] = sv25[11] * sp[21];
        sv25[14] = sv25[11] * sp[23];
        sv25[15] = sp[33] * sv25[3];
        sv25[16] = sv25[15] + sp[34];
        sv25[17] = sp[15] * sv25[9];
        sv25[18] = sv25[16] + -1 * sv25[17];
        sv25[19] = sv25[18] * sp[38];
        sv25[20] = sv25[18] * sp[36];
        sv25[21] = sv25[18] * sp[37];
        sv25[22] = sv25[19] + sv25[12];
        sv25[23] = sv25[20] + sv25[13];
        sv25[24] = sv25[14] + sv25[21];
        sv25[25] = sp[33] * sv25[9];
        sv25[26] = -1 * sv25[25] + sp[16];
        sv25[27] = sv25[8] * sv25[8];
        sv25[28] = sp[15] * sv25[27];
        sv25[29] = sv25[26] + sv25[28];
        sv25[30] = sv25[29] * sp[24];
        sv25[31] = sv25[29] * sp[21];
        sv25[32] = sv25[29] * sp[23];
        sv25[33] = sv25[22] + sv25[30];
        sv25[34] = sv25[23] + sv25[31];
        sv25[35] = sv25[24] + sv25[32];
        sv25[36] = -1 * sv25[17] + sp[39];
        sv25[37] = sp[19] * sv25[27];
        sv25[38] = sv25[36] + sv25[37];
        sv25[39] = sv25[38] * sp[43];
        sv25[40] = sv25[38] * sp[42];
        sv25[41] = sv25[38] * sp[41];
        sv25[42] = sv25[33] + sv25[39];
        sv25[43] = sv25[34] + sv25[40];
        sv25[44] = sv25[35] + sv25[41];
        sv25[45] = sv25[2] * sp[3];
        sv25[46] = sv25[2] * sp[5];
        sv25[47] = sv25[45] + sv25[45];
        sv25[48] = sv25[46] + sv25[46];
        sv25[49] = sv25[8] * sp[13];
        sv25[50] = sv25[8] * sp[8];
        sv25[51] = sv25[49] + sv25[49];
        sv25[52] = sv25[50] + sv25[50];
        sv25[53] = sv25[47] + sv25[51];
        sv25[54] = sv25[52] + sv25[48];
        sv25[55] = sv25[3] + sv25[27];
        sv25[56] = sv25[55] + w[2][0];
        sv25[57] = -1.5 * sv25[53] * std::pow(sv25[56], -2.5);
        sv25[58] = -1.5 * sv25[54] * std::pow(sv25[56], -2.5);
        sv25[59] = sv25[42] * sv25[57];
        sv25[60] = sv25[42] * sv25[58];
        sv25[61] = sv25[43] * sv25[57];
        sv25[62] = sv25[43] * sv25[58];
        sv25[63] = sv25[44] * sv25[57];
        sv25[64] = sv25[44] * sv25[58];
        sv25[65] = sv25[47] * sp[15];
        sv25[66] = sv25[48] * sp[15];
        sv25[67] = sp[24] * sv25[3];
        sv25[68] = sv25[3] * sp[21];
        sv25[69] = sv25[3] * sp[23];
        sv25[70] = sv25[67] + sp[44];
        sv25[71] = sv25[68] + sp[45];
        sv25[72] = sv25[69] + sp[46];
        sv25[73] = sv25[2] * sp[13];
        sv25[74] = sv25[2] * sp[8];
        sv25[75] = sv25[8] * sp[3];
        sv25[76] = sv25[8] * sp[5];
        sv25[77] = sv25[75] + sv25[73];
        sv25[78] = sv25[74] + sv25[76];
        sv25[79] = sp[19] * sv25[77];
        sv25[80] = sp[19] * sv25[78];
        sv25[81] = sp[43] * sv25[9];
        sv25[82] = sv25[9] * sp[42];
        sv25[83] = sv25[9] * sp[41];
        sv25[84] = sv25[65] + -1 * sv25[79];
        sv25[85] = sv25[66] + -1 * sv25[80];
        sv25[86] = sv25[70] + -1 * sv25[81];
        sv25[87] = sv25[71] + -1 * sv25[82];
        sv25[88] = sv25[72] + -1 * sv25[83];
        sv25[89] = sv25[84] * sp[24];
        sv25[90] = sv25[84] * sp[21];
        sv25[91] = sv25[84] * sp[23];
        sv25[92] = sv25[85] * sp[24];
        sv25[93] = sv25[85] * sp[21];
        sv25[94] = sv25[85] * sp[23];
        sv25[95] = sv25[86] * sp[24];
        sv25[96] = sv25[86] * sp[21];
        sv25[97] = sv25[86] * sp[23];
        sv25[98] = sv25[87] * sp[24];
        sv25[99] = sv25[87] * sp[21];
        sv25[100] = sv25[87] * sp[23];
        sv25[101] = sv25[88] * sp[24];
        sv25[102] = sv25[88] * sp[21];
        sv25[103] = sv25[88] * sp[23];
        sv25[104] = sv25[47] * sp[33];
        sv25[105] = sv25[48] * sp[33];
        sv25[106] = sp[38] * sv25[3];
        sv25[107] = sv25[3] * sp[36];
        sv25[108] = sv25[3] * sp[37];
        sv25[109] = sv25[106] + sp[47];
        sv25[110] = sv25[107] + sp[48];
        sv25[111] = sv25[108] + sp[49];
        sv25[112] = sp[15] * sv25[77];
        sv25[113] = sv25[78] * sp[15];
        sv25[114] = sp[24] * sv25[9];
        sv25[115] = sv25[9] * sp[21];
        sv25[116] = sv25[9] * sp[23];
        sv25[117] = sv25[104] + -1 * sv25[112];
        sv25[118] = sv25[105] + -1 * sv25[113];
        sv25[119] = sv25[109] + -1 * sv25[114];
        sv25[120] = sv25[110] + -1 * sv25[115];
        sv25[121] = sv25[111] + -1 * sv25[116];
        sv25[122] = sv25[117] * sp[38];
        sv25[123] = sv25[117] * sp[36];
        sv25[124] = sv25[117] * sp[37];
        sv25[125] = sv25[118] * sp[38];
        sv25[126] = sv25[118] * sp[36];
        sv25[127] = sv25[118] * sp[37];
        sv25[128] = sv25[119] * sp[38];
        sv25[129] = sv25[119] * sp[36];
        sv25[130] = sv25[119] * sp[37];
        sv25[131] = sv25[120] * sp[38];
        sv25[132] = sv25[120] * sp[36];
        sv25[133] = sv25[120] * sp[37];
        sv25[134] = sv25[121] * sp[38];
        sv25[135] = sv25[121] * sp[36];
        sv25[136] = sv25[121] * sp[37];
        sv25[137] = sv25[122] + sv25[89];
        sv25[138] = sv25[125] + sv25[92];
        sv25[139] = sv25[128] + sv25[95];
        sv25[140] = sv25[131] + sv25[98];
        sv25[141] = sv25[134] + sv25[101];
        sv25[142] = sv25[123] + sv25[90];
        sv25[143] = sv25[126] + sv25[93];
        sv25[144] = sv25[129] + sv25[96];
        sv25[145] = sv25[132] + sv25[99];
        sv25[146] = sv25[135] + sv25[102];
        sv25[147] = sv25[91] + sv25[124];
        sv25[148] = sv25[94] + sv25[127];
        sv25[149] = sv25[97] + sv25[130];
        sv25[150] = sv25[100] + sv25[133];
        sv25[151] = sv25[103] + sv25[136];
        sv25[152] = sp[15] * sv25[51];
        sv25[153] = sv25[52] * sp[15];
        sv25[154] = sp[24] * sv25[27];
        sv25[155] = sv25[27] * sp[21];
        sv25[156] = sv25[27] * sp[23];
        sv25[157] = sv25[77] * sp[33];
        sv25[158] = sv25[78] * sp[33];
        sv25[159] = sp[38] * sv25[9];
        sv25[160] = sv25[9] * sp[36];
        sv25[161] = sv25[9] * sp[37];
        sv25[162] = -1 * sv25[159] + sp[44];
        sv25[163] = -1 * sv25[160] + sp[45];
        sv25[164] = -1 * sv25[161] + sp[46];
        sv25[165] = sv25[152] + -1 * sv25[157];
        sv25[166] = sv25[153] + -1 * sv25[158];
        sv25[167] = sv25[162] + sv25[154];
        sv25[168] = sv25[163] + sv25[155];
        sv25[169] = sv25[164] + sv25[156];
        sv25[170] = sv25[165] * sp[24];
        sv25[171] = sv25[165] * sp[21];
        sv25[172] = sv25[165] * sp[23];
        sv25[173] = sv25[166] * sp[24];
        sv25[174] = sv25[166] * sp[21];
        sv25[175] = sv25[166] * sp[23];
        sv25[176] = sv25[167] * sp[24];
        sv25[177] = sv25[167] * sp[21];
        sv25[178] = sv25[167] * sp[23];
        sv25[179] = sv25[168] * sp[24];
        sv25[180] = sv25[168] * sp[21];
        sv25[181] = sv25[168] * sp[23];
        sv25[182] = sv25[169] * sp[24];
        sv25[183] = sv25[169] * sp[21];
        sv25[184] = sv25[169] * sp[23];
        sv25[185] = sv25[137] + sv25[170];
        sv25[186] = sv25[138] + sv25[173];
        sv25[187] = sv25[139] + sv25[176];
        sv25[188] = sv25[140] + sv25[179];
        sv25[189] = sv25[141] + sv25[182];
        sv25[190] = sv25[142] + sv25[171];
        sv25[191] = sv25[143] + sv25[174];
        sv25[192] = sv25[144] + sv25[177];
        sv25[193] = sv25[145] + sv25[180];
        sv25[194] = sv25[146] + sv25[183];
        sv25[195] = sv25[147] + sv25[172];
        sv25[196] = sv25[148] + sv25[175];
        sv25[197] = sv25[149] + sv25[178];
        sv25[198] = sv25[150] + sv25[181];
        sv25[199] = sv25[151] + sv25[184];
        sv25[200] = sp[19] * sv25[51];
        sv25[201] = sv25[52] * sp[19];
        sv25[202] = sp[43] * sv25[27];
        sv25[203] = sv25[27] * sp[42];
        sv25[204] = sv25[27] * sp[41];
        sv25[205] = -1 * sv25[114] + sp[50];
        sv25[206] = -1 * sv25[115] + sp[51];
        sv25[207] = -1 * sv25[116] + sp[52];
        sv25[208] = sv25[200] + -1 * sv25[112];
        sv25[209] = sv25[201] + -1 * sv25[113];
        sv25[210] = sv25[205] + sv25[202];
        sv25[211] = sv25[206] + sv25[203];
        sv25[212] = sv25[207] + sv25[204];
        sv25[213] = sv25[208] * sp[43];
        sv25[214] = sv25[208] * sp[42];
        sv25[215] = sv25[208] * sp[41];
        sv25[216] = sv25[209] * sp[43];
        sv25[217] = sv25[209] * sp[42];
        sv25[218] = sv25[209] * sp[41];
        sv25[219] = sv25[210] * sp[43];
        sv25[220] = sv25[210] * sp[42];
        sv25[221] = sv25[210] * sp[41];
        sv25[222] = sv25[211] * sp[43];
        sv25[223] = sv25[211] * sp[42];
        sv25[224] = sv25[211] * sp[41];
        sv25[225] = sv25[212] * sp[43];
        sv25[226] = sv25[212] * sp[42];
        sv25[227] = sv25[212] * sp[41];
        sv25[228] = sv25[185] + sv25[213];
        sv25[229] = sv25[186] + sv25[216];
        sv25[230] = sv25[187] + sv25[219];
        sv25[231] = sv25[188] + sv25[222];
        sv25[232] = sv25[189] + sv25[225];
        sv25[233] = sv25[190] + sv25[214];
        sv25[234] = sv25[191] + sv25[217];
        sv25[235] = sv25[192] + sv25[220];
        sv25[236] = sv25[193] + sv25[223];
        sv25[237] = sv25[194] + sv25[226];
        sv25[238] = sv25[195] + sv25[215];
        sv25[239] = sv25[196] + sv25[218];
        sv25[240] = sv25[197] + sv25[221];
        sv25[241] = sv25[198] + sv25[224];
        sv25[242] = sv25[199] + sv25[227];
        sv25[243] = sv25[228] * std::pow(sv25[56], -1.5);
        sv25[244] = sv25[229] * std::pow(sv25[56], -1.5);
        sv25[245] = sv25[230] * std::pow(sv25[56], -1.5);
        sv25[246] = sv25[231] * std::pow(sv25[56], -1.5);
        sv25[247] = sv25[232] * std::pow(sv25[56], -1.5);
        sv25[248] = sv25[233] * std::pow(sv25[56], -1.5);
        sv25[249] = sv25[234] * std::pow(sv25[56], -1.5);
        sv25[250] = sv25[235] * std::pow(sv25[56], -1.5);
        sv25[251] = sv25[236] * std::pow(sv25[56], -1.5);
        sv25[252] = sv25[237] * std::pow(sv25[56], -1.5);
        sv25[253] = sv25[238] * std::pow(sv25[56], -1.5);
        sv25[254] = sv25[239] * std::pow(sv25[56], -1.5);
        sv25[255] = sv25[240] * std::pow(sv25[56], -1.5);
        sv25[256] = sv25[241] * std::pow(sv25[56], -1.5);
        sv25[257] = sv25[242] * std::pow(sv25[56], -1.5);
        sv25[258] = sv25[59] + sv25[243];
        sv25[259] = sv25[60] + sv25[244];
        sv25[260] = sv25[61] + sv25[248];
        sv25[261] = sv25[62] + sv25[249];
        sv25[262] = sv25[63] + sv25[253];
        sv25[263] = sv25[64] + sv25[254];
        sv25[264] = sv25[258] * sp[54];
        sv25[265] = sv25[259] * sp[54];
        sv25[266] = sv25[245] * sp[54];
        sv25[267] = sv25[246] * sp[54];
        sv25[268] = sv25[247] * sp[54];
        sv25[269] = sv25[260] * sp[54];
        sv25[270] = sv25[261] * sp[54];
        sv25[271] = sv25[250] * sp[54];
        sv25[272] = sv25[251] * sp[54];
        sv25[273] = sv25[252] * sp[54];
        sv25[274] = sv25[262] * sp[54];
        sv25[275] = sv25[263] * sp[54];
        sv25[276] = sv25[255] * sp[54];
        sv25[277] = sv25[256] * sp[54];
        sv25[278] = sv25[257] * sp[54];
        sv25[279] = sv25[264] * sp[55];
        sv25[280] = sv25[265] * sp[55];
        sv25[281] = sv25[266] * sp[55];
        sv25[282] = sv25[267] * sp[55];
        sv25[283] = sv25[268] * sp[55];
        sv25[284] = sv25[269] * sp[55];
        sv25[285] = sv25[270] * sp[55];
        sv25[286] = sv25[271] * sp[55];
        sv25[287] = sv25[272] * sp[55];
        sv25[288] = sv25[273] * sp[55];
        sv25[289] = sv25[274] * sp[55];
        sv25[290] = sv25[275] * sp[55];
        sv25[291] = sv25[276] * sp[55];
        sv25[292] = sv25[277] * sp[55];
        sv25[293] = sv25[278] * sp[55];
        const double fw0 = sv25[285] * weights25[iq];
        for (int j = 0; j < 5; ++j)
            TP0[j] += fw0 * FE22_C0_D10_Q25[0][iq][j];
        const double fw1 = sv25[287] * weights25[iq];
        for (int j = 0; j < 3; ++j)
            TP1[j] += fw1 * FE22_C0_D02_Q25[0][0][j];
        const double fw2 = sv25[284] * weights25[iq];
        for (int j = 0; j < 5; ++j)
            TP2[j] += fw2 * FE22_C0_D01_Q25[0][iq][j];
        const double fw3 = sv25[288] * weights25[iq];
        for (int j = 0; j < 3; ++j)
            TP3[j] += fw3 * FE22_C0_D02_Q25[0][0][j];
        const double fw4 = sv25[286] * weights25[iq];
        for (int j = 0; j < 4; ++j)
            TP4[j] += fw4 * FE22_C0_D11_Q25[0][0][j];
        const double fw5 = sv25[290] * weights25[iq];
        for (int j = 0; j < 5; ++j)
            TP5[j] += fw5 * FE22_C0_D10_Q25[0][iq][j];
        const double fw6 = sv25[292] * weights25[iq];
        for (int j = 0; j < 3; ++j)
            TP6[j] += fw6 * FE22_C0_D02_Q25[0][0][j];
        const double fw7 = sv25[289] * weights25[iq];
        for (int j = 0; j < 5; ++j)
            TP7[j] += fw7 * FE22_C0_D01_Q25[0][iq][j];
        const double fw8 = sv25[293] * weights25[iq];
        for (int j = 0; j < 3; ++j)
            TP8[j] += fw8 * FE22_C0_D02_Q25[0][0][j];
        const double fw9 = sv25[291] * weights25[iq];
        for (int j = 0; j < 4; ++j)
            TP9[j] += fw9 * FE22_C0_D11_Q25[0][0][j];
        const double fw10 = sv25[280] * weights25[iq];
        for (int j = 0; j < 5; ++j)
            TP10[j] += fw10 * FE22_C0_D10_Q25[0][iq][j];
        const double fw11 = sv25[282] * weights25[iq];
        for (int j = 0; j < 3; ++j)
            TP11[j] += fw11 * FE22_C0_D02_Q25[0][0][j];
        const double fw12 = sv25[279] * weights25[iq];
        for (int j = 0; j < 5; ++j)
            TP12[j] += fw12 * FE22_C0_D01_Q25[0][iq][j];
        const double fw13 = sv25[283] * weights25[iq];
        for (int j = 0; j < 3; ++j)
            TP13[j] += fw13 * FE22_C0_D02_Q25[0][0][j];
        const double fw14 = sv25[281] * weights25[iq];
        for (int j = 0; j < 4; ++j)
            TP14[j] += fw14 * FE22_C0_D11_Q25[0][0][j];
    }
    A[0] = 0.01666666666666665 * sp[55];
    A[1] = -0.002777777777777774 * sp[55];
    A[2] = -0.002777777777777776 * sp[55];
    A[3] = -0.0111111111111111 * sp[55];
    std::fill(A + 4, A + 6, 0.0);
    A[6] = -0.002777777777777774 * sp[55];
    A[7] = 0.01666666666666665 * sp[55];
    A[8] = -0.002777777777777777 * sp[55];
    A[9] = 0.0;
    A[10] = -0.01111111111111111 * sp[55];
    A[11] = 0.0;
    A[12] = -0.002777777777777776 * sp[55];
    A[13] = -0.002777777777777777 * sp[55];
    A[14] = 0.01666666666666665 * sp[55];
    std::fill(A + 15, A + 17, 0.0);
    A[17] = -0.01111111111111111 * sp[55];
    A[18] = -0.0111111111111111 * sp[55];
    std::fill(A + 19, A + 21, 0.0);
    A[21] = 0.08888888888888888 * sp[55];
    A[22] = 0.04444444444444444 * sp[55];
    A[23] = 0.04444444444444448 * sp[55];
    A[24] = 0.0;
    A[25] = -0.01111111111111111 * sp[55];
    A[26] = 0.0;
    A[27] = 0.04444444444444444 * sp[55];
    A[28] = 0.08888888888888889 * sp[55];
    A[29] = 0.04444444444444444 * sp[55];
    std::fill(A + 30, A + 32, 0.0);
    A[32] = -0.01111111111111111 * sp[55];
    A[33] = 0.04444444444444448 * sp[55];
    A[34] = 0.04444444444444444 * sp[55];
    A[35] = 0.08888888888888884 * sp[55];
    static const int DM0[3] = { 0, 1, 5 };
    static const int DM1[5] = { 0, 1, 3, 4, 5 };
    static const int DM2[5] = { 0, 2, 3, 4, 5 };
    static const int DM3[3] = { 0, 2, 4 };
    static const int DM4[4] = { 0, 3, 4, 5 };
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[6 * DM0[i] + DM1[j]] += FE22_C0_D02_Q25[0][0][i] * TP0[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[6 * DM0[i] + DM0[j]] += FE22_C0_D02_Q25[0][0][i] * TP1[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[6 * DM0[i] + DM2[j]] += FE22_C0_D02_Q25[0][0][i] * TP2[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[6 * DM0[i] + DM3[j]] += FE22_C0_D02_Q25[0][0][i] * TP3[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[6 * DM0[i] + DM4[j]] += FE22_C0_D02_Q25[0][0][i] * TP4[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[6 * DM3[i] + DM1[j]] += FE22_C0_D02_Q25[0][0][i] * TP5[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[6 * DM3[i] + DM0[j]] += FE22_C0_D02_Q25[0][0][i] * TP6[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[6 * DM3[i] + DM2[j]] += FE22_C0_D02_Q25[0][0][i] * TP7[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[6 * DM3[i] + DM3[j]] += FE22_C0_D02_Q25[0][0][i] * TP8[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 4; ++j)
            A[6 * DM3[i] + DM4[j]] += FE22_C0_D02_Q25[0][0][i] * TP9[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[6 * DM4[i] + DM1[j]] += FE22_C0_D11_Q25[0][0][i] * TP10[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[6 * DM4[i] + DM0[j]] += FE22_C0_D11_Q25[0][0][i] * TP11[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[6 * DM4[i] + DM2[j]] += FE22_C0_D11_Q25[0][0][i] * TP12[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 3; ++j)
            A[6 * DM4[i] + DM3[j]] += FE22_C0_D11_Q25[0][0][i] * TP13[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            A[6 * DM4[i] + DM4[j]] += FE22_C0_D11_Q25[0][0][i] * TP14[j];
  }

};


class tvf4_exterior_facet_integral_1_otherwise: public ufc::exterior_facet_integral
{
public:

  tvf4_exterior_facet_integral_1_otherwise() : ufc::exterior_facet_integral()
  {

  }

  ~tvf4_exterior_facet_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 13
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 13
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           13
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights7[7] = { 0.06474248308443491, 0.1398526957446383, 0.1909150252525594, 0.2089795918367347, 0.1909150252525595, 0.1398526957446383, 0.06474248308443506 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE23_C0_D01_F_Q7[3][7][5] =
        { { { 1.0, -0.898215824685518, 3.898215824685502, -0.1017841753144697, -3.898215824685518 },
            { 1.0, -0.4830623711987886, 3.483062371198774, -0.5169376288011989, -3.483062371198791 },
            { 1.0, 0.1883096972452069, 2.811690302754779, -1.188309697245194, -2.811690302754796 },
            { 1.0, 1.0, 1.999999999999985, -1.999999999999989, -2.0 },
            { 1.0, 1.811690302754797, 1.18830969724519, -2.811690302754784, -1.188309697245205 },
            { 1.0, 2.483062371198791, 0.5169376288011949, -3.48306237119878, -0.5169376288012085 },
            { 1.0, 2.898215824685519, 0.1017841753144673, -3.898215824685509, -0.1017841753144794 } },
          { { -2.898215824685522, -0.8982158246855179, 0.0, 3.796431649371042, 0.0 },
            { -2.483062371198794, -0.4830623711987884, 0.0, 2.966124742397585, 0.0 },
            { -1.811690302754799, 0.1883096972452066, 0.0, 1.623380605509597, 0.0 },
            { -1.0, 1.0, 0.0, 0.0, 0.0 },
            { -0.1883096972452111, 1.811690302754796, 0.0, -1.62338060550958, 0.0 },
            { 0.4830623711987839, 2.483062371198791, 0.0, -2.96612474239757, 0.0 },
            { 0.898215824685512, 2.898215824685519, 0.0, -3.796431649371025, 0.0 } },
          { { -2.898215824685522, -1.0, 0.1017841753144733, 3.898215824685524, -0.1017841753144805 },
            { -2.483062371198793, -1.0, 0.5169376288012006, 3.483062371198796, -0.5169376288012091 },
            { -1.811690302754799, -1.0, 1.188309697245195, 2.811690302754803, -1.188309697245205 },
            { -1.0, -1.0, 1.999999999999989, 2.00000000000001, -2.000000000000001 },
            { -0.18830969724521, -1.0, 2.811690302754782, 1.188309697245217, -2.811690302754796 },
            { 0.4830623711987844, -1.0, 3.483062371198775, 0.5169376288012226, -3.48306237119879 },
            { 0.8982158246855119, -1.0, 3.898215824685503, 0.1017841753144955, -3.898215824685518 } } };
    alignas(32) static const double FE23_C0_D02_F_Q7[1][1][3] = { { { 3.999999999999994, 4.0, -7.999999999999988 } } };
    alignas(32) static const double FE23_C0_D10_F_Q7[3][7][5] =
        { { { 1.0, 2.898215824685517, 0.1017841753144816, -0.1017841753144816, -3.898215824685518 },
            { 1.0, 2.483062371198788, 0.5169376288012102, -0.5169376288012102, -3.483062371198791 },
            { 1.0, 1.811690302754794, 1.188309697245204, -1.188309697245204, -2.811690302754795 },
            { 1.0, 1.0, 1.999999999999998, -1.999999999999998, -2.000000000000001 },
            { 1.0, 0.1883096972452061, 2.81169030275479, -2.81169030275479, -1.188309697245206 },
            { 1.0, -0.4830623711987888, 3.483062371198783, -3.483062371198783, -0.5169376288012106 },
            { 1.0, -0.8982158246855166, 3.898215824685509, -3.898215824685509, -0.1017841753144824 } },
          { { -2.898215824685519, -1.0, 0.101784175314481, -0.101784175314481, 3.898215824685523 },
            { -2.483062371198791, -1.0, 0.5169376288012099, -0.5169376288012099, 3.483062371198794 },
            { -1.811690302754795, -1.0, 1.188309697245204, -1.188309697245204, 2.811690302754798 },
            { -1.0, -1.0, 1.999999999999998, -1.999999999999998, 2.000000000000003 },
            { -0.1883096972452063, -1.0, 2.811690302754791, -2.811690302754791, 1.188309697245207 },
            { 0.4830623711987883, -1.0, 3.483062371198783, -3.483062371198783, 0.5169376288012122 },
            { 0.8982158246855162, -1.0, 3.898215824685509, -3.898215824685509, 0.1017841753144842 } },
          { { -2.898215824685519, -0.8982158246855215, 0.0, 0.0, 3.796431649371041 },
            { -2.483062371198789, -0.4830623711987921, 0.0, 0.0, 2.966124742397581 },
            { -1.811690302754794, 0.1883096972452033, 0.0, 0.0, 1.623380605509591 },
            { -1.0, 1.0, 0.0, 0.0, 0.0 },
            { -0.1883096972452039, 1.811690302754793, 0.0, 0.0, -1.623380605509589 },
            { 0.4830623711987906, 2.483062371198788, 0.0, 0.0, -2.966124742397579 },
            { 0.8982158246855185, 2.898215824685516, 0.0, 0.0, -3.796431649371035 } } };
    alignas(32) static const double FE23_C0_D11_F_Q7[1][1][4] = { { { 3.999999999999996, 3.999999999999997, -3.999999999999997, -4.000000000000003 } } };
    alignas(32) static const double FE3_C0_D01_F_Q7[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_F_Q7[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_F_Q7[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_F_Q7[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_F_Q7[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_F_Q7[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_F_Q7[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_F_Q7[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_F_Q7[0][0][1];
    const double w4_d01 = w[4][0] * FE23_C0_D11_F_Q7[0][0][0] + w[4][3] * FE23_C0_D11_F_Q7[0][0][1] + w[4][4] * FE23_C0_D11_F_Q7[0][0][2] + w[4][5] * FE23_C0_D11_F_Q7[0][0][3];
    const double w4_d00 = w[4][0] * FE23_C0_D02_F_Q7[0][0][0] + w[4][1] * FE23_C0_D02_F_Q7[0][0][1] + w[4][5] * FE23_C0_D02_F_Q7[0][0][2];
    const double w4_d11 = w[4][0] * FE23_C0_D02_F_Q7[0][0][0] + w[4][2] * FE23_C0_D02_F_Q7[0][0][1] + w[4][4] * FE23_C0_D02_F_Q7[0][0][2];
    alignas(32) double sp[104];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = sp[3] * sp[5];
    sp[7] = sp[5] * sp[4];
    sp[8] = -1 * J_c2 / sp[2];
    sp[9] = sp[4] * sp[8];
    sp[10] = sp[3] * sp[8];
    sp[11] = sp[6] + sp[9];
    sp[12] = sp[11] * w[2][0];
    sp[13] = sp[7] * w[2][0];
    sp[14] = sp[10] * w[2][0];
    sp[15] = sp[3] * sp[4];
    sp[16] = sp[3] * sp[3];
    sp[17] = sp[4] * sp[4];
    sp[18] = sp[15] + sp[15];
    sp[19] = triangle_reference_facet_normals[facet][1] * sp[3];
    sp[20] = triangle_reference_facet_normals[facet][0] * sp[4];
    sp[21] = sp[19] + sp[20];
    sp[22] = sp[21] * sp[21];
    sp[23] = triangle_reference_facet_normals[facet][0] * sp[5];
    sp[24] = triangle_reference_facet_normals[facet][1] * sp[8];
    sp[25] = sp[23] + sp[24];
    sp[26] = sp[25] * sp[25];
    sp[27] = sp[22] + sp[26];
    sp[28] = std::sqrt(sp[27]);
    sp[29] = sp[21] / sp[28];
    sp[30] = sp[25] / sp[28];
    sp[31] = sp[29] * sp[30];
    sp[32] = sp[5] * sp[8];
    sp[33] = sp[5] * sp[5];
    sp[34] = sp[8] * sp[8];
    sp[35] = sp[32] + sp[32];
    sp[36] = sp[35] * w[2][0];
    sp[37] = sp[33] * w[2][0];
    sp[38] = sp[34] * w[2][0];
    sp[39] = sp[30] * sp[30];
    sp[40] = sp[18] * w[2][0];
    sp[41] = sp[17] * w[2][0];
    sp[42] = sp[16] * w[2][0];
    sp[43] = sp[29] * sp[29];
    sp[44] = sp[3] * sp[29];
    sp[45] = sp[4] * sp[29];
    sp[46] = sp[8] * sp[30];
    sp[47] = sp[5] * sp[30];
    sp[48] = sp[44] + sp[46];
    sp[49] = sp[45] + sp[47];
    sp[50] = std::pow(w[2][0], 2) * w[0][0];
    sp[51] = sp[50] * w[1][0];
    sp[52] = w4_d01 * sp[3];
    sp[53] = w4_d00 * sp[4];
    sp[54] = sp[52] + sp[53];
    sp[55] = sp[54] * sp[5];
    sp[56] = w4_d11 * sp[3];
    sp[57] = w4_d01 * sp[4];
    sp[58] = sp[56] + sp[57];
    sp[59] = sp[58] * sp[8];
    sp[60] = sp[55] + sp[59];
    sp[61] = sp[60] * w[2][0];
    sp[62] = sp[58] * sp[3];
    sp[63] = sp[54] * sp[4];
    sp[64] = sp[62] + sp[63];
    sp[65] = w4_d00 * sp[5];
    sp[66] = w4_d01 * sp[8];
    sp[67] = sp[65] + sp[66];
    sp[68] = sp[67] * sp[5];
    sp[69] = w4_d01 * sp[5];
    sp[70] = w4_d11 * sp[8];
    sp[71] = sp[69] + sp[70];
    sp[72] = sp[71] * sp[8];
    sp[73] = sp[68] + sp[72];
    sp[74] = sp[73] * w[2][0];
    sp[75] = sp[64] * w[2][0];
    sp[76] = (coordinate_dofs[2] - coordinate_dofs[4]) * (coordinate_dofs[2] - coordinate_dofs[4]);
    sp[77] = (coordinate_dofs[3] - coordinate_dofs[5]) * (coordinate_dofs[3] - coordinate_dofs[5]);
    sp[78] = sp[76] + sp[77];
    sp[79] = std::sqrt(sp[78]);
    sp[80] = (coordinate_dofs[0] - coordinate_dofs[4]) * (coordinate_dofs[0] - coordinate_dofs[4]);
    sp[81] = (coordinate_dofs[1] - coordinate_dofs[5]) * (coordinate_dofs[1] - coordinate_dofs[5]);
    sp[82] = sp[80] + sp[81];
    sp[83] = std::sqrt(sp[82]);
    sp[84] = sp[79] * sp[83];
    sp[85] = (coordinate_dofs[0] - coordinate_dofs[2]) * (coordinate_dofs[0] - coordinate_dofs[2]);
    sp[86] = (coordinate_dofs[1] - coordinate_dofs[3]) * (coordinate_dofs[1] - coordinate_dofs[3]);
    sp[87] = sp[85] + sp[86];
    sp[88] = std::sqrt(sp[87]);
    sp[89] = sp[84] * sp[88];
    sp[90] = triangle_reference_cell_volume * sp[2];
    sp[91] = std::abs(sp[90]);
    sp[92] = sp[89] / (4.0 * sp[91]);
    sp[93] = w[3][0] / (2.0 * sp[92]);
    sp[94] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[95] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[96] = sp[94] + sp[95];
    sp[97] = sp[96] * sp[96];
    sp[98] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[99] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[100] = sp[98] + sp[99];
    sp[101] = sp[100] * sp[100];
    sp[102] = sp[97] + sp[101];
    sp[103] = std::sqrt(sp[102]);
    alignas(32) double BF0[5][5] = {};
    alignas(32) double TP0[5] = {};
    alignas(32) double BF1[5][5] = {};
    alignas(32) double TP1[5] = {};
    alignas(32) double TP2[5] = {};
    alignas(32) double TP3[5] = {};
    alignas(32) double TP4[5] = {};
    alignas(32) double BF2[5][5] = {};
    alignas(32) double TP5[5] = {};
    alignas(32) double BF3[5][5] = {};
    alignas(32) double TP6[5] = {};
    alignas(32) double TP7[5] = {};
    alignas(32) double TP8[5] = {};
    alignas(32) double TP9[5] = {};
    alignas(32) double TP10[5] = {};
    alignas(32) double TP11[5] = {};
    for (int iq = 0; iq < 7; ++iq)
    {
        // Quadrature loop body setup (num_points=7)
        // Unstructured varying computations for num_points=7
        const double w4_d1 = w[4][0] * FE23_C0_D01_F_Q7[facet][iq][0] + w[4][2] * FE23_C0_D01_F_Q7[facet][iq][1] + w[4][3] * FE23_C0_D01_F_Q7[facet][iq][2] + w[4][4] * FE23_C0_D01_F_Q7[facet][iq][3] + w[4][5] * FE23_C0_D01_F_Q7[facet][iq][4];
        const double w4_d0 = w[4][0] * FE23_C0_D10_F_Q7[facet][iq][0] + w[4][1] * FE23_C0_D10_F_Q7[facet][iq][1] + w[4][3] * FE23_C0_D10_F_Q7[facet][iq][2] + w[4][4] * FE23_C0_D10_F_Q7[facet][iq][3] + w[4][5] * FE23_C0_D10_F_Q7[facet][iq][4];
        alignas(32) double sv7[397];
        sv7[0] = w4_d1 * sp[3];
        sv7[1] = w4_d0 * sp[4];
        sv7[2] = sv7[0] + sv7[1];
        sv7[3] = sv7[2] * sv7[2];
        sv7[4] = sp[11] * sv7[3];
        sv7[5] = sv7[3] * sp[7];
        sv7[6] = sv7[3] * sp[10];
        sv7[7] = sv7[4] + sp[12];
        sv7[8] = sv7[5] + sp[13];
        sv7[9] = sv7[6] + sp[14];
        sv7[10] = w4_d0 * sp[5];
        sv7[11] = w4_d1 * sp[8];
        sv7[12] = sv7[10] + sv7[11];
        sv7[13] = sv7[2] * sv7[12];
        sv7[14] = sp[18] * sv7[13];
        sv7[15] = sv7[13] * sp[17];
        sv7[16] = sv7[13] * sp[16];
        sv7[17] = sv7[7] + -1 * sv7[14];
        sv7[18] = sv7[8] + -1 * sv7[15];
        sv7[19] = sv7[9] + -1 * sv7[16];
        sv7[20] = sv7[17] * sp[31];
        sv7[21] = sv7[18] * sp[31];
        sv7[22] = sv7[19] * sp[31];
        sv7[23] = sp[35] * sv7[3];
        sv7[24] = sv7[3] * sp[33];
        sv7[25] = sv7[3] * sp[34];
        sv7[26] = sv7[23] + sp[36];
        sv7[27] = sv7[24] + sp[37];
        sv7[28] = sv7[25] + sp[38];
        sv7[29] = sp[11] * sv7[13];
        sv7[30] = sv7[13] * sp[7];
        sv7[31] = sv7[13] * sp[10];
        sv7[32] = sv7[26] + -1 * sv7[29];
        sv7[33] = sv7[27] + -1 * sv7[30];
        sv7[34] = sv7[28] + -1 * sv7[31];
        sv7[35] = sv7[32] * sp[39];
        sv7[36] = sv7[33] * sp[39];
        sv7[37] = sv7[34] * sp[39];
        sv7[38] = sv7[20] + sv7[35];
        sv7[39] = sv7[21] + sv7[36];
        sv7[40] = sv7[22] + sv7[37];
        sv7[41] = sv7[12] * sv7[12];
        sv7[42] = sp[11] * sv7[41];
        sv7[43] = sv7[41] * sp[7];
        sv7[44] = sv7[41] * sp[10];
        sv7[45] = sv7[42] + sp[12];
        sv7[46] = sv7[43] + sp[13];
        sv7[47] = sv7[44] + sp[14];
        sv7[48] = sp[35] * sv7[13];
        sv7[49] = sv7[13] * sp[33];
        sv7[50] = sv7[13] * sp[34];
        sv7[51] = sv7[45] + -1 * sv7[48];
        sv7[52] = sv7[46] + -1 * sv7[49];
        sv7[53] = sv7[47] + -1 * sv7[50];
        sv7[54] = sv7[51] * sp[31];
        sv7[55] = sv7[52] * sp[31];
        sv7[56] = sv7[53] * sp[31];
        sv7[57] = sv7[38] + sv7[54];
        sv7[58] = sv7[39] + sv7[55];
        sv7[59] = sv7[40] + sv7[56];
        sv7[60] = sp[18] * sv7[41];
        sv7[61] = sv7[41] * sp[17];
        sv7[62] = sv7[41] * sp[16];
        sv7[63] = sv7[60] + sp[40];
        sv7[64] = sv7[61] + sp[41];
        sv7[65] = sv7[62] + sp[42];
        sv7[66] = sv7[63] + -1 * sv7[29];
        sv7[67] = sv7[64] + -1 * sv7[30];
        sv7[68] = sv7[65] + -1 * sv7[31];
        sv7[69] = sv7[66] * sp[43];
        sv7[70] = sv7[67] * sp[43];
        sv7[71] = sv7[68] * sp[43];
        sv7[72] = sv7[57] + sv7[69];
        sv7[73] = sv7[58] + sv7[70];
        sv7[74] = sv7[59] + sv7[71];
        sv7[75] = sv7[2] * sp[3];
        sv7[76] = sv7[2] * sp[4];
        sv7[77] = sv7[75] + sv7[75];
        sv7[78] = sv7[76] + sv7[76];
        sv7[79] = sv7[12] * sp[8];
        sv7[80] = sv7[12] * sp[5];
        sv7[81] = sv7[79] + sv7[79];
        sv7[82] = sv7[80] + sv7[80];
        sv7[83] = sv7[77] + sv7[81];
        sv7[84] = sv7[82] + sv7[78];
        sv7[85] = sv7[3] + sv7[41];
        sv7[86] = sv7[85] + w[2][0];
        sv7[87] = -1.25 * sv7[83] * std::pow(sv7[86], -2.25);
        sv7[88] = -1.25 * sv7[84] * std::pow(sv7[86], -2.25);
        sv7[89] = sv7[72] * sv7[87];
        sv7[90] = sv7[72] * sv7[88];
        sv7[91] = sv7[73] * sv7[87];
        sv7[92] = sv7[73] * sv7[88];
        sv7[93] = sv7[74] * sv7[87];
        sv7[94] = sv7[74] * sv7[88];
        sv7[95] = sv7[77] * sp[11];
        sv7[96] = sv7[77] * sp[7];
        sv7[97] = sv7[77] * sp[10];
        sv7[98] = sv7[78] * sp[11];
        sv7[99] = sv7[78] * sp[7];
        sv7[100] = sv7[78] * sp[10];
        sv7[101] = sv7[2] * sp[8];
        sv7[102] = sv7[2] * sp[5];
        sv7[103] = sv7[12] * sp[3];
        sv7[104] = sv7[12] * sp[4];
        sv7[105] = sv7[103] + sv7[101];
        sv7[106] = sv7[102] + sv7[104];
        sv7[107] = sp[18] * sv7[105];
        sv7[108] = sv7[105] * sp[17];
        sv7[109] = sv7[105] * sp[16];
        sv7[110] = sv7[106] * sp[18];
        sv7[111] = sv7[106] * sp[17];
        sv7[112] = sv7[106] * sp[16];
        sv7[113] = sv7[95] + -1 * sv7[107];
        sv7[114] = sv7[98] + -1 * sv7[110];
        sv7[115] = -1 * sv7[108] + sv7[96];
        sv7[116] = -1 * sv7[111] + sv7[99];
        sv7[117] = -1 * sv7[109] + sv7[97];
        sv7[118] = -1 * sv7[112] + sv7[100];
        sv7[119] = sv7[113] * sp[31];
        sv7[120] = sv7[114] * sp[31];
        sv7[121] = sv7[115] * sp[31];
        sv7[122] = sv7[116] * sp[31];
        sv7[123] = sv7[117] * sp[31];
        sv7[124] = sv7[118] * sp[31];
        sv7[125] = sv7[77] * sp[35];
        sv7[126] = sv7[77] * sp[33];
        sv7[127] = sv7[77] * sp[34];
        sv7[128] = sv7[78] * sp[35];
        sv7[129] = sv7[78] * sp[33];
        sv7[130] = sv7[78] * sp[34];
        sv7[131] = sv7[105] * sp[11];
        sv7[132] = sv7[105] * sp[7];
        sv7[133] = sv7[105] * sp[10];
        sv7[134] = sv7[106] * sp[11];
        sv7[135] = sv7[106] * sp[7];
        sv7[136] = sv7[106] * sp[10];
        sv7[137] = sv7[125] + -1 * sv7[131];
        sv7[138] = sv7[128] + -1 * sv7[134];
        sv7[139] = -1 * sv7[132] + sv7[126];
        sv7[140] = -1 * sv7[135] + sv7[129];
        sv7[141] = -1 * sv7[133] + sv7[127];
        sv7[142] = -1 * sv7[136] + sv7[130];
        sv7[143] = sv7[137] * sp[39];
        sv7[144] = sv7[138] * sp[39];
        sv7[145] = sv7[139] * sp[39];
        sv7[146] = sv7[140] * sp[39];
        sv7[147] = sv7[141] * sp[39];
        sv7[148] = sv7[142] * sp[39];
        sv7[149] = sv7[119] + sv7[143];
        sv7[150] = sv7[120] + sv7[144];
        sv7[151] = sv7[121] + sv7[145];
        sv7[152] = sv7[122] + sv7[146];
        sv7[153] = sv7[123] + sv7[147];
        sv7[154] = sv7[124] + sv7[148];
        sv7[155] = sv7[81] * sp[11];
        sv7[156] = sv7[81] * sp[7];
        sv7[157] = sv7[81] * sp[10];
        sv7[158] = sv7[82] * sp[11];
        sv7[159] = sv7[82] * sp[7];
        sv7[160] = sv7[82] * sp[10];
        sv7[161] = sv7[105] * sp[35];
        sv7[162] = sv7[105] * sp[33];
        sv7[163] = sv7[105] * sp[34];
        sv7[164] = sv7[106] * sp[35];
        sv7[165] = sv7[106] * sp[33];
        sv7[166] = sv7[106] * sp[34];
        sv7[167] = sv7[155] + -1 * sv7[161];
        sv7[168] = sv7[158] + -1 * sv7[164];
        sv7[169] = -1 * sv7[162] + sv7[156];
        sv7[170] = -1 * sv7[165] + sv7[159];
        sv7[171] = -1 * sv7[163] + sv7[157];
        sv7[172] = -1 * sv7[166] + sv7[160];
        sv7[173] = sv7[167] * sp[31];
        sv7[174] = sv7[168] * sp[31];
        sv7[175] = sv7[169] * sp[31];
        sv7[176] = sv7[170] * sp[31];
        sv7[177] = sv7[171] * sp[31];
        sv7[178] = sv7[172] * sp[31];
        sv7[179] = sv7[149] + sv7[173];
        sv7[180] = sv7[150] + sv7[174];
        sv7[181] = sv7[151] + sv7[175];
        sv7[182] = sv7[152] + sv7[176];
        sv7[183] = sv7[153] + sv7[177];
        sv7[184] = sv7[154] + sv7[178];
        sv7[185] = sp[18] * sv7[81];
        sv7[186] = sv7[81] * sp[17];
        sv7[187] = sv7[81] * sp[16];
        sv7[188] = sv7[82] * sp[18];
        sv7[189] = sv7[82] * sp[17];
        sv7[190] = sv7[82] * sp[16];
        sv7[191] = sv7[185] + -1 * sv7[131];
        sv7[192] = sv7[188] + -1 * sv7[134];
        sv7[193] = -1 * sv7[132] + sv7[186];
        sv7[194] = -1 * sv7[135] + sv7[189];
        sv7[195] = -1 * sv7[133] + sv7[187];
        sv7[196] = -1 * sv7[136] + sv7[190];
        sv7[197] = sv7[191] * sp[43];
        sv7[198] = sv7[192] * sp[43];
        sv7[199] = sv7[193] * sp[43];
        sv7[200] = sv7[194] * sp[43];
        sv7[201] = sv7[195] * sp[43];
        sv7[202] = sv7[196] * sp[43];
        sv7[203] = sv7[179] + sv7[197];
        sv7[204] = sv7[180] + sv7[198];
        sv7[205] = sv7[181] + sv7[199];
        sv7[206] = sv7[182] + sv7[200];
        sv7[207] = sv7[183] + sv7[201];
        sv7[208] = sv7[184] + sv7[202];
        sv7[209] = sv7[203] * std::pow(sv7[86], -1.25);
        sv7[210] = sv7[204] * std::pow(sv7[86], -1.25);
        sv7[211] = sv7[205] * std::pow(sv7[86], -1.25);
        sv7[212] = sv7[206] * std::pow(sv7[86], -1.25);
        sv7[213] = sv7[207] * std::pow(sv7[86], -1.25);
        sv7[214] = sv7[208] * std::pow(sv7[86], -1.25);
        sv7[215] = sv7[89] + sv7[209];
        sv7[216] = sv7[90] + sv7[210];
        sv7[217] = sv7[91] + sv7[211];
        sv7[218] = sv7[92] + sv7[212];
        sv7[219] = sv7[93] + sv7[213];
        sv7[220] = sv7[94] + sv7[214];
        sv7[221] = sv7[2] * sp[29];
        sv7[222] = sv7[12] * sp[30];
        sv7[223] = sv7[221] + sv7[222];
        sv7[224] = sv7[223] * std::pow(sv7[86], -0.25);
        sv7[225] = sv7[215] * sv7[224];
        sv7[226] = sv7[216] * sv7[224];
        sv7[227] = sv7[217] * sv7[224];
        sv7[228] = sv7[218] * sv7[224];
        sv7[229] = sv7[219] * sv7[224];
        sv7[230] = sv7[220] * sv7[224];
        sv7[231] = -0.25 * sv7[83] * std::pow(sv7[86], -1.25);
        sv7[232] = -0.25 * sv7[84] * std::pow(sv7[86], -1.25);
        sv7[233] = sv7[223] * sv7[231];
        sv7[234] = sv7[223] * sv7[232];
        sv7[235] = sp[48] * std::pow(sv7[86], -0.25);
        sv7[236] = sp[49] * std::pow(sv7[86], -0.25);
        sv7[237] = sv7[233] + sv7[235];
        sv7[238] = sv7[234] + sv7[236];
        sv7[239] = sv7[72] * std::pow(sv7[86], -1.25);
        sv7[240] = sv7[73] * std::pow(sv7[86], -1.25);
        sv7[241] = sv7[74] * std::pow(sv7[86], -1.25);
        sv7[242] = sv7[237] * sv7[239];
        sv7[243] = sv7[237] * sv7[240];
        sv7[244] = sv7[237] * sv7[241];
        sv7[245] = sv7[238] * sv7[239];
        sv7[246] = sv7[238] * sv7[240];
        sv7[247] = sv7[238] * sv7[241];
        sv7[248] = sv7[225] + sv7[242];
        sv7[249] = sv7[226] + sv7[245];
        sv7[250] = sv7[227] + sv7[243];
        sv7[251] = sv7[228] + sv7[246];
        sv7[252] = sv7[229] + sv7[244];
        sv7[253] = sv7[230] + sv7[247];
        sv7[254] = -1 * sv7[248] * sp[51];
        sv7[255] = -1 * sv7[249] * sp[51];
        sv7[256] = -1 * sv7[250] * sp[51];
        sv7[257] = -1 * sv7[251] * sp[51];
        sv7[258] = -1 * sv7[252] * sp[51];
        sv7[259] = -1 * sv7[253] * sp[51];
        sv7[260] = sp[60] * sv7[3];
        sv7[261] = sv7[260] + sp[61];
        sv7[262] = sp[64] * sv7[13];
        sv7[263] = sv7[261] + -1 * sv7[262];
        sv7[264] = sv7[263] * sp[31];
        sv7[265] = sp[73] * sv7[3];
        sv7[266] = sv7[265] + sp[74];
        sv7[267] = sp[60] * sv7[13];
        sv7[268] = sv7[266] + -1 * sv7[267];
        sv7[269] = sv7[268] * sp[39];
        sv7[270] = sv7[264] + sv7[269];
        sv7[271] = sp[60] * sv7[41];
        sv7[272] = sv7[271] + sp[61];
        sv7[273] = sp[73] * sv7[13];
        sv7[274] = sv7[272] + -1 * sv7[273];
        sv7[275] = sv7[274] * sp[31];
        sv7[276] = sv7[270] + sv7[275];
        sv7[277] = sp[64] * sv7[41];
        sv7[278] = sv7[277] + sp[75];
        sv7[279] = sv7[278] + -1 * sv7[267];
        sv7[280] = sv7[279] * sp[43];
        sv7[281] = sv7[276] + sv7[280];
        sv7[282] = sv7[281] * sv7[87];
        sv7[283] = sv7[281] * sv7[88];
        sv7[284] = sv7[77] * sp[60];
        sv7[285] = sv7[78] * sp[60];
        sv7[286] = sp[64] * sv7[105];
        sv7[287] = sp[64] * sv7[106];
        sv7[288] = sv7[284] + -1 * sv7[286];
        sv7[289] = sv7[285] + -1 * sv7[287];
        sv7[290] = sv7[288] * sp[31];
        sv7[291] = sv7[289] * sp[31];
        sv7[292] = sv7[77] * sp[73];
        sv7[293] = sv7[78] * sp[73];
        sv7[294] = sp[60] * sv7[105];
        sv7[295] = sv7[106] * sp[60];
        sv7[296] = sv7[292] + -1 * sv7[294];
        sv7[297] = sv7[293] + -1 * sv7[295];
        sv7[298] = sv7[296] * sp[39];
        sv7[299] = sv7[297] * sp[39];
        sv7[300] = sv7[290] + sv7[298];
        sv7[301] = sv7[291] + sv7[299];
        sv7[302] = sp[60] * sv7[81];
        sv7[303] = sv7[82] * sp[60];
        sv7[304] = sv7[105] * sp[73];
        sv7[305] = sv7[106] * sp[73];
        sv7[306] = sv7[302] + -1 * sv7[304];
        sv7[307] = sv7[303] + -1 * sv7[305];
        sv7[308] = sv7[306] * sp[31];
        sv7[309] = sv7[307] * sp[31];
        sv7[310] = sv7[300] + sv7[308];
        sv7[311] = sv7[301] + sv7[309];
        sv7[312] = sp[64] * sv7[81];
        sv7[313] = sv7[82] * sp[64];
        sv7[314] = sv7[312] + -1 * sv7[294];
        sv7[315] = sv7[313] + -1 * sv7[295];
        sv7[316] = sv7[314] * sp[43];
        sv7[317] = sv7[315] * sp[43];
        sv7[318] = sv7[310] + sv7[316];
        sv7[319] = sv7[311] + sv7[317];
        sv7[320] = sv7[318] * std::pow(sv7[86], -1.25);
        sv7[321] = sv7[319] * std::pow(sv7[86], -1.25);
        sv7[322] = sv7[282] + sv7[320];
        sv7[323] = sv7[283] + sv7[321];
        sv7[324] = sv7[322] * sv7[235];
        sv7[325] = sv7[322] * sv7[236];
        sv7[326] = sv7[323] * sv7[235];
        sv7[327] = sv7[323] * sv7[236];
        sv7[328] = sv7[235] * sv7[239];
        sv7[329] = sv7[236] * sv7[239];
        sv7[330] = sv7[235] * sv7[240];
        sv7[331] = sv7[236] * sv7[240];
        sv7[332] = sv7[235] * sv7[241];
        sv7[333] = sv7[236] * sv7[241];
        sv7[334] = sp[48] * sv7[231];
        sv7[335] = sp[48] * sv7[232];
        sv7[336] = sp[49] * sv7[231];
        sv7[337] = sp[49] * sv7[232];
        sv7[338] = sv7[281] * std::pow(sv7[86], -1.25);
        sv7[339] = sv7[334] * sv7[338];
        sv7[340] = sv7[336] * sv7[338];
        sv7[341] = sv7[335] * sv7[338];
        sv7[342] = sv7[337] * sv7[338];
        sv7[343] = sv7[324] + sv7[339];
        sv7[344] = sv7[325] + sv7[340];
        sv7[345] = sv7[326] + sv7[341];
        sv7[346] = sv7[327] + sv7[342];
        sv7[347] = -1 * sv7[343] * sp[51];
        sv7[348] = -1 * sv7[344] * sp[51];
        sv7[349] = -1 * sv7[345] * sp[51];
        sv7[350] = -1 * sv7[346] * sp[51];
        sv7[351] = -1 * sv7[328] * sp[51];
        sv7[352] = -1 * sv7[329] * sp[51];
        sv7[353] = -1 * sv7[330] * sp[51];
        sv7[354] = -1 * sv7[331] * sp[51];
        sv7[355] = -1 * sv7[332] * sp[51];
        sv7[356] = -1 * sv7[333] * sp[51];
        sv7[357] = sv7[237] * sv7[235];
        sv7[358] = sv7[237] * sv7[236];
        sv7[359] = sv7[238] * sv7[235];
        sv7[360] = sv7[238] * sv7[236];
        sv7[361] = sv7[334] * sv7[224];
        sv7[362] = sv7[336] * sv7[224];
        sv7[363] = sv7[335] * sv7[224];
        sv7[364] = sv7[337] * sv7[224];
        sv7[365] = sv7[361] + sv7[357];
        sv7[366] = sv7[362] + sv7[358];
        sv7[367] = sv7[363] + sv7[359];
        sv7[368] = sv7[364] + sv7[360];
        sv7[369] = sv7[365] * sp[93];
        sv7[370] = sv7[366] * sp[93];
        sv7[371] = sv7[367] * sp[93];
        sv7[372] = sv7[368] * sp[93];
        sv7[373] = sv7[369] * sp[51];
        sv7[374] = sv7[370] * sp[51];
        sv7[375] = sv7[371] * sp[51];
        sv7[376] = sv7[372] * sp[51];
        sv7[377] = sv7[347] + sv7[373];
        sv7[378] = sv7[348] + sv7[374];
        sv7[379] = sv7[349] + sv7[375];
        sv7[380] = sv7[350] + sv7[376];
        sv7[381] = sv7[254] * sp[103];
        sv7[382] = sv7[255] * sp[103];
        sv7[383] = sv7[256] * sp[103];
        sv7[384] = sv7[257] * sp[103];
        sv7[385] = sv7[258] * sp[103];
        sv7[386] = sv7[259] * sp[103];
        sv7[387] = sv7[377] * sp[103];
        sv7[388] = sv7[378] * sp[103];
        sv7[389] = sv7[379] * sp[103];
        sv7[390] = sv7[380] * sp[103];
        sv7[391] = sv7[351] * sp[103];
        sv7[392] = sv7[352] * sp[103];
        sv7[393] = sv7[353] * sp[103];
        sv7[394] = sv7[354] * sp[103];
        sv7[395] = sv7[355] * sp[103];
        sv7[396] = sv7[356] * sp[103];
        const double fw0 = sv7[390] * weights7[iq];
        alignas(32) double TF0[5];
        for (int i = 0; i < 5; ++i)
            TF0[i] = fw0 * FE23_C0_D10_F_Q7[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF0[i][j] += TF0[i] * FE23_C0_D10_F_Q7[facet][iq][j];
        const double fw1 = sv7[394] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP0[i] += fw1 * FE23_C0_D10_F_Q7[facet][iq][i];
        const double fw2 = sv7[388] * weights7[iq];
        alignas(32) double TF1[5];
        for (int i = 0; i < 5; ++i)
            TF1[i] = fw2 * FE23_C0_D10_F_Q7[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF1[i][j] += TF1[i] * FE23_C0_D01_F_Q7[facet][iq][j];
        const double fw3 = sv7[396] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP1[i] += fw3 * FE23_C0_D10_F_Q7[facet][iq][i];
        const double fw4 = sv7[392] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP2[i] += fw4 * FE23_C0_D10_F_Q7[facet][iq][i];
        const double fw5 = sv7[384] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP3[j] += fw5 * FE23_C0_D10_F_Q7[facet][iq][j];
        const double fw6 = sv7[383] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP4[j] += fw6 * FE23_C0_D01_F_Q7[facet][iq][j];
        const double fw7 = sv7[389] * weights7[iq];
        alignas(32) double TF2[5];
        for (int i = 0; i < 5; ++i)
            TF2[i] = fw7 * FE23_C0_D01_F_Q7[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF2[i][j] += TF2[i] * FE23_C0_D10_F_Q7[facet][iq][j];
        const double fw8 = sv7[393] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP5[i] += fw8 * FE23_C0_D01_F_Q7[facet][iq][i];
        const double fw9 = sv7[387] * weights7[iq];
        alignas(32) double TF3[5];
        for (int i = 0; i < 5; ++i)
            TF3[i] = fw9 * FE23_C0_D01_F_Q7[facet][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF3[i][j] += TF3[i] * FE23_C0_D01_F_Q7[facet][iq][j];
        const double fw10 = sv7[395] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP6[i] += fw10 * FE23_C0_D01_F_Q7[facet][iq][i];
        const double fw11 = sv7[391] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP7[i] += fw11 * FE23_C0_D01_F_Q7[facet][iq][i];
        const double fw12 = sv7[386] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP8[j] += fw12 * FE23_C0_D10_F_Q7[facet][iq][j];
        const double fw13 = sv7[385] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP9[j] += fw13 * FE23_C0_D01_F_Q7[facet][iq][j];
        const double fw14 = sv7[382] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP10[j] += fw14 * FE23_C0_D10_F_Q7[facet][iq][j];
        const double fw15 = sv7[381] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP11[j] += fw15 * FE23_C0_D01_F_Q7[facet][iq][j];
    }
    std::fill(A, A + 36, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[3] = { 0, 1, 5 };
    static const int DM2[5] = { 0, 2, 3, 4, 5 };
    static const int DM3[3] = { 0, 2, 4 };
    static const int DM4[4] = { 0, 3, 4, 5 };
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[6 * DM0[i] + DM0[j]] += BF0[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[6 * DM0[i] + DM1[j]] += FE23_C0_D02_F_Q7[0][0][j] * TP0[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[6 * DM0[i] + DM2[j]] += BF1[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[6 * DM0[i] + DM3[j]] += FE23_C0_D02_F_Q7[0][0][j] * TP1[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[6 * DM0[i] + DM4[j]] += FE23_C0_D11_F_Q7[0][0][j] * TP2[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[6 * DM1[i] + DM0[j]] += FE23_C0_D02_F_Q7[0][0][i] * TP3[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[6 * DM1[i] + DM2[j]] += FE23_C0_D02_F_Q7[0][0][i] * TP4[j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[6 * DM2[i] + DM0[j]] += BF2[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[6 * DM2[i] + DM1[j]] += FE23_C0_D02_F_Q7[0][0][j] * TP5[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[6 * DM2[i] + DM2[j]] += BF3[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[6 * DM2[i] + DM3[j]] += FE23_C0_D02_F_Q7[0][0][j] * TP6[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[6 * DM2[i] + DM4[j]] += FE23_C0_D11_F_Q7[0][0][j] * TP7[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[6 * DM3[i] + DM0[j]] += FE23_C0_D02_F_Q7[0][0][i] * TP8[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[6 * DM3[i] + DM2[j]] += FE23_C0_D02_F_Q7[0][0][i] * TP9[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[6 * DM4[i] + DM0[j]] += FE23_C0_D11_F_Q7[0][0][i] * TP10[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[6 * DM4[i] + DM2[j]] += FE23_C0_D11_F_Q7[0][0][i] * TP11[j];
  }

};


class tvf4_interior_facet_integral_1_otherwise: public ufc::interior_facet_integral
{
public:

  tvf4_interior_facet_integral_1_otherwise() : ufc::interior_facet_integral()
  {

  }

  ~tvf4_interior_facet_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs_0,
                       const double * coordinate_dofs_1,
                       std::size_t facet_0,
                       std::size_t facet_1,
                       int cell_orientation_0,
                       int cell_orientation_1) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 13
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 13
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           13
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights7[7] = { 0.06474248308443491, 0.1398526957446383, 0.1909150252525594, 0.2089795918367347, 0.1909150252525595, 0.1398526957446383, 0.06474248308443506 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE42_C0_D01_F_Q7[3][7][5] =
        { { { 1.0, -0.898215824685518, 3.898215824685502, -0.1017841753144697, -3.898215824685518 },
            { 1.0, -0.4830623711987886, 3.483062371198774, -0.5169376288011989, -3.483062371198791 },
            { 1.0, 0.1883096972452069, 2.811690302754779, -1.188309697245194, -2.811690302754796 },
            { 1.0, 1.0, 1.999999999999985, -1.999999999999989, -2.0 },
            { 1.0, 1.811690302754797, 1.18830969724519, -2.811690302754784, -1.188309697245205 },
            { 1.0, 2.483062371198791, 0.5169376288011949, -3.48306237119878, -0.5169376288012085 },
            { 1.0, 2.898215824685519, 0.1017841753144673, -3.898215824685509, -0.1017841753144794 } },
          { { -2.898215824685522, -0.8982158246855179, 0.0, 3.796431649371042, 0.0 },
            { -2.483062371198794, -0.4830623711987884, 0.0, 2.966124742397585, 0.0 },
            { -1.811690302754799, 0.1883096972452066, 0.0, 1.623380605509597, 0.0 },
            { -1.0, 1.0, 0.0, 0.0, 0.0 },
            { -0.1883096972452111, 1.811690302754796, 0.0, -1.62338060550958, 0.0 },
            { 0.4830623711987839, 2.483062371198791, 0.0, -2.96612474239757, 0.0 },
            { 0.898215824685512, 2.898215824685519, 0.0, -3.796431649371025, 0.0 } },
          { { -2.898215824685522, -1.0, 0.1017841753144733, 3.898215824685524, -0.1017841753144805 },
            { -2.483062371198793, -1.0, 0.5169376288012006, 3.483062371198796, -0.5169376288012091 },
            { -1.811690302754799, -1.0, 1.188309697245195, 2.811690302754803, -1.188309697245205 },
            { -1.0, -1.0, 1.999999999999989, 2.00000000000001, -2.000000000000001 },
            { -0.18830969724521, -1.0, 2.811690302754782, 1.188309697245217, -2.811690302754796 },
            { 0.4830623711987844, -1.0, 3.483062371198775, 0.5169376288012226, -3.48306237119879 },
            { 0.8982158246855119, -1.0, 3.898215824685503, 0.1017841753144955, -3.898215824685518 } } };
    alignas(32) static const double FE42_C0_D02_F_Q7[1][1][3] = { { { 3.999999999999994, 4.0, -7.999999999999988 } } };
    alignas(32) static const double FE42_C0_D10_F_Q7[3][7][5] =
        { { { 1.0, 2.898215824685517, 0.1017841753144816, -0.1017841753144816, -3.898215824685518 },
            { 1.0, 2.483062371198788, 0.5169376288012102, -0.5169376288012102, -3.483062371198791 },
            { 1.0, 1.811690302754794, 1.188309697245204, -1.188309697245204, -2.811690302754795 },
            { 1.0, 1.0, 1.999999999999998, -1.999999999999998, -2.000000000000001 },
            { 1.0, 0.1883096972452061, 2.81169030275479, -2.81169030275479, -1.188309697245206 },
            { 1.0, -0.4830623711987888, 3.483062371198783, -3.483062371198783, -0.5169376288012106 },
            { 1.0, -0.8982158246855166, 3.898215824685509, -3.898215824685509, -0.1017841753144824 } },
          { { -2.898215824685519, -1.0, 0.101784175314481, -0.101784175314481, 3.898215824685523 },
            { -2.483062371198791, -1.0, 0.5169376288012099, -0.5169376288012099, 3.483062371198794 },
            { -1.811690302754795, -1.0, 1.188309697245204, -1.188309697245204, 2.811690302754798 },
            { -1.0, -1.0, 1.999999999999998, -1.999999999999998, 2.000000000000003 },
            { -0.1883096972452063, -1.0, 2.811690302754791, -2.811690302754791, 1.188309697245207 },
            { 0.4830623711987883, -1.0, 3.483062371198783, -3.483062371198783, 0.5169376288012122 },
            { 0.8982158246855162, -1.0, 3.898215824685509, -3.898215824685509, 0.1017841753144842 } },
          { { -2.898215824685519, -0.8982158246855215, 0.0, 0.0, 3.796431649371041 },
            { -2.483062371198789, -0.4830623711987921, 0.0, 0.0, 2.966124742397581 },
            { -1.811690302754794, 0.1883096972452033, 0.0, 0.0, 1.623380605509591 },
            { -1.0, 1.0, 0.0, 0.0, 0.0 },
            { -0.1883096972452039, 1.811690302754793, 0.0, 0.0, -1.623380605509589 },
            { 0.4830623711987906, 2.483062371198788, 0.0, 0.0, -2.966124742397579 },
            { 0.8982158246855185, 2.898215824685516, 0.0, 0.0, -3.796431649371035 } } };
    alignas(32) static const double FE42_C0_D11_F_Q7[1][1][4] = { { { 3.999999999999996, 3.999999999999997, -3.999999999999997, -4.000000000000003 } } };
    alignas(32) static const double FE7_C0_D01_F_Q7[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_r1_c0 = coordinate_dofs_1[0] * FE7_C0_D01_F_Q7[0][0][0] + coordinate_dofs_1[2] * FE7_C0_D01_F_Q7[0][0][1];
    const double J_r1_c3 = coordinate_dofs_1[1] * FE7_C0_D01_F_Q7[0][0][0] + coordinate_dofs_1[5] * FE7_C0_D01_F_Q7[0][0][1];
    const double J_r1_c1 = coordinate_dofs_1[0] * FE7_C0_D01_F_Q7[0][0][0] + coordinate_dofs_1[4] * FE7_C0_D01_F_Q7[0][0][1];
    const double J_r1_c2 = coordinate_dofs_1[1] * FE7_C0_D01_F_Q7[0][0][0] + coordinate_dofs_1[3] * FE7_C0_D01_F_Q7[0][0][1];
    const double J_r0_c0 = coordinate_dofs_0[0] * FE7_C0_D01_F_Q7[0][0][0] + coordinate_dofs_0[2] * FE7_C0_D01_F_Q7[0][0][1];
    const double J_r0_c3 = coordinate_dofs_0[1] * FE7_C0_D01_F_Q7[0][0][0] + coordinate_dofs_0[5] * FE7_C0_D01_F_Q7[0][0][1];
    const double J_r0_c1 = coordinate_dofs_0[0] * FE7_C0_D01_F_Q7[0][0][0] + coordinate_dofs_0[4] * FE7_C0_D01_F_Q7[0][0][1];
    const double J_r0_c2 = coordinate_dofs_0[1] * FE7_C0_D01_F_Q7[0][0][0] + coordinate_dofs_0[3] * FE7_C0_D01_F_Q7[0][0][1];
    const double w4_r0_d01 = w[4][0] * FE42_C0_D11_F_Q7[0][0][0] + w[4][3] * FE42_C0_D11_F_Q7[0][0][1] + w[4][4] * FE42_C0_D11_F_Q7[0][0][2] + w[4][5] * FE42_C0_D11_F_Q7[0][0][3];
    const double w4_r0_d00 = w[4][0] * FE42_C0_D02_F_Q7[0][0][0] + w[4][1] * FE42_C0_D02_F_Q7[0][0][1] + w[4][5] * FE42_C0_D02_F_Q7[0][0][2];
    const double w4_r0_d11 = w[4][0] * FE42_C0_D02_F_Q7[0][0][0] + w[4][2] * FE42_C0_D02_F_Q7[0][0][1] + w[4][4] * FE42_C0_D02_F_Q7[0][0][2];
    const double w4_r1_d01 = w[4][6] * FE42_C0_D11_F_Q7[0][0][0] + w[4][9] * FE42_C0_D11_F_Q7[0][0][1] + w[4][10] * FE42_C0_D11_F_Q7[0][0][2] + w[4][11] * FE42_C0_D11_F_Q7[0][0][3];
    const double w4_r1_d00 = w[4][6] * FE42_C0_D02_F_Q7[0][0][0] + w[4][7] * FE42_C0_D02_F_Q7[0][0][1] + w[4][11] * FE42_C0_D02_F_Q7[0][0][2];
    const double w4_r1_d11 = w[4][6] * FE42_C0_D02_F_Q7[0][0][0] + w[4][8] * FE42_C0_D02_F_Q7[0][0][1] + w[4][10] * FE42_C0_D02_F_Q7[0][0][2];
    alignas(32) double sp[190];
    sp[0] = J_r1_c0 * J_r1_c3;
    sp[1] = J_r1_c1 * J_r1_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_r1_c0 / sp[2];
    sp[4] = -1 * J_r1_c1 / sp[2];
    sp[5] = triangle_reference_facet_normals[facet_1][1] * sp[3];
    sp[6] = triangle_reference_facet_normals[facet_1][0] * sp[4];
    sp[7] = sp[5] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_r1_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet_1][0] * sp[9];
    sp[11] = -1 * J_r1_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet_1][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = J_r0_c0 * J_r0_c3;
    sp[20] = J_r0_c1 * J_r0_c2;
    sp[21] = sp[19] + -1 * sp[20];
    sp[22] = J_r0_c0 / sp[21];
    sp[23] = -1 * J_r0_c1 / sp[21];
    sp[24] = triangle_reference_facet_normals[facet_0][1] * sp[22];
    sp[25] = triangle_reference_facet_normals[facet_0][0] * sp[23];
    sp[26] = sp[24] + sp[25];
    sp[27] = sp[26] * sp[26];
    sp[28] = J_r0_c3 / sp[21];
    sp[29] = triangle_reference_facet_normals[facet_0][0] * sp[28];
    sp[30] = -1 * J_r0_c2 / sp[21];
    sp[31] = triangle_reference_facet_normals[facet_0][1] * sp[30];
    sp[32] = sp[29] + sp[31];
    sp[33] = sp[32] * sp[32];
    sp[34] = sp[27] + sp[33];
    sp[35] = std::sqrt(sp[34]);
    sp[36] = sp[26] / sp[35];
    sp[37] = sp[32] / sp[35];
    sp[38] = sp[22] * sp[28];
    sp[39] = sp[28] * sp[23];
    sp[40] = sp[23] * sp[30];
    sp[41] = sp[22] * sp[30];
    sp[42] = sp[38] + sp[40];
    sp[43] = sp[42] * w[2][0];
    sp[44] = sp[39] * w[2][0];
    sp[45] = sp[41] * w[2][0];
    sp[46] = sp[22] * sp[23];
    sp[47] = sp[22] * sp[22];
    sp[48] = sp[23] * sp[23];
    sp[49] = sp[46] + sp[46];
    sp[50] = sp[28] * sp[30];
    sp[51] = sp[28] * sp[28];
    sp[52] = sp[30] * sp[30];
    sp[53] = sp[50] + sp[50];
    sp[54] = sp[53] * w[2][0];
    sp[55] = sp[51] * w[2][0];
    sp[56] = sp[52] * w[2][0];
    sp[57] = sp[49] * w[2][0];
    sp[58] = sp[48] * w[2][0];
    sp[59] = sp[47] * w[2][0];
    sp[60] = sp[3] * sp[9];
    sp[61] = sp[9] * sp[4];
    sp[62] = sp[4] * sp[11];
    sp[63] = sp[3] * sp[11];
    sp[64] = sp[60] + sp[62];
    sp[65] = sp[64] * w[2][0];
    sp[66] = sp[61] * w[2][0];
    sp[67] = sp[63] * w[2][0];
    sp[68] = sp[3] * sp[4];
    sp[69] = sp[3] * sp[3];
    sp[70] = sp[4] * sp[4];
    sp[71] = sp[68] + sp[68];
    sp[72] = sp[9] * sp[11];
    sp[73] = sp[9] * sp[9];
    sp[74] = sp[11] * sp[11];
    sp[75] = sp[72] + sp[72];
    sp[76] = sp[75] * w[2][0];
    sp[77] = sp[73] * w[2][0];
    sp[78] = sp[74] * w[2][0];
    sp[79] = sp[71] * w[2][0];
    sp[80] = sp[70] * w[2][0];
    sp[81] = sp[69] * w[2][0];
    sp[82] = sp[22] * sp[36];
    sp[83] = sp[23] * sp[36];
    sp[84] = sp[30] * sp[37];
    sp[85] = sp[28] * sp[37];
    sp[86] = sp[82] + sp[84];
    sp[87] = sp[83] + sp[85];
    sp[88] = sp[3] * sp[17];
    sp[89] = sp[4] * sp[17];
    sp[90] = sp[11] * sp[18];
    sp[91] = sp[9] * sp[18];
    sp[92] = sp[88] + sp[90];
    sp[93] = sp[89] + sp[91];
    sp[94] = std::pow(w[2][0], 2) * w[0][0];
    sp[95] = sp[94] * w[1][0];
    sp[96] = w4_r0_d01 * sp[22];
    sp[97] = w4_r0_d00 * sp[23];
    sp[98] = sp[96] + sp[97];
    sp[99] = sp[98] * sp[28];
    sp[100] = w4_r0_d11 * sp[22];
    sp[101] = w4_r0_d01 * sp[23];
    sp[102] = sp[100] + sp[101];
    sp[103] = sp[102] * sp[30];
    sp[104] = sp[99] + sp[103];
    sp[105] = sp[104] * w[2][0];
    sp[106] = sp[102] * sp[22];
    sp[107] = sp[98] * sp[23];
    sp[108] = sp[106] + sp[107];
    sp[109] = w4_r0_d00 * sp[28];
    sp[110] = w4_r0_d01 * sp[30];
    sp[111] = sp[109] + sp[110];
    sp[112] = sp[111] * sp[28];
    sp[113] = w4_r0_d01 * sp[28];
    sp[114] = w4_r0_d11 * sp[30];
    sp[115] = sp[113] + sp[114];
    sp[116] = sp[115] * sp[30];
    sp[117] = sp[112] + sp[116];
    sp[118] = sp[117] * w[2][0];
    sp[119] = sp[108] * w[2][0];
    sp[120] = w4_r1_d01 * sp[3];
    sp[121] = w4_r1_d00 * sp[4];
    sp[122] = sp[120] + sp[121];
    sp[123] = sp[122] * sp[9];
    sp[124] = w4_r1_d11 * sp[3];
    sp[125] = w4_r1_d01 * sp[4];
    sp[126] = sp[124] + sp[125];
    sp[127] = sp[126] * sp[11];
    sp[128] = sp[123] + sp[127];
    sp[129] = sp[128] * w[2][0];
    sp[130] = sp[126] * sp[3];
    sp[131] = sp[122] * sp[4];
    sp[132] = sp[130] + sp[131];
    sp[133] = w4_r1_d00 * sp[9];
    sp[134] = w4_r1_d01 * sp[11];
    sp[135] = sp[133] + sp[134];
    sp[136] = sp[135] * sp[9];
    sp[137] = w4_r1_d01 * sp[9];
    sp[138] = w4_r1_d11 * sp[11];
    sp[139] = sp[137] + sp[138];
    sp[140] = sp[139] * sp[11];
    sp[141] = sp[136] + sp[140];
    sp[142] = sp[141] * w[2][0];
    sp[143] = sp[132] * w[2][0];
    sp[144] = (coordinate_dofs_0[2] - coordinate_dofs_0[4]) * (coordinate_dofs_0[2] - coordinate_dofs_0[4]);
    sp[145] = (coordinate_dofs_0[3] - coordinate_dofs_0[5]) * (coordinate_dofs_0[3] - coordinate_dofs_0[5]);
    sp[146] = sp[144] + sp[145];
    sp[147] = std::sqrt(sp[146]);
    sp[148] = (coordinate_dofs_0[0] - coordinate_dofs_0[4]) * (coordinate_dofs_0[0] - coordinate_dofs_0[4]);
    sp[149] = (coordinate_dofs_0[1] - coordinate_dofs_0[5]) * (coordinate_dofs_0[1] - coordinate_dofs_0[5]);
    sp[150] = sp[148] + sp[149];
    sp[151] = std::sqrt(sp[150]);
    sp[152] = sp[147] * sp[151];
    sp[153] = (coordinate_dofs_0[0] - coordinate_dofs_0[2]) * (coordinate_dofs_0[0] - coordinate_dofs_0[2]);
    sp[154] = (coordinate_dofs_0[1] - coordinate_dofs_0[3]) * (coordinate_dofs_0[1] - coordinate_dofs_0[3]);
    sp[155] = sp[153] + sp[154];
    sp[156] = std::sqrt(sp[155]);
    sp[157] = sp[152] * sp[156];
    sp[158] = triangle_reference_cell_volume * sp[21];
    sp[159] = std::abs(sp[158]);
    sp[160] = sp[157] / (4.0 * sp[159]);
    sp[161] = (coordinate_dofs_1[2] - coordinate_dofs_1[4]) * (coordinate_dofs_1[2] - coordinate_dofs_1[4]);
    sp[162] = (coordinate_dofs_1[3] - coordinate_dofs_1[5]) * (coordinate_dofs_1[3] - coordinate_dofs_1[5]);
    sp[163] = sp[161] + sp[162];
    sp[164] = std::sqrt(sp[163]);
    sp[165] = (coordinate_dofs_1[0] - coordinate_dofs_1[4]) * (coordinate_dofs_1[0] - coordinate_dofs_1[4]);
    sp[166] = (coordinate_dofs_1[1] - coordinate_dofs_1[5]) * (coordinate_dofs_1[1] - coordinate_dofs_1[5]);
    sp[167] = sp[165] + sp[166];
    sp[168] = std::sqrt(sp[167]);
    sp[169] = sp[164] * sp[168];
    sp[170] = (coordinate_dofs_1[0] - coordinate_dofs_1[2]) * (coordinate_dofs_1[0] - coordinate_dofs_1[2]);
    sp[171] = (coordinate_dofs_1[1] - coordinate_dofs_1[3]) * (coordinate_dofs_1[1] - coordinate_dofs_1[3]);
    sp[172] = sp[170] + sp[171];
    sp[173] = std::sqrt(sp[172]);
    sp[174] = sp[169] * sp[173];
    sp[175] = triangle_reference_cell_volume * sp[2];
    sp[176] = std::abs(sp[175]);
    sp[177] = sp[174] / (4.0 * sp[176]);
    sp[178] = 2.0 * sp[160] + 2.0 * sp[177];
    sp[179] = w[3][0] / (sp[178] / 2);
    sp[180] = J_r0_c0 * triangle_reference_facet_jacobian[facet_0][0][0];
    sp[181] = J_r0_c1 * triangle_reference_facet_jacobian[facet_0][1][0];
    sp[182] = sp[180] + sp[181];
    sp[183] = sp[182] * sp[182];
    sp[184] = triangle_reference_facet_jacobian[facet_0][0][0] * J_r0_c2;
    sp[185] = triangle_reference_facet_jacobian[facet_0][1][0] * J_r0_c3;
    sp[186] = sp[184] + sp[185];
    sp[187] = sp[186] * sp[186];
    sp[188] = sp[183] + sp[187];
    sp[189] = std::sqrt(sp[188]);
    alignas(32) double BF0[5][5] = {};
    alignas(32) double TP0[5] = {};
    alignas(32) double BF1[5][5] = {};
    alignas(32) double TP1[5] = {};
    alignas(32) double TP2[5] = {};
    alignas(32) double BF2[5][5] = {};
    alignas(32) double TP3[5] = {};
    alignas(32) double BF3[5][5] = {};
    alignas(32) double TP4[5] = {};
    alignas(32) double TP5[5] = {};
    alignas(32) double TP6[5] = {};
    alignas(32) double TP7[5] = {};
    alignas(32) double TP8[5] = {};
    alignas(32) double TP9[5] = {};
    alignas(32) double BF4[5][5] = {};
    alignas(32) double TP10[5] = {};
    alignas(32) double BF5[5][5] = {};
    alignas(32) double TP11[5] = {};
    alignas(32) double TP12[5] = {};
    alignas(32) double BF6[5][5] = {};
    alignas(32) double TP13[5] = {};
    alignas(32) double BF7[5][5] = {};
    alignas(32) double TP14[5] = {};
    alignas(32) double TP15[5] = {};
    alignas(32) double TP16[5] = {};
    alignas(32) double TP17[5] = {};
    alignas(32) double TP18[5] = {};
    alignas(32) double TP19[5] = {};
    alignas(32) double TP20[5] = {};
    alignas(32) double TP21[5] = {};
    alignas(32) double TP22[5] = {};
    alignas(32) double TP23[5] = {};
    alignas(32) double BF8[5][5] = {};
    alignas(32) double TP24[5] = {};
    alignas(32) double BF9[5][5] = {};
    alignas(32) double TP25[5] = {};
    alignas(32) double TP26[5] = {};
    alignas(32) double BF10[5][5] = {};
    alignas(32) double TP27[5] = {};
    alignas(32) double BF11[5][5] = {};
    alignas(32) double TP28[5] = {};
    alignas(32) double TP29[5] = {};
    alignas(32) double TP30[5] = {};
    alignas(32) double TP31[5] = {};
    alignas(32) double TP32[5] = {};
    alignas(32) double TP33[5] = {};
    alignas(32) double BF12[5][5] = {};
    alignas(32) double TP34[5] = {};
    alignas(32) double BF13[5][5] = {};
    alignas(32) double TP35[5] = {};
    alignas(32) double TP36[5] = {};
    alignas(32) double BF14[5][5] = {};
    alignas(32) double TP37[5] = {};
    alignas(32) double BF15[5][5] = {};
    alignas(32) double TP38[5] = {};
    alignas(32) double TP39[5] = {};
    alignas(32) double TP40[5] = {};
    alignas(32) double TP41[5] = {};
    alignas(32) double TP42[5] = {};
    alignas(32) double TP43[5] = {};
    alignas(32) double TP44[5] = {};
    alignas(32) double TP45[5] = {};
    alignas(32) double TP46[5] = {};
    alignas(32) double TP47[5] = {};
    for (int iq = 0; iq < 7; ++iq)
    {
        // Quadrature loop body setup (num_points=7)
        // Unstructured varying computations for num_points=7
        const double w4_r1_d1 = w[4][6] * FE42_C0_D01_F_Q7[facet_1][iq][0] + w[4][8] * FE42_C0_D01_F_Q7[facet_1][iq][1] + w[4][9] * FE42_C0_D01_F_Q7[facet_1][iq][2] + w[4][10] * FE42_C0_D01_F_Q7[facet_1][iq][3] + w[4][11] * FE42_C0_D01_F_Q7[facet_1][iq][4];
        const double w4_r1_d0 = w[4][6] * FE42_C0_D10_F_Q7[facet_1][iq][0] + w[4][7] * FE42_C0_D10_F_Q7[facet_1][iq][1] + w[4][9] * FE42_C0_D10_F_Q7[facet_1][iq][2] + w[4][10] * FE42_C0_D10_F_Q7[facet_1][iq][3] + w[4][11] * FE42_C0_D10_F_Q7[facet_1][iq][4];
        const double w4_r0_d1 = w[4][0] * FE42_C0_D01_F_Q7[facet_0][iq][0] + w[4][2] * FE42_C0_D01_F_Q7[facet_0][iq][1] + w[4][3] * FE42_C0_D01_F_Q7[facet_0][iq][2] + w[4][4] * FE42_C0_D01_F_Q7[facet_0][iq][3] + w[4][5] * FE42_C0_D01_F_Q7[facet_0][iq][4];
        const double w4_r0_d0 = w[4][0] * FE42_C0_D10_F_Q7[facet_0][iq][0] + w[4][1] * FE42_C0_D10_F_Q7[facet_0][iq][1] + w[4][3] * FE42_C0_D10_F_Q7[facet_0][iq][2] + w[4][4] * FE42_C0_D10_F_Q7[facet_0][iq][3] + w[4][5] * FE42_C0_D10_F_Q7[facet_0][iq][4];
        alignas(32) double sv7[1020];
        sv7[0] = w4_r1_d1 * sp[3];
        sv7[1] = w4_r1_d0 * sp[4];
        sv7[2] = sv7[0] + sv7[1];
        sv7[3] = sv7[2] * sp[17];
        sv7[4] = w4_r1_d0 * sp[9];
        sv7[5] = w4_r1_d1 * sp[11];
        sv7[6] = sv7[4] + sv7[5];
        sv7[7] = sv7[6] * sp[18];
        sv7[8] = sv7[3] + sv7[7];
        sv7[9] = sv7[2] * sv7[2];
        sv7[10] = sv7[6] * sv7[6];
        sv7[11] = sv7[9] + sv7[10];
        sv7[12] = sv7[11] + w[2][0];
        sv7[13] = sv7[8] * std::pow(sv7[12], -0.25);
        sv7[14] = w4_r0_d1 * sp[22];
        sv7[15] = w4_r0_d0 * sp[23];
        sv7[16] = sv7[14] + sv7[15];
        sv7[17] = sv7[16] * sp[36];
        sv7[18] = w4_r0_d0 * sp[28];
        sv7[19] = w4_r0_d1 * sp[30];
        sv7[20] = sv7[18] + sv7[19];
        sv7[21] = sv7[20] * sp[37];
        sv7[22] = sv7[17] + sv7[21];
        sv7[23] = sv7[16] * sv7[16];
        sv7[24] = sv7[20] * sv7[20];
        sv7[25] = sv7[23] + sv7[24];
        sv7[26] = sv7[25] + w[2][0];
        sv7[27] = sv7[22] * std::pow(sv7[26], -0.25);
        sv7[28] = -1 * sv7[13] + sv7[27];
        sv7[29] = sp[42] * sv7[23];
        sv7[30] = sv7[23] * sp[39];
        sv7[31] = sv7[23] * sp[41];
        sv7[32] = sv7[29] + sp[43];
        sv7[33] = sv7[30] + sp[44];
        sv7[34] = sv7[31] + sp[45];
        sv7[35] = sv7[16] * sv7[20];
        sv7[36] = sp[49] * sv7[35];
        sv7[37] = sv7[35] * sp[48];
        sv7[38] = sv7[35] * sp[47];
        sv7[39] = sv7[32] + -1 * sv7[36];
        sv7[40] = sv7[33] + -1 * sv7[37];
        sv7[41] = sv7[34] + -1 * sv7[38];
        sv7[42] = sv7[39] * sp[37];
        sv7[43] = sv7[40] * sp[37];
        sv7[44] = sv7[41] * sp[37];
        sv7[45] = sv7[42] * sp[36];
        sv7[46] = sv7[43] * sp[36];
        sv7[47] = sv7[44] * sp[36];
        sv7[48] = sp[53] * sv7[23];
        sv7[49] = sv7[23] * sp[51];
        sv7[50] = sv7[23] * sp[52];
        sv7[51] = sv7[48] + sp[54];
        sv7[52] = sv7[49] + sp[55];
        sv7[53] = sv7[50] + sp[56];
        sv7[54] = sp[42] * sv7[35];
        sv7[55] = sv7[35] * sp[39];
        sv7[56] = sv7[35] * sp[41];
        sv7[57] = sv7[51] + -1 * sv7[54];
        sv7[58] = sv7[52] + -1 * sv7[55];
        sv7[59] = sv7[53] + -1 * sv7[56];
        sv7[60] = sv7[57] * sp[37];
        sv7[61] = sv7[58] * sp[37];
        sv7[62] = sv7[59] * sp[37];
        sv7[63] = sv7[60] * sp[37];
        sv7[64] = sv7[61] * sp[37];
        sv7[65] = sv7[62] * sp[37];
        sv7[66] = sv7[45] + sv7[63];
        sv7[67] = sv7[46] + sv7[64];
        sv7[68] = sv7[47] + sv7[65];
        sv7[69] = sp[42] * sv7[24];
        sv7[70] = sv7[24] * sp[39];
        sv7[71] = sv7[24] * sp[41];
        sv7[72] = sv7[69] + sp[43];
        sv7[73] = sv7[70] + sp[44];
        sv7[74] = sv7[71] + sp[45];
        sv7[75] = sp[53] * sv7[35];
        sv7[76] = sv7[35] * sp[51];
        sv7[77] = sv7[35] * sp[52];
        sv7[78] = sv7[72] + -1 * sv7[75];
        sv7[79] = sv7[73] + -1 * sv7[76];
        sv7[80] = sv7[74] + -1 * sv7[77];
        sv7[81] = sv7[78] * sp[37];
        sv7[82] = sv7[79] * sp[37];
        sv7[83] = sv7[80] * sp[37];
        sv7[84] = sv7[81] * sp[36];
        sv7[85] = sv7[82] * sp[36];
        sv7[86] = sv7[83] * sp[36];
        sv7[87] = sv7[66] + sv7[84];
        sv7[88] = sv7[67] + sv7[85];
        sv7[89] = sv7[68] + sv7[86];
        sv7[90] = sp[49] * sv7[24];
        sv7[91] = sv7[24] * sp[48];
        sv7[92] = sv7[24] * sp[47];
        sv7[93] = sv7[90] + sp[57];
        sv7[94] = sv7[91] + sp[58];
        sv7[95] = sv7[92] + sp[59];
        sv7[96] = sv7[93] + -1 * sv7[54];
        sv7[97] = sv7[94] + -1 * sv7[55];
        sv7[98] = sv7[95] + -1 * sv7[56];
        sv7[99] = sv7[96] * sp[36];
        sv7[100] = sv7[97] * sp[36];
        sv7[101] = sv7[98] * sp[36];
        sv7[102] = sv7[99] * sp[36];
        sv7[103] = sv7[100] * sp[36];
        sv7[104] = sv7[101] * sp[36];
        sv7[105] = sv7[87] + sv7[102];
        sv7[106] = sv7[88] + sv7[103];
        sv7[107] = sv7[89] + sv7[104];
        sv7[108] = sv7[16] * sp[22];
        sv7[109] = sv7[16] * sp[23];
        sv7[110] = sv7[108] + sv7[108];
        sv7[111] = sv7[109] + sv7[109];
        sv7[112] = sv7[20] * sp[30];
        sv7[113] = sv7[20] * sp[28];
        sv7[114] = sv7[112] + sv7[112];
        sv7[115] = sv7[113] + sv7[113];
        sv7[116] = sv7[110] + sv7[114];
        sv7[117] = sv7[115] + sv7[111];
        sv7[118] = -1.25 * sv7[116] * std::pow(sv7[26], -2.25);
        sv7[119] = -1.25 * sv7[117] * std::pow(sv7[26], -2.25);
        sv7[120] = sv7[105] * sv7[118];
        sv7[121] = sv7[105] * sv7[119];
        sv7[122] = sv7[106] * sv7[118];
        sv7[123] = sv7[106] * sv7[119];
        sv7[124] = sv7[107] * sv7[118];
        sv7[125] = sv7[107] * sv7[119];
        sv7[126] = sv7[110] * sp[42];
        sv7[127] = sv7[110] * sp[39];
        sv7[128] = sv7[110] * sp[41];
        sv7[129] = sv7[111] * sp[42];
        sv7[130] = sv7[111] * sp[39];
        sv7[131] = sv7[111] * sp[41];
        sv7[132] = sv7[16] * sp[30];
        sv7[133] = sv7[16] * sp[28];
        sv7[134] = sv7[20] * sp[22];
        sv7[135] = sv7[20] * sp[23];
        sv7[136] = sv7[134] + sv7[132];
        sv7[137] = sv7[133] + sv7[135];
        sv7[138] = sp[49] * sv7[136];
        sv7[139] = sv7[136] * sp[48];
        sv7[140] = sv7[136] * sp[47];
        sv7[141] = sv7[137] * sp[49];
        sv7[142] = sv7[137] * sp[48];
        sv7[143] = sv7[137] * sp[47];
        sv7[144] = sv7[126] + -1 * sv7[138];
        sv7[145] = sv7[129] + -1 * sv7[141];
        sv7[146] = -1 * sv7[139] + sv7[127];
        sv7[147] = -1 * sv7[142] + sv7[130];
        sv7[148] = -1 * sv7[140] + sv7[128];
        sv7[149] = -1 * sv7[143] + sv7[131];
        sv7[150] = sv7[144] * sp[37];
        sv7[151] = sv7[145] * sp[37];
        sv7[152] = sv7[146] * sp[37];
        sv7[153] = sv7[147] * sp[37];
        sv7[154] = sv7[148] * sp[37];
        sv7[155] = sv7[149] * sp[37];
        sv7[156] = sv7[150] * sp[36];
        sv7[157] = sv7[151] * sp[36];
        sv7[158] = sv7[152] * sp[36];
        sv7[159] = sv7[153] * sp[36];
        sv7[160] = sv7[154] * sp[36];
        sv7[161] = sv7[155] * sp[36];
        sv7[162] = sv7[110] * sp[53];
        sv7[163] = sv7[110] * sp[51];
        sv7[164] = sv7[110] * sp[52];
        sv7[165] = sv7[111] * sp[53];
        sv7[166] = sv7[111] * sp[51];
        sv7[167] = sv7[111] * sp[52];
        sv7[168] = sv7[136] * sp[42];
        sv7[169] = sv7[136] * sp[39];
        sv7[170] = sv7[136] * sp[41];
        sv7[171] = sv7[137] * sp[42];
        sv7[172] = sv7[137] * sp[39];
        sv7[173] = sv7[137] * sp[41];
        sv7[174] = sv7[162] + -1 * sv7[168];
        sv7[175] = sv7[165] + -1 * sv7[171];
        sv7[176] = -1 * sv7[169] + sv7[163];
        sv7[177] = -1 * sv7[172] + sv7[166];
        sv7[178] = -1 * sv7[170] + sv7[164];
        sv7[179] = -1 * sv7[173] + sv7[167];
        sv7[180] = sv7[174] * sp[37];
        sv7[181] = sv7[175] * sp[37];
        sv7[182] = sv7[176] * sp[37];
        sv7[183] = sv7[177] * sp[37];
        sv7[184] = sv7[178] * sp[37];
        sv7[185] = sv7[179] * sp[37];
        sv7[186] = sv7[180] * sp[37];
        sv7[187] = sv7[181] * sp[37];
        sv7[188] = sv7[182] * sp[37];
        sv7[189] = sv7[183] * sp[37];
        sv7[190] = sv7[184] * sp[37];
        sv7[191] = sv7[185] * sp[37];
        sv7[192] = sv7[156] + sv7[186];
        sv7[193] = sv7[157] + sv7[187];
        sv7[194] = sv7[158] + sv7[188];
        sv7[195] = sv7[159] + sv7[189];
        sv7[196] = sv7[160] + sv7[190];
        sv7[197] = sv7[161] + sv7[191];
        sv7[198] = sv7[114] * sp[42];
        sv7[199] = sv7[114] * sp[39];
        sv7[200] = sv7[114] * sp[41];
        sv7[201] = sv7[115] * sp[42];
        sv7[202] = sv7[115] * sp[39];
        sv7[203] = sv7[115] * sp[41];
        sv7[204] = sv7[136] * sp[53];
        sv7[205] = sv7[136] * sp[51];
        sv7[206] = sv7[136] * sp[52];
        sv7[207] = sv7[137] * sp[53];
        sv7[208] = sv7[137] * sp[51];
        sv7[209] = sv7[137] * sp[52];
        sv7[210] = sv7[198] + -1 * sv7[204];
        sv7[211] = sv7[201] + -1 * sv7[207];
        sv7[212] = -1 * sv7[205] + sv7[199];
        sv7[213] = -1 * sv7[208] + sv7[202];
        sv7[214] = -1 * sv7[206] + sv7[200];
        sv7[215] = -1 * sv7[209] + sv7[203];
        sv7[216] = sv7[210] * sp[37];
        sv7[217] = sv7[211] * sp[37];
        sv7[218] = sv7[212] * sp[37];
        sv7[219] = sv7[213] * sp[37];
        sv7[220] = sv7[214] * sp[37];
        sv7[221] = sv7[215] * sp[37];
        sv7[222] = sv7[216] * sp[36];
        sv7[223] = sv7[217] * sp[36];
        sv7[224] = sv7[218] * sp[36];
        sv7[225] = sv7[219] * sp[36];
        sv7[226] = sv7[220] * sp[36];
        sv7[227] = sv7[221] * sp[36];
        sv7[228] = sv7[192] + sv7[222];
        sv7[229] = sv7[193] + sv7[223];
        sv7[230] = sv7[194] + sv7[224];
        sv7[231] = sv7[195] + sv7[225];
        sv7[232] = sv7[196] + sv7[226];
        sv7[233] = sv7[197] + sv7[227];
        sv7[234] = sp[49] * sv7[114];
        sv7[235] = sv7[114] * sp[48];
        sv7[236] = sv7[114] * sp[47];
        sv7[237] = sv7[115] * sp[49];
        sv7[238] = sv7[115] * sp[48];
        sv7[239] = sv7[115] * sp[47];
        sv7[240] = sv7[234] + -1 * sv7[168];
        sv7[241] = sv7[237] + -1 * sv7[171];
        sv7[242] = -1 * sv7[169] + sv7[235];
        sv7[243] = -1 * sv7[172] + sv7[238];
        sv7[244] = -1 * sv7[170] + sv7[236];
        sv7[245] = -1 * sv7[173] + sv7[239];
        sv7[246] = sv7[240] * sp[36];
        sv7[247] = sv7[241] * sp[36];
        sv7[248] = sv7[242] * sp[36];
        sv7[249] = sv7[243] * sp[36];
        sv7[250] = sv7[244] * sp[36];
        sv7[251] = sv7[245] * sp[36];
        sv7[252] = sv7[246] * sp[36];
        sv7[253] = sv7[247] * sp[36];
        sv7[254] = sv7[248] * sp[36];
        sv7[255] = sv7[249] * sp[36];
        sv7[256] = sv7[250] * sp[36];
        sv7[257] = sv7[251] * sp[36];
        sv7[258] = sv7[228] + sv7[252];
        sv7[259] = sv7[229] + sv7[253];
        sv7[260] = sv7[230] + sv7[254];
        sv7[261] = sv7[231] + sv7[255];
        sv7[262] = sv7[232] + sv7[256];
        sv7[263] = sv7[233] + sv7[257];
        sv7[264] = sv7[258] * std::pow(sv7[26], -1.25);
        sv7[265] = sv7[259] * std::pow(sv7[26], -1.25);
        sv7[266] = sv7[260] * std::pow(sv7[26], -1.25);
        sv7[267] = sv7[261] * std::pow(sv7[26], -1.25);
        sv7[268] = sv7[262] * std::pow(sv7[26], -1.25);
        sv7[269] = sv7[263] * std::pow(sv7[26], -1.25);
        sv7[270] = sv7[120] + sv7[264];
        sv7[271] = sv7[121] + sv7[265];
        sv7[272] = sv7[122] + sv7[266];
        sv7[273] = sv7[123] + sv7[267];
        sv7[274] = sv7[124] + sv7[268];
        sv7[275] = sv7[125] + sv7[269];
        sv7[276] = sp[64] * sv7[9];
        sv7[277] = sv7[9] * sp[61];
        sv7[278] = sv7[9] * sp[63];
        sv7[279] = sv7[276] + sp[65];
        sv7[280] = sv7[277] + sp[66];
        sv7[281] = sv7[278] + sp[67];
        sv7[282] = sv7[2] * sv7[6];
        sv7[283] = sp[71] * sv7[282];
        sv7[284] = sv7[282] * sp[70];
        sv7[285] = sv7[282] * sp[69];
        sv7[286] = sv7[279] + -1 * sv7[283];
        sv7[287] = sv7[280] + -1 * sv7[284];
        sv7[288] = sv7[281] + -1 * sv7[285];
        sv7[289] = sv7[286] * sp[18];
        sv7[290] = sv7[287] * sp[18];
        sv7[291] = sv7[288] * sp[18];
        sv7[292] = sv7[289] * sp[17];
        sv7[293] = sv7[290] * sp[17];
        sv7[294] = sv7[291] * sp[17];
        sv7[295] = sp[75] * sv7[9];
        sv7[296] = sv7[9] * sp[73];
        sv7[297] = sv7[9] * sp[74];
        sv7[298] = sv7[295] + sp[76];
        sv7[299] = sv7[296] + sp[77];
        sv7[300] = sv7[297] + sp[78];
        sv7[301] = sp[64] * sv7[282];
        sv7[302] = sv7[282] * sp[61];
        sv7[303] = sv7[282] * sp[63];
        sv7[304] = sv7[298] + -1 * sv7[301];
        sv7[305] = sv7[299] + -1 * sv7[302];
        sv7[306] = sv7[300] + -1 * sv7[303];
        sv7[307] = sv7[304] * sp[18];
        sv7[308] = sv7[305] * sp[18];
        sv7[309] = sv7[306] * sp[18];
        sv7[310] = sv7[307] * sp[18];
        sv7[311] = sv7[308] * sp[18];
        sv7[312] = sv7[309] * sp[18];
        sv7[313] = sv7[292] + sv7[310];
        sv7[314] = sv7[293] + sv7[311];
        sv7[315] = sv7[294] + sv7[312];
        sv7[316] = sp[64] * sv7[10];
        sv7[317] = sv7[10] * sp[61];
        sv7[318] = sv7[10] * sp[63];
        sv7[319] = sv7[316] + sp[65];
        sv7[320] = sv7[317] + sp[66];
        sv7[321] = sv7[318] + sp[67];
        sv7[322] = sp[75] * sv7[282];
        sv7[323] = sv7[282] * sp[73];
        sv7[324] = sv7[282] * sp[74];
        sv7[325] = sv7[319] + -1 * sv7[322];
        sv7[326] = sv7[320] + -1 * sv7[323];
        sv7[327] = sv7[321] + -1 * sv7[324];
        sv7[328] = sv7[325] * sp[18];
        sv7[329] = sv7[326] * sp[18];
        sv7[330] = sv7[327] * sp[18];
        sv7[331] = sv7[328] * sp[17];
        sv7[332] = sv7[329] * sp[17];
        sv7[333] = sv7[330] * sp[17];
        sv7[334] = sv7[313] + sv7[331];
        sv7[335] = sv7[314] + sv7[332];
        sv7[336] = sv7[315] + sv7[333];
        sv7[337] = sp[71] * sv7[10];
        sv7[338] = sv7[10] * sp[70];
        sv7[339] = sv7[10] * sp[69];
        sv7[340] = sv7[337] + sp[79];
        sv7[341] = sv7[338] + sp[80];
        sv7[342] = sv7[339] + sp[81];
        sv7[343] = sv7[340] + -1 * sv7[301];
        sv7[344] = sv7[341] + -1 * sv7[302];
        sv7[345] = sv7[342] + -1 * sv7[303];
        sv7[346] = sv7[343] * sp[17];
        sv7[347] = sv7[344] * sp[17];
        sv7[348] = sv7[345] * sp[17];
        sv7[349] = sv7[346] * sp[17];
        sv7[350] = sv7[347] * sp[17];
        sv7[351] = sv7[348] * sp[17];
        sv7[352] = sv7[334] + sv7[349];
        sv7[353] = sv7[335] + sv7[350];
        sv7[354] = sv7[336] + sv7[351];
        sv7[355] = sv7[2] * sp[3];
        sv7[356] = sv7[2] * sp[4];
        sv7[357] = sv7[355] + sv7[355];
        sv7[358] = sv7[356] + sv7[356];
        sv7[359] = sv7[6] * sp[11];
        sv7[360] = sv7[6] * sp[9];
        sv7[361] = sv7[359] + sv7[359];
        sv7[362] = sv7[360] + sv7[360];
        sv7[363] = sv7[357] + sv7[361];
        sv7[364] = sv7[362] + sv7[358];
        sv7[365] = -1.25 * sv7[363] * std::pow(sv7[12], -2.25);
        sv7[366] = -1.25 * sv7[364] * std::pow(sv7[12], -2.25);
        sv7[367] = sv7[352] * sv7[365];
        sv7[368] = sv7[352] * sv7[366];
        sv7[369] = sv7[353] * sv7[365];
        sv7[370] = sv7[353] * sv7[366];
        sv7[371] = sv7[354] * sv7[365];
        sv7[372] = sv7[354] * sv7[366];
        sv7[373] = sv7[357] * sp[64];
        sv7[374] = sv7[357] * sp[61];
        sv7[375] = sv7[357] * sp[63];
        sv7[376] = sv7[358] * sp[64];
        sv7[377] = sv7[358] * sp[61];
        sv7[378] = sv7[358] * sp[63];
        sv7[379] = sv7[2] * sp[11];
        sv7[380] = sv7[2] * sp[9];
        sv7[381] = sv7[6] * sp[3];
        sv7[382] = sv7[6] * sp[4];
        sv7[383] = sv7[381] + sv7[379];
        sv7[384] = sv7[380] + sv7[382];
        sv7[385] = sp[71] * sv7[383];
        sv7[386] = sv7[383] * sp[70];
        sv7[387] = sv7[383] * sp[69];
        sv7[388] = sv7[384] * sp[71];
        sv7[389] = sv7[384] * sp[70];
        sv7[390] = sv7[384] * sp[69];
        sv7[391] = sv7[373] + -1 * sv7[385];
        sv7[392] = sv7[376] + -1 * sv7[388];
        sv7[393] = -1 * sv7[386] + sv7[374];
        sv7[394] = -1 * sv7[389] + sv7[377];
        sv7[395] = -1 * sv7[387] + sv7[375];
        sv7[396] = -1 * sv7[390] + sv7[378];
        sv7[397] = sv7[391] * sp[18];
        sv7[398] = sv7[392] * sp[18];
        sv7[399] = sv7[393] * sp[18];
        sv7[400] = sv7[394] * sp[18];
        sv7[401] = sv7[395] * sp[18];
        sv7[402] = sv7[396] * sp[18];
        sv7[403] = sv7[397] * sp[17];
        sv7[404] = sv7[398] * sp[17];
        sv7[405] = sv7[399] * sp[17];
        sv7[406] = sv7[400] * sp[17];
        sv7[407] = sv7[401] * sp[17];
        sv7[408] = sv7[402] * sp[17];
        sv7[409] = sv7[357] * sp[75];
        sv7[410] = sv7[357] * sp[73];
        sv7[411] = sv7[357] * sp[74];
        sv7[412] = sv7[358] * sp[75];
        sv7[413] = sv7[358] * sp[73];
        sv7[414] = sv7[358] * sp[74];
        sv7[415] = sv7[383] * sp[64];
        sv7[416] = sv7[383] * sp[61];
        sv7[417] = sv7[383] * sp[63];
        sv7[418] = sv7[384] * sp[64];
        sv7[419] = sv7[384] * sp[61];
        sv7[420] = sv7[384] * sp[63];
        sv7[421] = sv7[409] + -1 * sv7[415];
        sv7[422] = sv7[412] + -1 * sv7[418];
        sv7[423] = -1 * sv7[416] + sv7[410];
        sv7[424] = -1 * sv7[419] + sv7[413];
        sv7[425] = -1 * sv7[417] + sv7[411];
        sv7[426] = -1 * sv7[420] + sv7[414];
        sv7[427] = sv7[421] * sp[18];
        sv7[428] = sv7[422] * sp[18];
        sv7[429] = sv7[423] * sp[18];
        sv7[430] = sv7[424] * sp[18];
        sv7[431] = sv7[425] * sp[18];
        sv7[432] = sv7[426] * sp[18];
        sv7[433] = sv7[427] * sp[18];
        sv7[434] = sv7[428] * sp[18];
        sv7[435] = sv7[429] * sp[18];
        sv7[436] = sv7[430] * sp[18];
        sv7[437] = sv7[431] * sp[18];
        sv7[438] = sv7[432] * sp[18];
        sv7[439] = sv7[403] + sv7[433];
        sv7[440] = sv7[404] + sv7[434];
        sv7[441] = sv7[405] + sv7[435];
        sv7[442] = sv7[406] + sv7[436];
        sv7[443] = sv7[407] + sv7[437];
        sv7[444] = sv7[408] + sv7[438];
        sv7[445] = sv7[361] * sp[64];
        sv7[446] = sv7[361] * sp[61];
        sv7[447] = sv7[361] * sp[63];
        sv7[448] = sv7[362] * sp[64];
        sv7[449] = sv7[362] * sp[61];
        sv7[450] = sv7[362] * sp[63];
        sv7[451] = sv7[383] * sp[75];
        sv7[452] = sv7[383] * sp[73];
        sv7[453] = sv7[383] * sp[74];
        sv7[454] = sv7[384] * sp[75];
        sv7[455] = sv7[384] * sp[73];
        sv7[456] = sv7[384] * sp[74];
        sv7[457] = sv7[445] + -1 * sv7[451];
        sv7[458] = sv7[448] + -1 * sv7[454];
        sv7[459] = -1 * sv7[452] + sv7[446];
        sv7[460] = -1 * sv7[455] + sv7[449];
        sv7[461] = -1 * sv7[453] + sv7[447];
        sv7[462] = -1 * sv7[456] + sv7[450];
        sv7[463] = sv7[457] * sp[18];
        sv7[464] = sv7[458] * sp[18];
        sv7[465] = sv7[459] * sp[18];
        sv7[466] = sv7[460] * sp[18];
        sv7[467] = sv7[461] * sp[18];
        sv7[468] = sv7[462] * sp[18];
        sv7[469] = sv7[463] * sp[17];
        sv7[470] = sv7[464] * sp[17];
        sv7[471] = sv7[465] * sp[17];
        sv7[472] = sv7[466] * sp[17];
        sv7[473] = sv7[467] * sp[17];
        sv7[474] = sv7[468] * sp[17];
        sv7[475] = sv7[439] + sv7[469];
        sv7[476] = sv7[440] + sv7[470];
        sv7[477] = sv7[441] + sv7[471];
        sv7[478] = sv7[442] + sv7[472];
        sv7[479] = sv7[443] + sv7[473];
        sv7[480] = sv7[444] + sv7[474];
        sv7[481] = sp[71] * sv7[361];
        sv7[482] = sv7[361] * sp[70];
        sv7[483] = sv7[361] * sp[69];
        sv7[484] = sv7[362] * sp[71];
        sv7[485] = sv7[362] * sp[70];
        sv7[486] = sv7[362] * sp[69];
        sv7[487] = sv7[481] + -1 * sv7[415];
        sv7[488] = sv7[484] + -1 * sv7[418];
        sv7[489] = -1 * sv7[416] + sv7[482];
        sv7[490] = -1 * sv7[419] + sv7[485];
        sv7[491] = -1 * sv7[417] + sv7[483];
        sv7[492] = -1 * sv7[420] + sv7[486];
        sv7[493] = sv7[487] * sp[17];
        sv7[494] = sv7[488] * sp[17];
        sv7[495] = sv7[489] * sp[17];
        sv7[496] = sv7[490] * sp[17];
        sv7[497] = sv7[491] * sp[17];
        sv7[498] = sv7[492] * sp[17];
        sv7[499] = sv7[493] * sp[17];
        sv7[500] = sv7[494] * sp[17];
        sv7[501] = sv7[495] * sp[17];
        sv7[502] = sv7[496] * sp[17];
        sv7[503] = sv7[497] * sp[17];
        sv7[504] = sv7[498] * sp[17];
        sv7[505] = sv7[475] + sv7[499];
        sv7[506] = sv7[476] + sv7[500];
        sv7[507] = sv7[477] + sv7[501];
        sv7[508] = sv7[478] + sv7[502];
        sv7[509] = sv7[479] + sv7[503];
        sv7[510] = sv7[480] + sv7[504];
        sv7[511] = sv7[505] * std::pow(sv7[12], -1.25);
        sv7[512] = sv7[506] * std::pow(sv7[12], -1.25);
        sv7[513] = sv7[507] * std::pow(sv7[12], -1.25);
        sv7[514] = sv7[508] * std::pow(sv7[12], -1.25);
        sv7[515] = sv7[509] * std::pow(sv7[12], -1.25);
        sv7[516] = sv7[510] * std::pow(sv7[12], -1.25);
        sv7[517] = sv7[367] + sv7[511];
        sv7[518] = sv7[368] + sv7[512];
        sv7[519] = sv7[369] + sv7[513];
        sv7[520] = sv7[370] + sv7[514];
        sv7[521] = sv7[371] + sv7[515];
        sv7[522] = sv7[372] + sv7[516];
        sv7[523] = sv7[28] * (0.5 * sv7[270]);
        sv7[524] = sv7[28] * (0.5 * sv7[271]);
        sv7[525] = sv7[28] * (0.5 * sv7[272]);
        sv7[526] = sv7[28] * (0.5 * sv7[273]);
        sv7[527] = sv7[28] * (0.5 * sv7[274]);
        sv7[528] = sv7[28] * (0.5 * sv7[275]);
        sv7[529] = sv7[28] * (0.5 * sv7[517]);
        sv7[530] = sv7[28] * (0.5 * sv7[518]);
        sv7[531] = sv7[28] * (0.5 * sv7[519]);
        sv7[532] = sv7[28] * (0.5 * sv7[520]);
        sv7[533] = sv7[28] * (0.5 * sv7[521]);
        sv7[534] = sv7[28] * (0.5 * sv7[522]);
        sv7[535] = -0.25 * sv7[116] * std::pow(sv7[26], -1.25);
        sv7[536] = -0.25 * sv7[117] * std::pow(sv7[26], -1.25);
        sv7[537] = sv7[22] * sv7[535];
        sv7[538] = sv7[22] * sv7[536];
        sv7[539] = sp[86] * std::pow(sv7[26], -0.25);
        sv7[540] = sp[87] * std::pow(sv7[26], -0.25);
        sv7[541] = sv7[537] + sv7[539];
        sv7[542] = sv7[538] + sv7[540];
        sv7[543] = -0.25 * sv7[363] * std::pow(sv7[12], -1.25);
        sv7[544] = -0.25 * sv7[364] * std::pow(sv7[12], -1.25);
        sv7[545] = sv7[8] * sv7[543];
        sv7[546] = sv7[8] * sv7[544];
        sv7[547] = sp[92] * std::pow(sv7[12], -0.25);
        sv7[548] = sp[93] * std::pow(sv7[12], -0.25);
        sv7[549] = sv7[545] + sv7[547];
        sv7[550] = sv7[546] + sv7[548];
        sv7[551] = sv7[105] * std::pow(sv7[26], -1.25);
        sv7[552] = sv7[106] * std::pow(sv7[26], -1.25);
        sv7[553] = sv7[107] * std::pow(sv7[26], -1.25);
        sv7[554] = sv7[352] * std::pow(sv7[12], -1.25);
        sv7[555] = sv7[353] * std::pow(sv7[12], -1.25);
        sv7[556] = sv7[354] * std::pow(sv7[12], -1.25);
        sv7[557] = sv7[541] * (0.5 * sv7[551]);
        sv7[558] = sv7[541] * (0.5 * sv7[552]);
        sv7[559] = sv7[541] * (0.5 * sv7[553]);
        sv7[560] = sv7[541] * (0.5 * sv7[554]);
        sv7[561] = sv7[541] * (0.5 * sv7[555]);
        sv7[562] = sv7[541] * (0.5 * sv7[556]);
        sv7[563] = sv7[542] * (0.5 * sv7[551]);
        sv7[564] = sv7[542] * (0.5 * sv7[552]);
        sv7[565] = sv7[542] * (0.5 * sv7[553]);
        sv7[566] = sv7[542] * (0.5 * sv7[554]);
        sv7[567] = sv7[542] * (0.5 * sv7[555]);
        sv7[568] = sv7[542] * (0.5 * sv7[556]);
        sv7[569] = -1 * sv7[549] * (0.5 * sv7[551]);
        sv7[570] = -1 * sv7[549] * (0.5 * sv7[552]);
        sv7[571] = -1 * sv7[549] * (0.5 * sv7[553]);
        sv7[572] = -1 * sv7[549] * (0.5 * sv7[554]);
        sv7[573] = -1 * sv7[549] * (0.5 * sv7[555]);
        sv7[574] = -1 * sv7[549] * (0.5 * sv7[556]);
        sv7[575] = -1 * sv7[550] * (0.5 * sv7[551]);
        sv7[576] = -1 * sv7[550] * (0.5 * sv7[552]);
        sv7[577] = -1 * sv7[550] * (0.5 * sv7[553]);
        sv7[578] = -1 * sv7[550] * (0.5 * sv7[554]);
        sv7[579] = -1 * sv7[550] * (0.5 * sv7[555]);
        sv7[580] = -1 * sv7[550] * (0.5 * sv7[556]);
        sv7[581] = sv7[523] + sv7[557];
        sv7[582] = sv7[524] + sv7[563];
        sv7[583] = sv7[525] + sv7[558];
        sv7[584] = sv7[526] + sv7[564];
        sv7[585] = sv7[527] + sv7[559];
        sv7[586] = sv7[528] + sv7[565];
        sv7[587] = sv7[529] + sv7[572];
        sv7[588] = sv7[530] + sv7[578];
        sv7[589] = sv7[531] + sv7[573];
        sv7[590] = sv7[532] + sv7[579];
        sv7[591] = sv7[533] + sv7[574];
        sv7[592] = sv7[534] + sv7[580];
        sv7[593] = -1 * sv7[581] * sp[95];
        sv7[594] = -1 * sv7[582] * sp[95];
        sv7[595] = -1 * sv7[569] * sp[95];
        sv7[596] = -1 * sv7[575] * sp[95];
        sv7[597] = -1 * sv7[583] * sp[95];
        sv7[598] = -1 * sv7[584] * sp[95];
        sv7[599] = -1 * sv7[570] * sp[95];
        sv7[600] = -1 * sv7[576] * sp[95];
        sv7[601] = -1 * sv7[585] * sp[95];
        sv7[602] = -1 * sv7[586] * sp[95];
        sv7[603] = -1 * sv7[571] * sp[95];
        sv7[604] = -1 * sv7[577] * sp[95];
        sv7[605] = -1 * sv7[560] * sp[95];
        sv7[606] = -1 * sv7[561] * sp[95];
        sv7[607] = -1 * sv7[562] * sp[95];
        sv7[608] = -1 * sv7[566] * sp[95];
        sv7[609] = -1 * sv7[567] * sp[95];
        sv7[610] = -1 * sv7[568] * sp[95];
        sv7[611] = -1 * sv7[587] * sp[95];
        sv7[612] = -1 * sv7[588] * sp[95];
        sv7[613] = -1 * sv7[589] * sp[95];
        sv7[614] = -1 * sv7[590] * sp[95];
        sv7[615] = -1 * sv7[591] * sp[95];
        sv7[616] = -1 * sv7[592] * sp[95];
        sv7[617] = sp[104] * sv7[23];
        sv7[618] = sv7[617] + sp[105];
        sv7[619] = sp[108] * sv7[35];
        sv7[620] = sv7[618] + -1 * sv7[619];
        sv7[621] = sv7[620] * sp[37];
        sv7[622] = sv7[621] * sp[36];
        sv7[623] = sp[117] * sv7[23];
        sv7[624] = sv7[623] + sp[118];
        sv7[625] = sp[104] * sv7[35];
        sv7[626] = sv7[624] + -1 * sv7[625];
        sv7[627] = sv7[626] * sp[37];
        sv7[628] = sv7[627] * sp[37];
        sv7[629] = sv7[622] + sv7[628];
        sv7[630] = sp[104] * sv7[24];
        sv7[631] = sv7[630] + sp[105];
        sv7[632] = sp[117] * sv7[35];
        sv7[633] = sv7[631] + -1 * sv7[632];
        sv7[634] = sv7[633] * sp[37];
        sv7[635] = sv7[634] * sp[36];
        sv7[636] = sv7[629] + sv7[635];
        sv7[637] = sp[108] * sv7[24];
        sv7[638] = sv7[637] + sp[119];
        sv7[639] = sv7[638] + -1 * sv7[625];
        sv7[640] = sv7[639] * sp[36];
        sv7[641] = sv7[640] * sp[36];
        sv7[642] = sv7[636] + sv7[641];
        sv7[643] = sv7[642] * sv7[118];
        sv7[644] = sv7[642] * sv7[119];
        sv7[645] = sv7[110] * sp[104];
        sv7[646] = sv7[111] * sp[104];
        sv7[647] = sp[108] * sv7[136];
        sv7[648] = sp[108] * sv7[137];
        sv7[649] = sv7[645] + -1 * sv7[647];
        sv7[650] = sv7[646] + -1 * sv7[648];
        sv7[651] = sv7[649] * sp[37];
        sv7[652] = sv7[650] * sp[37];
        sv7[653] = sv7[651] * sp[36];
        sv7[654] = sv7[652] * sp[36];
        sv7[655] = sv7[110] * sp[117];
        sv7[656] = sv7[111] * sp[117];
        sv7[657] = sp[104] * sv7[136];
        sv7[658] = sv7[137] * sp[104];
        sv7[659] = sv7[655] + -1 * sv7[657];
        sv7[660] = sv7[656] + -1 * sv7[658];
        sv7[661] = sv7[659] * sp[37];
        sv7[662] = sv7[660] * sp[37];
        sv7[663] = sv7[661] * sp[37];
        sv7[664] = sv7[662] * sp[37];
        sv7[665] = sv7[653] + sv7[663];
        sv7[666] = sv7[654] + sv7[664];
        sv7[667] = sp[104] * sv7[114];
        sv7[668] = sv7[115] * sp[104];
        sv7[669] = sv7[136] * sp[117];
        sv7[670] = sv7[137] * sp[117];
        sv7[671] = sv7[667] + -1 * sv7[669];
        sv7[672] = sv7[668] + -1 * sv7[670];
        sv7[673] = sv7[671] * sp[37];
        sv7[674] = sv7[672] * sp[37];
        sv7[675] = sv7[673] * sp[36];
        sv7[676] = sv7[674] * sp[36];
        sv7[677] = sv7[665] + sv7[675];
        sv7[678] = sv7[666] + sv7[676];
        sv7[679] = sp[108] * sv7[114];
        sv7[680] = sv7[115] * sp[108];
        sv7[681] = sv7[679] + -1 * sv7[657];
        sv7[682] = sv7[680] + -1 * sv7[658];
        sv7[683] = sv7[681] * sp[36];
        sv7[684] = sv7[682] * sp[36];
        sv7[685] = sv7[683] * sp[36];
        sv7[686] = sv7[684] * sp[36];
        sv7[687] = sv7[677] + sv7[685];
        sv7[688] = sv7[678] + sv7[686];
        sv7[689] = sv7[687] * std::pow(sv7[26], -1.25);
        sv7[690] = sv7[688] * std::pow(sv7[26], -1.25);
        sv7[691] = sv7[643] + sv7[689];
        sv7[692] = sv7[644] + sv7[690];
        sv7[693] = sp[128] * sv7[9];
        sv7[694] = sv7[693] + sp[129];
        sv7[695] = sp[132] * sv7[282];
        sv7[696] = sv7[694] + -1 * sv7[695];
        sv7[697] = sv7[696] * sp[18];
        sv7[698] = sv7[697] * sp[17];
        sv7[699] = sp[141] * sv7[9];
        sv7[700] = sv7[699] + sp[142];
        sv7[701] = sp[128] * sv7[282];
        sv7[702] = sv7[700] + -1 * sv7[701];
        sv7[703] = sv7[702] * sp[18];
        sv7[704] = sv7[703] * sp[18];
        sv7[705] = sv7[698] + sv7[704];
        sv7[706] = sp[128] * sv7[10];
        sv7[707] = sv7[706] + sp[129];
        sv7[708] = sp[141] * sv7[282];
        sv7[709] = sv7[707] + -1 * sv7[708];
        sv7[710] = sv7[709] * sp[18];
        sv7[711] = sv7[710] * sp[17];
        sv7[712] = sv7[705] + sv7[711];
        sv7[713] = sp[132] * sv7[10];
        sv7[714] = sv7[713] + sp[143];
        sv7[715] = sv7[714] + -1 * sv7[701];
        sv7[716] = sv7[715] * sp[17];
        sv7[717] = sv7[716] * sp[17];
        sv7[718] = sv7[712] + sv7[717];
        sv7[719] = sv7[718] * sv7[365];
        sv7[720] = sv7[718] * sv7[366];
        sv7[721] = sv7[357] * sp[128];
        sv7[722] = sv7[358] * sp[128];
        sv7[723] = sp[132] * sv7[383];
        sv7[724] = sp[132] * sv7[384];
        sv7[725] = sv7[721] + -1 * sv7[723];
        sv7[726] = sv7[722] + -1 * sv7[724];
        sv7[727] = sv7[725] * sp[18];
        sv7[728] = sv7[726] * sp[18];
        sv7[729] = sv7[727] * sp[17];
        sv7[730] = sv7[728] * sp[17];
        sv7[731] = sv7[357] * sp[141];
        sv7[732] = sv7[358] * sp[141];
        sv7[733] = sp[128] * sv7[383];
        sv7[734] = sv7[384] * sp[128];
        sv7[735] = sv7[731] + -1 * sv7[733];
        sv7[736] = sv7[732] + -1 * sv7[734];
        sv7[737] = sv7[735] * sp[18];
        sv7[738] = sv7[736] * sp[18];
        sv7[739] = sv7[737] * sp[18];
        sv7[740] = sv7[738] * sp[18];
        sv7[741] = sv7[729] + sv7[739];
        sv7[742] = sv7[730] + sv7[740];
        sv7[743] = sp[128] * sv7[361];
        sv7[744] = sv7[362] * sp[128];
        sv7[745] = sv7[383] * sp[141];
        sv7[746] = sv7[384] * sp[141];
        sv7[747] = sv7[743] + -1 * sv7[745];
        sv7[748] = sv7[744] + -1 * sv7[746];
        sv7[749] = sv7[747] * sp[18];
        sv7[750] = sv7[748] * sp[18];
        sv7[751] = sv7[749] * sp[17];
        sv7[752] = sv7[750] * sp[17];
        sv7[753] = sv7[741] + sv7[751];
        sv7[754] = sv7[742] + sv7[752];
        sv7[755] = sp[132] * sv7[361];
        sv7[756] = sv7[362] * sp[132];
        sv7[757] = sv7[755] + -1 * sv7[733];
        sv7[758] = sv7[756] + -1 * sv7[734];
        sv7[759] = sv7[757] * sp[17];
        sv7[760] = sv7[758] * sp[17];
        sv7[761] = sv7[759] * sp[17];
        sv7[762] = sv7[760] * sp[17];
        sv7[763] = sv7[753] + sv7[761];
        sv7[764] = sv7[754] + sv7[762];
        sv7[765] = sv7[763] * std::pow(sv7[12], -1.25);
        sv7[766] = sv7[764] * std::pow(sv7[12], -1.25);
        sv7[767] = sv7[719] + sv7[765];
        sv7[768] = sv7[720] + sv7[766];
        sv7[769] = 0.5 * sv7[691] * (-1 * sv7[547]);
        sv7[770] = 0.5 * sv7[692] * (-1 * sv7[547]);
        sv7[771] = 0.5 * sv7[767] * (-1 * sv7[547]);
        sv7[772] = 0.5 * sv7[768] * (-1 * sv7[547]);
        sv7[773] = -1 * sv7[547] * (0.5 * sv7[551]);
        sv7[774] = -1 * sv7[547] * (0.5 * sv7[552]);
        sv7[775] = -1 * sv7[547] * (0.5 * sv7[553]);
        sv7[776] = -1 * sv7[547] * (0.5 * sv7[554]);
        sv7[777] = -1 * sv7[547] * (0.5 * sv7[555]);
        sv7[778] = -1 * sv7[547] * (0.5 * sv7[556]);
        sv7[779] = 0.5 * sv7[691] * (-1 * sv7[548]);
        sv7[780] = 0.5 * sv7[692] * (-1 * sv7[548]);
        sv7[781] = 0.5 * sv7[767] * (-1 * sv7[548]);
        sv7[782] = 0.5 * sv7[768] * (-1 * sv7[548]);
        sv7[783] = -1 * sv7[548] * (0.5 * sv7[551]);
        sv7[784] = -1 * sv7[548] * (0.5 * sv7[552]);
        sv7[785] = -1 * sv7[548] * (0.5 * sv7[553]);
        sv7[786] = -1 * sv7[548] * (0.5 * sv7[554]);
        sv7[787] = -1 * sv7[548] * (0.5 * sv7[555]);
        sv7[788] = -1 * sv7[548] * (0.5 * sv7[556]);
        sv7[789] = 0.5 * sv7[691] * sv7[539];
        sv7[790] = 0.5 * sv7[692] * sv7[539];
        sv7[791] = 0.5 * sv7[767] * sv7[539];
        sv7[792] = 0.5 * sv7[768] * sv7[539];
        sv7[793] = 0.5 * sv7[551] * sv7[539];
        sv7[794] = 0.5 * sv7[552] * sv7[539];
        sv7[795] = 0.5 * sv7[553] * sv7[539];
        sv7[796] = 0.5 * sv7[554] * sv7[539];
        sv7[797] = 0.5 * sv7[555] * sv7[539];
        sv7[798] = 0.5 * sv7[556] * sv7[539];
        sv7[799] = 0.5 * sv7[691] * sv7[540];
        sv7[800] = 0.5 * sv7[692] * sv7[540];
        sv7[801] = 0.5 * sv7[767] * sv7[540];
        sv7[802] = 0.5 * sv7[768] * sv7[540];
        sv7[803] = 0.5 * sv7[551] * sv7[540];
        sv7[804] = 0.5 * sv7[552] * sv7[540];
        sv7[805] = 0.5 * sv7[553] * sv7[540];
        sv7[806] = 0.5 * sv7[554] * sv7[540];
        sv7[807] = 0.5 * sv7[555] * sv7[540];
        sv7[808] = 0.5 * sv7[556] * sv7[540];
        sv7[809] = sp[92] * sv7[543];
        sv7[810] = sp[92] * sv7[544];
        sv7[811] = sp[93] * sv7[543];
        sv7[812] = sp[93] * sv7[544];
        sv7[813] = sp[86] * sv7[535];
        sv7[814] = sp[86] * sv7[536];
        sv7[815] = sp[87] * sv7[535];
        sv7[816] = sp[87] * sv7[536];
        sv7[817] = sv7[642] * std::pow(sv7[26], -1.25);
        sv7[818] = sv7[718] * std::pow(sv7[12], -1.25);
        sv7[819] = sv7[817] + sv7[818];
        sv7[820] = 0.5 * sv7[819] * sv7[813];
        sv7[821] = 0.5 * sv7[819] * sv7[815];
        sv7[822] = 0.5 * sv7[819] * sv7[814];
        sv7[823] = 0.5 * sv7[819] * sv7[816];
        sv7[824] = 0.5 * sv7[819] * (-1 * sv7[809]);
        sv7[825] = 0.5 * sv7[819] * (-1 * sv7[811]);
        sv7[826] = 0.5 * sv7[819] * (-1 * sv7[810]);
        sv7[827] = 0.5 * sv7[819] * (-1 * sv7[812]);
        sv7[828] = sv7[820] + sv7[789];
        sv7[829] = sv7[821] + sv7[799];
        sv7[830] = sv7[822] + sv7[790];
        sv7[831] = sv7[823] + sv7[800];
        sv7[832] = sv7[824] + sv7[771];
        sv7[833] = sv7[825] + sv7[781];
        sv7[834] = sv7[826] + sv7[772];
        sv7[835] = sv7[827] + sv7[782];
        sv7[836] = -1 * sv7[769] * sp[95];
        sv7[837] = -1 * sv7[779] * sp[95];
        sv7[838] = -1 * sv7[828] * sp[95];
        sv7[839] = -1 * sv7[829] * sp[95];
        sv7[840] = -1 * sv7[770] * sp[95];
        sv7[841] = -1 * sv7[780] * sp[95];
        sv7[842] = -1 * sv7[830] * sp[95];
        sv7[843] = -1 * sv7[831] * sp[95];
        sv7[844] = -1 * sv7[832] * sp[95];
        sv7[845] = -1 * sv7[833] * sp[95];
        sv7[846] = -1 * sv7[791] * sp[95];
        sv7[847] = -1 * sv7[801] * sp[95];
        sv7[848] = -1 * sv7[834] * sp[95];
        sv7[849] = -1 * sv7[835] * sp[95];
        sv7[850] = -1 * sv7[792] * sp[95];
        sv7[851] = -1 * sv7[802] * sp[95];
        sv7[852] = -1 * sv7[773] * sp[95];
        sv7[853] = -1 * sv7[774] * sp[95];
        sv7[854] = -1 * sv7[775] * sp[95];
        sv7[855] = -1 * sv7[776] * sp[95];
        sv7[856] = -1 * sv7[777] * sp[95];
        sv7[857] = -1 * sv7[778] * sp[95];
        sv7[858] = -1 * sv7[783] * sp[95];
        sv7[859] = -1 * sv7[784] * sp[95];
        sv7[860] = -1 * sv7[785] * sp[95];
        sv7[861] = -1 * sv7[786] * sp[95];
        sv7[862] = -1 * sv7[787] * sp[95];
        sv7[863] = -1 * sv7[788] * sp[95];
        sv7[864] = -1 * sv7[793] * sp[95];
        sv7[865] = -1 * sv7[794] * sp[95];
        sv7[866] = -1 * sv7[795] * sp[95];
        sv7[867] = -1 * sv7[796] * sp[95];
        sv7[868] = -1 * sv7[797] * sp[95];
        sv7[869] = -1 * sv7[798] * sp[95];
        sv7[870] = -1 * sv7[803] * sp[95];
        sv7[871] = -1 * sv7[804] * sp[95];
        sv7[872] = -1 * sv7[805] * sp[95];
        sv7[873] = -1 * sv7[806] * sp[95];
        sv7[874] = -1 * sv7[807] * sp[95];
        sv7[875] = -1 * sv7[808] * sp[95];
        sv7[876] = sv7[541] * (-1 * sv7[547]);
        sv7[877] = sv7[541] * (-1 * sv7[548]);
        sv7[878] = sv7[541] * sv7[539];
        sv7[879] = sv7[541] * sv7[540];
        sv7[880] = sv7[542] * (-1 * sv7[547]);
        sv7[881] = sv7[542] * (-1 * sv7[548]);
        sv7[882] = sv7[542] * sv7[539];
        sv7[883] = sv7[542] * sv7[540];
        sv7[884] = -1 * sv7[549] * (-1 * sv7[547]);
        sv7[885] = -1 * sv7[549] * (-1 * sv7[548]);
        sv7[886] = -1 * sv7[549] * sv7[539];
        sv7[887] = -1 * sv7[549] * sv7[540];
        sv7[888] = -1 * sv7[550] * (-1 * sv7[547]);
        sv7[889] = -1 * sv7[550] * (-1 * sv7[548]);
        sv7[890] = -1 * sv7[550] * sv7[539];
        sv7[891] = -1 * sv7[550] * sv7[540];
        sv7[892] = sv7[28] * sv7[813];
        sv7[893] = sv7[28] * sv7[815];
        sv7[894] = sv7[28] * sv7[814];
        sv7[895] = sv7[28] * sv7[816];
        sv7[896] = sv7[28] * (-1 * sv7[809]);
        sv7[897] = sv7[28] * (-1 * sv7[811]);
        sv7[898] = sv7[28] * (-1 * sv7[810]);
        sv7[899] = sv7[28] * (-1 * sv7[812]);
        sv7[900] = sv7[892] + sv7[878];
        sv7[901] = sv7[893] + sv7[879];
        sv7[902] = sv7[894] + sv7[882];
        sv7[903] = sv7[895] + sv7[883];
        sv7[904] = sv7[896] + sv7[884];
        sv7[905] = sv7[897] + sv7[885];
        sv7[906] = sv7[898] + sv7[888];
        sv7[907] = sv7[899] + sv7[889];
        sv7[908] = sv7[876] * sp[179];
        sv7[909] = sv7[877] * sp[179];
        sv7[910] = sv7[900] * sp[179];
        sv7[911] = sv7[901] * sp[179];
        sv7[912] = sv7[880] * sp[179];
        sv7[913] = sv7[881] * sp[179];
        sv7[914] = sv7[902] * sp[179];
        sv7[915] = sv7[903] * sp[179];
        sv7[916] = sv7[904] * sp[179];
        sv7[917] = sv7[905] * sp[179];
        sv7[918] = sv7[886] * sp[179];
        sv7[919] = sv7[887] * sp[179];
        sv7[920] = sv7[906] * sp[179];
        sv7[921] = sv7[907] * sp[179];
        sv7[922] = sv7[890] * sp[179];
        sv7[923] = sv7[891] * sp[179];
        sv7[924] = sv7[908] * sp[95];
        sv7[925] = sv7[909] * sp[95];
        sv7[926] = sv7[910] * sp[95];
        sv7[927] = sv7[911] * sp[95];
        sv7[928] = sv7[912] * sp[95];
        sv7[929] = sv7[913] * sp[95];
        sv7[930] = sv7[914] * sp[95];
        sv7[931] = sv7[915] * sp[95];
        sv7[932] = sv7[916] * sp[95];
        sv7[933] = sv7[917] * sp[95];
        sv7[934] = sv7[918] * sp[95];
        sv7[935] = sv7[919] * sp[95];
        sv7[936] = sv7[920] * sp[95];
        sv7[937] = sv7[921] * sp[95];
        sv7[938] = sv7[922] * sp[95];
        sv7[939] = sv7[923] * sp[95];
        sv7[940] = sv7[836] + sv7[924];
        sv7[941] = sv7[837] + sv7[925];
        sv7[942] = sv7[838] + sv7[926];
        sv7[943] = sv7[839] + sv7[927];
        sv7[944] = sv7[840] + sv7[928];
        sv7[945] = sv7[841] + sv7[929];
        sv7[946] = sv7[842] + sv7[930];
        sv7[947] = sv7[843] + sv7[931];
        sv7[948] = sv7[844] + sv7[932];
        sv7[949] = sv7[845] + sv7[933];
        sv7[950] = sv7[846] + sv7[934];
        sv7[951] = sv7[847] + sv7[935];
        sv7[952] = sv7[848] + sv7[936];
        sv7[953] = sv7[849] + sv7[937];
        sv7[954] = sv7[850] + sv7[938];
        sv7[955] = sv7[851] + sv7[939];
        sv7[956] = sv7[593] * sp[189];
        sv7[957] = sv7[594] * sp[189];
        sv7[958] = sv7[595] * sp[189];
        sv7[959] = sv7[596] * sp[189];
        sv7[960] = sv7[597] * sp[189];
        sv7[961] = sv7[598] * sp[189];
        sv7[962] = sv7[599] * sp[189];
        sv7[963] = sv7[600] * sp[189];
        sv7[964] = sv7[601] * sp[189];
        sv7[965] = sv7[602] * sp[189];
        sv7[966] = sv7[603] * sp[189];
        sv7[967] = sv7[604] * sp[189];
        sv7[968] = sv7[605] * sp[189];
        sv7[969] = sv7[606] * sp[189];
        sv7[970] = sv7[607] * sp[189];
        sv7[971] = sv7[940] * sp[189];
        sv7[972] = sv7[941] * sp[189];
        sv7[973] = sv7[942] * sp[189];
        sv7[974] = sv7[943] * sp[189];
        sv7[975] = sv7[608] * sp[189];
        sv7[976] = sv7[609] * sp[189];
        sv7[977] = sv7[610] * sp[189];
        sv7[978] = sv7[944] * sp[189];
        sv7[979] = sv7[945] * sp[189];
        sv7[980] = sv7[946] * sp[189];
        sv7[981] = sv7[947] * sp[189];
        sv7[982] = sv7[611] * sp[189];
        sv7[983] = sv7[612] * sp[189];
        sv7[984] = sv7[613] * sp[189];
        sv7[985] = sv7[614] * sp[189];
        sv7[986] = sv7[615] * sp[189];
        sv7[987] = sv7[616] * sp[189];
        sv7[988] = sv7[948] * sp[189];
        sv7[989] = sv7[949] * sp[189];
        sv7[990] = sv7[950] * sp[189];
        sv7[991] = sv7[951] * sp[189];
        sv7[992] = sv7[952] * sp[189];
        sv7[993] = sv7[953] * sp[189];
        sv7[994] = sv7[954] * sp[189];
        sv7[995] = sv7[955] * sp[189];
        sv7[996] = sv7[852] * sp[189];
        sv7[997] = sv7[853] * sp[189];
        sv7[998] = sv7[854] * sp[189];
        sv7[999] = sv7[855] * sp[189];
        sv7[1000] = sv7[856] * sp[189];
        sv7[1001] = sv7[857] * sp[189];
        sv7[1002] = sv7[858] * sp[189];
        sv7[1003] = sv7[859] * sp[189];
        sv7[1004] = sv7[860] * sp[189];
        sv7[1005] = sv7[861] * sp[189];
        sv7[1006] = sv7[862] * sp[189];
        sv7[1007] = sv7[863] * sp[189];
        sv7[1008] = sv7[864] * sp[189];
        sv7[1009] = sv7[865] * sp[189];
        sv7[1010] = sv7[866] * sp[189];
        sv7[1011] = sv7[867] * sp[189];
        sv7[1012] = sv7[868] * sp[189];
        sv7[1013] = sv7[869] * sp[189];
        sv7[1014] = sv7[870] * sp[189];
        sv7[1015] = sv7[871] * sp[189];
        sv7[1016] = sv7[872] * sp[189];
        sv7[1017] = sv7[873] * sp[189];
        sv7[1018] = sv7[874] * sp[189];
        sv7[1019] = sv7[875] * sp[189];
        const double fw0 = sv7[981] * weights7[iq];
        alignas(32) double TF0[5];
        for (int i = 0; i < 5; ++i)
            TF0[i] = fw0 * FE42_C0_D10_F_Q7[facet_0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF0[i][j] += TF0[i] * FE42_C0_D10_F_Q7[facet_0][iq][j];
        const double fw1 = sv7[1015] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP0[i] += fw1 * FE42_C0_D10_F_Q7[facet_0][iq][i];
        const double fw2 = sv7[974] * weights7[iq];
        alignas(32) double TF1[5];
        for (int i = 0; i < 5; ++i)
            TF1[i] = fw2 * FE42_C0_D10_F_Q7[facet_0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF1[i][j] += TF1[i] * FE42_C0_D01_F_Q7[facet_0][iq][j];
        const double fw3 = sv7[1016] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP1[i] += fw3 * FE42_C0_D10_F_Q7[facet_0][iq][i];
        const double fw4 = sv7[1014] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP2[i] += fw4 * FE42_C0_D10_F_Q7[facet_0][iq][i];
        const double fw5 = sv7[995] * weights7[iq];
        alignas(32) double TF2[5];
        for (int i = 0; i < 5; ++i)
            TF2[i] = fw5 * FE42_C0_D10_F_Q7[facet_0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF2[i][j] += TF2[i] * FE42_C0_D10_F_Q7[facet_1][iq][j];
        const double fw6 = sv7[1018] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP3[i] += fw6 * FE42_C0_D10_F_Q7[facet_0][iq][i];
        const double fw7 = sv7[991] * weights7[iq];
        alignas(32) double TF3[5];
        for (int i = 0; i < 5; ++i)
            TF3[i] = fw7 * FE42_C0_D10_F_Q7[facet_0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF3[i][j] += TF3[i] * FE42_C0_D01_F_Q7[facet_1][iq][j];
        const double fw8 = sv7[1019] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP4[i] += fw8 * FE42_C0_D10_F_Q7[facet_0][iq][i];
        const double fw9 = sv7[1017] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP5[i] += fw9 * FE42_C0_D10_F_Q7[facet_0][iq][i];
        const double fw10 = sv7[961] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP6[j] += fw10 * FE42_C0_D10_F_Q7[facet_0][iq][j];
        const double fw11 = sv7[960] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP7[j] += fw11 * FE42_C0_D01_F_Q7[facet_0][iq][j];
        const double fw12 = sv7[963] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP8[j] += fw12 * FE42_C0_D10_F_Q7[facet_1][iq][j];
        const double fw13 = sv7[962] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP9[j] += fw13 * FE42_C0_D01_F_Q7[facet_1][iq][j];
        const double fw14 = sv7[980] * weights7[iq];
        alignas(32) double TF4[5];
        for (int i = 0; i < 5; ++i)
            TF4[i] = fw14 * FE42_C0_D01_F_Q7[facet_0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF4[i][j] += TF4[i] * FE42_C0_D10_F_Q7[facet_0][iq][j];
        const double fw15 = sv7[1009] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP10[i] += fw15 * FE42_C0_D01_F_Q7[facet_0][iq][i];
        const double fw16 = sv7[973] * weights7[iq];
        alignas(32) double TF5[5];
        for (int i = 0; i < 5; ++i)
            TF5[i] = fw16 * FE42_C0_D01_F_Q7[facet_0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF5[i][j] += TF5[i] * FE42_C0_D01_F_Q7[facet_0][iq][j];
        const double fw17 = sv7[1010] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP11[i] += fw17 * FE42_C0_D01_F_Q7[facet_0][iq][i];
        const double fw18 = sv7[1008] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP12[i] += fw18 * FE42_C0_D01_F_Q7[facet_0][iq][i];
        const double fw19 = sv7[994] * weights7[iq];
        alignas(32) double TF6[5];
        for (int i = 0; i < 5; ++i)
            TF6[i] = fw19 * FE42_C0_D01_F_Q7[facet_0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF6[i][j] += TF6[i] * FE42_C0_D10_F_Q7[facet_1][iq][j];
        const double fw20 = sv7[1012] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP13[i] += fw20 * FE42_C0_D01_F_Q7[facet_0][iq][i];
        const double fw21 = sv7[990] * weights7[iq];
        alignas(32) double TF7[5];
        for (int i = 0; i < 5; ++i)
            TF7[i] = fw21 * FE42_C0_D01_F_Q7[facet_0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF7[i][j] += TF7[i] * FE42_C0_D01_F_Q7[facet_1][iq][j];
        const double fw22 = sv7[1013] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP14[i] += fw22 * FE42_C0_D01_F_Q7[facet_0][iq][i];
        const double fw23 = sv7[1011] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP15[i] += fw23 * FE42_C0_D01_F_Q7[facet_0][iq][i];
        const double fw24 = sv7[965] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP16[j] += fw24 * FE42_C0_D10_F_Q7[facet_0][iq][j];
        const double fw25 = sv7[964] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP17[j] += fw25 * FE42_C0_D01_F_Q7[facet_0][iq][j];
        const double fw26 = sv7[967] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP18[j] += fw26 * FE42_C0_D10_F_Q7[facet_1][iq][j];
        const double fw27 = sv7[966] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP19[j] += fw27 * FE42_C0_D01_F_Q7[facet_1][iq][j];
        const double fw28 = sv7[957] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP20[j] += fw28 * FE42_C0_D10_F_Q7[facet_0][iq][j];
        const double fw29 = sv7[956] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP21[j] += fw29 * FE42_C0_D01_F_Q7[facet_0][iq][j];
        const double fw30 = sv7[959] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP22[j] += fw30 * FE42_C0_D10_F_Q7[facet_1][iq][j];
        const double fw31 = sv7[958] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP23[j] += fw31 * FE42_C0_D01_F_Q7[facet_1][iq][j];
        const double fw32 = sv7[979] * weights7[iq];
        alignas(32) double TF8[5];
        for (int i = 0; i < 5; ++i)
            TF8[i] = fw32 * FE42_C0_D10_F_Q7[facet_1][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF8[i][j] += TF8[i] * FE42_C0_D10_F_Q7[facet_0][iq][j];
        const double fw33 = sv7[1003] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP24[i] += fw33 * FE42_C0_D10_F_Q7[facet_1][iq][i];
        const double fw34 = sv7[972] * weights7[iq];
        alignas(32) double TF9[5];
        for (int i = 0; i < 5; ++i)
            TF9[i] = fw34 * FE42_C0_D10_F_Q7[facet_1][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF9[i][j] += TF9[i] * FE42_C0_D01_F_Q7[facet_0][iq][j];
        const double fw35 = sv7[1004] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP25[i] += fw35 * FE42_C0_D10_F_Q7[facet_1][iq][i];
        const double fw36 = sv7[1002] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP26[i] += fw36 * FE42_C0_D10_F_Q7[facet_1][iq][i];
        const double fw37 = sv7[993] * weights7[iq];
        alignas(32) double TF10[5];
        for (int i = 0; i < 5; ++i)
            TF10[i] = fw37 * FE42_C0_D10_F_Q7[facet_1][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF10[i][j] += TF10[i] * FE42_C0_D10_F_Q7[facet_1][iq][j];
        const double fw38 = sv7[1006] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP27[i] += fw38 * FE42_C0_D10_F_Q7[facet_1][iq][i];
        const double fw39 = sv7[989] * weights7[iq];
        alignas(32) double TF11[5];
        for (int i = 0; i < 5; ++i)
            TF11[i] = fw39 * FE42_C0_D10_F_Q7[facet_1][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF11[i][j] += TF11[i] * FE42_C0_D01_F_Q7[facet_1][iq][j];
        const double fw40 = sv7[1007] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP28[i] += fw40 * FE42_C0_D10_F_Q7[facet_1][iq][i];
        const double fw41 = sv7[1005] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP29[i] += fw41 * FE42_C0_D10_F_Q7[facet_1][iq][i];
        const double fw42 = sv7[976] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP30[j] += fw42 * FE42_C0_D10_F_Q7[facet_0][iq][j];
        const double fw43 = sv7[969] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP31[j] += fw43 * FE42_C0_D01_F_Q7[facet_0][iq][j];
        const double fw44 = sv7[985] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP32[j] += fw44 * FE42_C0_D10_F_Q7[facet_1][iq][j];
        const double fw45 = sv7[984] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP33[j] += fw45 * FE42_C0_D01_F_Q7[facet_1][iq][j];
        const double fw46 = sv7[978] * weights7[iq];
        alignas(32) double TF12[5];
        for (int i = 0; i < 5; ++i)
            TF12[i] = fw46 * FE42_C0_D01_F_Q7[facet_1][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF12[i][j] += TF12[i] * FE42_C0_D10_F_Q7[facet_0][iq][j];
        const double fw47 = sv7[997] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP34[i] += fw47 * FE42_C0_D01_F_Q7[facet_1][iq][i];
        const double fw48 = sv7[971] * weights7[iq];
        alignas(32) double TF13[5];
        for (int i = 0; i < 5; ++i)
            TF13[i] = fw48 * FE42_C0_D01_F_Q7[facet_1][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF13[i][j] += TF13[i] * FE42_C0_D01_F_Q7[facet_0][iq][j];
        const double fw49 = sv7[998] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP35[i] += fw49 * FE42_C0_D01_F_Q7[facet_1][iq][i];
        const double fw50 = sv7[996] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP36[i] += fw50 * FE42_C0_D01_F_Q7[facet_1][iq][i];
        const double fw51 = sv7[992] * weights7[iq];
        alignas(32) double TF14[5];
        for (int i = 0; i < 5; ++i)
            TF14[i] = fw51 * FE42_C0_D01_F_Q7[facet_1][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF14[i][j] += TF14[i] * FE42_C0_D10_F_Q7[facet_1][iq][j];
        const double fw52 = sv7[1000] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP37[i] += fw52 * FE42_C0_D01_F_Q7[facet_1][iq][i];
        const double fw53 = sv7[988] * weights7[iq];
        alignas(32) double TF15[5];
        for (int i = 0; i < 5; ++i)
            TF15[i] = fw53 * FE42_C0_D01_F_Q7[facet_1][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 5; ++j)
                BF15[i][j] += TF15[i] * FE42_C0_D01_F_Q7[facet_1][iq][j];
        const double fw54 = sv7[1001] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP38[i] += fw54 * FE42_C0_D01_F_Q7[facet_1][iq][i];
        const double fw55 = sv7[999] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            TP39[i] += fw55 * FE42_C0_D01_F_Q7[facet_1][iq][i];
        const double fw56 = sv7[977] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP40[j] += fw56 * FE42_C0_D10_F_Q7[facet_0][iq][j];
        const double fw57 = sv7[970] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP41[j] += fw57 * FE42_C0_D01_F_Q7[facet_0][iq][j];
        const double fw58 = sv7[987] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP42[j] += fw58 * FE42_C0_D10_F_Q7[facet_1][iq][j];
        const double fw59 = sv7[986] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP43[j] += fw59 * FE42_C0_D01_F_Q7[facet_1][iq][j];
        const double fw60 = sv7[975] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP44[j] += fw60 * FE42_C0_D10_F_Q7[facet_0][iq][j];
        const double fw61 = sv7[968] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP45[j] += fw61 * FE42_C0_D01_F_Q7[facet_0][iq][j];
        const double fw62 = sv7[983] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP46[j] += fw62 * FE42_C0_D10_F_Q7[facet_1][iq][j];
        const double fw63 = sv7[982] * weights7[iq];
        for (int j = 0; j < 5; ++j)
            TP47[j] += fw63 * FE42_C0_D01_F_Q7[facet_1][iq][j];
    }
    std::fill(A, A + 144, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[3] = { 0, 1, 5 };
    static const int DM2[5] = { 0, 2, 3, 4, 5 };
    static const int DM3[3] = { 0, 2, 4 };
    static const int DM4[4] = { 0, 3, 4, 5 };
    static const int DM5[5] = { 6, 7, 9, 10, 11 };
    static const int DM6[3] = { 6, 7, 11 };
    static const int DM7[5] = { 6, 8, 9, 10, 11 };
    static const int DM8[3] = { 6, 8, 10 };
    static const int DM9[4] = { 6, 9, 10, 11 };
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM0[i] + DM0[j]] += BF0[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[12 * DM0[i] + DM1[j]] += FE42_C0_D02_F_Q7[0][0][j] * TP0[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM0[i] + DM2[j]] += BF1[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[12 * DM0[i] + DM3[j]] += FE42_C0_D02_F_Q7[0][0][j] * TP1[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[12 * DM0[i] + DM4[j]] += FE42_C0_D11_F_Q7[0][0][j] * TP2[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM0[i] + DM5[j]] += BF2[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[12 * DM0[i] + DM6[j]] += FE42_C0_D02_F_Q7[0][0][j] * TP3[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM0[i] + DM7[j]] += BF3[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[12 * DM0[i] + DM8[j]] += FE42_C0_D02_F_Q7[0][0][j] * TP4[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[12 * DM0[i] + DM9[j]] += FE42_C0_D11_F_Q7[0][0][j] * TP5[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM1[i] + DM0[j]] += FE42_C0_D02_F_Q7[0][0][i] * TP6[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM1[i] + DM2[j]] += FE42_C0_D02_F_Q7[0][0][i] * TP7[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM1[i] + DM5[j]] += FE42_C0_D02_F_Q7[0][0][i] * TP8[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM1[i] + DM7[j]] += FE42_C0_D02_F_Q7[0][0][i] * TP9[j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM2[i] + DM0[j]] += BF4[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[12 * DM2[i] + DM1[j]] += FE42_C0_D02_F_Q7[0][0][j] * TP10[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM2[i] + DM2[j]] += BF5[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[12 * DM2[i] + DM3[j]] += FE42_C0_D02_F_Q7[0][0][j] * TP11[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[12 * DM2[i] + DM4[j]] += FE42_C0_D11_F_Q7[0][0][j] * TP12[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM2[i] + DM5[j]] += BF6[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[12 * DM2[i] + DM6[j]] += FE42_C0_D02_F_Q7[0][0][j] * TP13[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM2[i] + DM7[j]] += BF7[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[12 * DM2[i] + DM8[j]] += FE42_C0_D02_F_Q7[0][0][j] * TP14[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[12 * DM2[i] + DM9[j]] += FE42_C0_D11_F_Q7[0][0][j] * TP15[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM3[i] + DM0[j]] += FE42_C0_D02_F_Q7[0][0][i] * TP16[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM3[i] + DM2[j]] += FE42_C0_D02_F_Q7[0][0][i] * TP17[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM3[i] + DM5[j]] += FE42_C0_D02_F_Q7[0][0][i] * TP18[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM3[i] + DM7[j]] += FE42_C0_D02_F_Q7[0][0][i] * TP19[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM4[i] + DM0[j]] += FE42_C0_D11_F_Q7[0][0][i] * TP20[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM4[i] + DM2[j]] += FE42_C0_D11_F_Q7[0][0][i] * TP21[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM4[i] + DM5[j]] += FE42_C0_D11_F_Q7[0][0][i] * TP22[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM4[i] + DM7[j]] += FE42_C0_D11_F_Q7[0][0][i] * TP23[j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM5[i] + DM0[j]] += BF8[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[12 * DM5[i] + DM1[j]] += FE42_C0_D02_F_Q7[0][0][j] * TP24[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM5[i] + DM2[j]] += BF9[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[12 * DM5[i] + DM3[j]] += FE42_C0_D02_F_Q7[0][0][j] * TP25[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[12 * DM5[i] + DM4[j]] += FE42_C0_D11_F_Q7[0][0][j] * TP26[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM5[i] + DM5[j]] += BF10[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[12 * DM5[i] + DM6[j]] += FE42_C0_D02_F_Q7[0][0][j] * TP27[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM5[i] + DM7[j]] += BF11[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[12 * DM5[i] + DM8[j]] += FE42_C0_D02_F_Q7[0][0][j] * TP28[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[12 * DM5[i] + DM9[j]] += FE42_C0_D11_F_Q7[0][0][j] * TP29[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM6[i] + DM0[j]] += FE42_C0_D02_F_Q7[0][0][i] * TP30[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM6[i] + DM2[j]] += FE42_C0_D02_F_Q7[0][0][i] * TP31[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM6[i] + DM5[j]] += FE42_C0_D02_F_Q7[0][0][i] * TP32[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM6[i] + DM7[j]] += FE42_C0_D02_F_Q7[0][0][i] * TP33[j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM7[i] + DM0[j]] += BF12[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[12 * DM7[i] + DM1[j]] += FE42_C0_D02_F_Q7[0][0][j] * TP34[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM7[i] + DM2[j]] += BF13[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[12 * DM7[i] + DM3[j]] += FE42_C0_D02_F_Q7[0][0][j] * TP35[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[12 * DM7[i] + DM4[j]] += FE42_C0_D11_F_Q7[0][0][j] * TP36[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM7[i] + DM5[j]] += BF14[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[12 * DM7[i] + DM6[j]] += FE42_C0_D02_F_Q7[0][0][j] * TP37[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM7[i] + DM7[j]] += BF15[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 3; ++j)
            A[12 * DM7[i] + DM8[j]] += FE42_C0_D02_F_Q7[0][0][j] * TP38[i];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 4; ++j)
            A[12 * DM7[i] + DM9[j]] += FE42_C0_D11_F_Q7[0][0][j] * TP39[i];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM8[i] + DM0[j]] += FE42_C0_D02_F_Q7[0][0][i] * TP40[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM8[i] + DM2[j]] += FE42_C0_D02_F_Q7[0][0][i] * TP41[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM8[i] + DM5[j]] += FE42_C0_D02_F_Q7[0][0][i] * TP42[j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM8[i] + DM7[j]] += FE42_C0_D02_F_Q7[0][0][i] * TP43[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM9[i] + DM0[j]] += FE42_C0_D11_F_Q7[0][0][i] * TP44[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM9[i] + DM2[j]] += FE42_C0_D11_F_Q7[0][0][i] * TP45[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM9[i] + DM5[j]] += FE42_C0_D11_F_Q7[0][0][i] * TP46[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            A[12 * DM9[i] + DM7[j]] += FE42_C0_D11_F_Q7[0][0][i] * TP47[j];
  }

};


class tvf4_form_0: public ufc::form
{
public:

  tvf4_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~tvf4_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "ea6eda465afa8e32fcc19ab1ef62ccb4a4cb7686a5c79380861f5401e3a24d47d6fdd93c00fde1460b97e62ec83c2a2d7005888a966fef515b08cfa3f3077007";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 6;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 6)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3, 4, 5};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new tvf4_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new tvf4_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new tvf4_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new tvf4_finite_element_3();
    case 1:
        return new tvf4_finite_element_2();
    case 2:
        return new tvf4_finite_element_2();
    case 3:
        return new tvf4_finite_element_2();
    case 4:
        return new tvf4_finite_element_2();
    case 5:
        return new tvf4_finite_element_3();
    case 6:
        return new tvf4_finite_element_3();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new tvf4_dofmap_3();
    case 1:
        return new tvf4_dofmap_2();
    case 2:
        return new tvf4_dofmap_2();
    case 3:
        return new tvf4_dofmap_2();
    case 4:
        return new tvf4_dofmap_2();
    case 5:
        return new tvf4_dofmap_3();
    case 6:
        return new tvf4_dofmap_3();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return true;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new tvf4_cell_integral_0_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return new tvf4_exterior_facet_integral_0_otherwise();
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return new tvf4_interior_facet_integral_0_otherwise();
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class tvf4_form_1: public ufc::form
{
public:

  tvf4_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~tvf4_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "39718b254e4d99933660051d8d0608265e38cd3d20a486286dcf99553751a68dfaad619899eaa078616cb4b7d93f6d017e67bcbee8096beb430b66df3f29e5ba";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 5;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 5)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3, 4};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new tvf4_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new tvf4_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new tvf4_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new tvf4_finite_element_3();
    case 1:
        return new tvf4_finite_element_3();
    case 2:
        return new tvf4_finite_element_2();
    case 3:
        return new tvf4_finite_element_2();
    case 4:
        return new tvf4_finite_element_2();
    case 5:
        return new tvf4_finite_element_2();
    case 6:
        return new tvf4_finite_element_3();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new tvf4_dofmap_3();
    case 1:
        return new tvf4_dofmap_3();
    case 2:
        return new tvf4_dofmap_2();
    case 3:
        return new tvf4_dofmap_2();
    case 4:
        return new tvf4_dofmap_2();
    case 5:
        return new tvf4_dofmap_2();
    case 6:
        return new tvf4_dofmap_3();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return true;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new tvf4_cell_integral_1_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return new tvf4_exterior_facet_integral_1_otherwise();
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return new tvf4_interior_facet_integral_1_otherwise();
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace Tvf4
{

class CoefficientSpace_Alpha: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_Alpha(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tvf4_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tvf4_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_Alpha(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tvf4_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tvf4_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_Beta: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_Beta(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tvf4_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tvf4_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_Beta(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tvf4_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tvf4_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_Delta: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_Delta(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tvf4_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tvf4_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_Delta(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tvf4_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tvf4_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_ScaledTimeStepSize: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_ScaledTimeStepSize(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tvf4_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tvf4_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_ScaledTimeStepSize(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tvf4_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tvf4_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_u: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_u(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tvf4_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tvf4_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_u(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tvf4_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tvf4_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_u0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_u0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tvf4_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tvf4_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_u0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tvf4_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tvf4_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tvf4_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tvf4_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tvf4_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tvf4_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_F_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_F_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_ScaledTimeStepSize Form_F_FunctionSpace_1;

typedef CoefficientSpace_Beta Form_F_FunctionSpace_2;

typedef CoefficientSpace_Delta Form_F_FunctionSpace_3;

typedef CoefficientSpace_Alpha Form_F_FunctionSpace_4;

typedef CoefficientSpace_u Form_F_FunctionSpace_5;

typedef CoefficientSpace_u0 Form_F_FunctionSpace_6;

class Form_F: public dolfin::Form
{
public:

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 6), ScaledTimeStepSize(*this, 0), Beta(*this, 1), Delta(*this, 2), Alpha(*this, 3), u(*this, 4), u0(*this, 5)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const tvf4_form_0>();
  }

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> ScaledTimeStepSize, std::shared_ptr<const dolfin::GenericFunction> Beta, std::shared_ptr<const dolfin::GenericFunction> Delta, std::shared_ptr<const dolfin::GenericFunction> Alpha, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> u0):
    dolfin::Form(1, 6), ScaledTimeStepSize(*this, 0), Beta(*this, 1), Delta(*this, 2), Alpha(*this, 3), u(*this, 4), u0(*this, 5)
  {
    _function_spaces[0] = V0;

    this->ScaledTimeStepSize = ScaledTimeStepSize;
    this->Beta = Beta;
    this->Delta = Delta;
    this->Alpha = Alpha;
    this->u = u;
    this->u0 = u0;

    _ufc_form = std::make_shared<const tvf4_form_0>();
  }

  // Destructor
  ~Form_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "ScaledTimeStepSize")
      return 0;
    else if (name == "Beta")
      return 1;
    else if (name == "Delta")
      return 2;
    else if (name == "Alpha")
      return 3;
    else if (name == "u")
      return 4;
    else if (name == "u0")
      return 5;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "ScaledTimeStepSize";
    case 1:
      return "Beta";
    case 2:
      return "Delta";
    case 3:
      return "Alpha";
    case 4:
      return "u";
    case 5:
      return "u0";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_ScaledTimeStepSize;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_Beta;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_Delta;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_Alpha;
  typedef Form_F_FunctionSpace_5 CoefficientSpace_u;
  typedef Form_F_FunctionSpace_6 CoefficientSpace_u0;

  // Coefficients
  dolfin::CoefficientAssigner ScaledTimeStepSize;
  dolfin::CoefficientAssigner Beta;
  dolfin::CoefficientAssigner Delta;
  dolfin::CoefficientAssigner Alpha;
  dolfin::CoefficientAssigner u;
  dolfin::CoefficientAssigner u0;
};

class MultiMeshForm_F: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), ScaledTimeStepSize(*this, 0), Beta(*this, 1), Delta(*this, 2), Alpha(*this, 3), u(*this, 4), u0(*this, 5)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> ScaledTimeStepSize, std::shared_ptr<const dolfin::GenericFunction> Beta, std::shared_ptr<const dolfin::GenericFunction> Delta, std::shared_ptr<const dolfin::GenericFunction> Alpha, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> u0):
    dolfin::MultiMeshForm(V0), ScaledTimeStepSize(*this, 0), Beta(*this, 1), Delta(*this, 2), Alpha(*this, 3), u(*this, 4), u0(*this, 5)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->ScaledTimeStepSize = ScaledTimeStepSize;
    this->Beta = Beta;
    this->Delta = Delta;
    this->Alpha = Alpha;
    this->u = u;
    this->u0 = u0;

  }

  // Destructor
  ~MultiMeshForm_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "ScaledTimeStepSize")
      return 0;
    else if (name == "Beta")
      return 1;
    else if (name == "Delta")
      return 2;
    else if (name == "Alpha")
      return 3;
    else if (name == "u")
      return 4;
    else if (name == "u0")
      return 5;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "ScaledTimeStepSize";
    case 1:
      return "Beta";
    case 2:
      return "Delta";
    case 3:
      return "Alpha";
    case 4:
      return "u";
    case 5:
      return "u0";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_ScaledTimeStepSize;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_Beta;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_Delta;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_Alpha;
  typedef Form_F_FunctionSpace_5 CoefficientSpace_u;
  typedef Form_F_FunctionSpace_6 CoefficientSpace_u0;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner ScaledTimeStepSize;
  dolfin::MultiMeshCoefficientAssigner Beta;
  dolfin::MultiMeshCoefficientAssigner Delta;
  dolfin::MultiMeshCoefficientAssigner Alpha;
  dolfin::MultiMeshCoefficientAssigner u;
  dolfin::MultiMeshCoefficientAssigner u0;
};

class Form_J_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tvf4_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tvf4_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tvf4_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tvf4_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tvf4_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tvf4_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tvf4_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tvf4_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_J_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_ScaledTimeStepSize Form_J_FunctionSpace_2;

typedef CoefficientSpace_Beta Form_J_FunctionSpace_3;

typedef CoefficientSpace_Delta Form_J_FunctionSpace_4;

typedef CoefficientSpace_Alpha Form_J_FunctionSpace_5;

typedef CoefficientSpace_u Form_J_FunctionSpace_6;

class Form_J: public dolfin::Form
{
public:

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 5), ScaledTimeStepSize(*this, 0), Beta(*this, 1), Delta(*this, 2), Alpha(*this, 3), u(*this, 4)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const tvf4_form_1>();
  }

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> ScaledTimeStepSize, std::shared_ptr<const dolfin::GenericFunction> Beta, std::shared_ptr<const dolfin::GenericFunction> Delta, std::shared_ptr<const dolfin::GenericFunction> Alpha, std::shared_ptr<const dolfin::GenericFunction> u):
    dolfin::Form(2, 5), ScaledTimeStepSize(*this, 0), Beta(*this, 1), Delta(*this, 2), Alpha(*this, 3), u(*this, 4)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->ScaledTimeStepSize = ScaledTimeStepSize;
    this->Beta = Beta;
    this->Delta = Delta;
    this->Alpha = Alpha;
    this->u = u;

    _ufc_form = std::make_shared<const tvf4_form_1>();
  }

  // Destructor
  ~Form_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "ScaledTimeStepSize")
      return 0;
    else if (name == "Beta")
      return 1;
    else if (name == "Delta")
      return 2;
    else if (name == "Alpha")
      return 3;
    else if (name == "u")
      return 4;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "ScaledTimeStepSize";
    case 1:
      return "Beta";
    case 2:
      return "Delta";
    case 3:
      return "Alpha";
    case 4:
      return "u";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_ScaledTimeStepSize;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_Beta;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_Delta;
  typedef Form_J_FunctionSpace_5 CoefficientSpace_Alpha;
  typedef Form_J_FunctionSpace_6 CoefficientSpace_u;

  // Coefficients
  dolfin::CoefficientAssigner ScaledTimeStepSize;
  dolfin::CoefficientAssigner Beta;
  dolfin::CoefficientAssigner Delta;
  dolfin::CoefficientAssigner Alpha;
  dolfin::CoefficientAssigner u;
};

class MultiMeshForm_J: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), ScaledTimeStepSize(*this, 0), Beta(*this, 1), Delta(*this, 2), Alpha(*this, 3), u(*this, 4)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> ScaledTimeStepSize, std::shared_ptr<const dolfin::GenericFunction> Beta, std::shared_ptr<const dolfin::GenericFunction> Delta, std::shared_ptr<const dolfin::GenericFunction> Alpha, std::shared_ptr<const dolfin::GenericFunction> u):
    dolfin::MultiMeshForm(V1, V0), ScaledTimeStepSize(*this, 0), Beta(*this, 1), Delta(*this, 2), Alpha(*this, 3), u(*this, 4)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->ScaledTimeStepSize = ScaledTimeStepSize;
    this->Beta = Beta;
    this->Delta = Delta;
    this->Alpha = Alpha;
    this->u = u;

  }

  // Destructor
  ~MultiMeshForm_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "ScaledTimeStepSize")
      return 0;
    else if (name == "Beta")
      return 1;
    else if (name == "Delta")
      return 2;
    else if (name == "Alpha")
      return 3;
    else if (name == "u")
      return 4;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "ScaledTimeStepSize";
    case 1:
      return "Beta";
    case 2:
      return "Delta";
    case 3:
      return "Alpha";
    case 4:
      return "u";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_ScaledTimeStepSize;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_Beta;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_Delta;
  typedef Form_J_FunctionSpace_5 CoefficientSpace_Alpha;
  typedef Form_J_FunctionSpace_6 CoefficientSpace_u;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner ScaledTimeStepSize;
  dolfin::MultiMeshCoefficientAssigner Beta;
  dolfin::MultiMeshCoefficientAssigner Delta;
  dolfin::MultiMeshCoefficientAssigner Alpha;
  dolfin::MultiMeshCoefficientAssigner u;
};

// Class typedefs
typedef Form_J BilinearForm;
typedef MultiMeshForm_J MultiMeshBilinearForm;
typedef Form_J JacobianForm;
typedef MultiMeshForm_J MultiMeshJacobianForm;
typedef Form_F LinearForm;
typedef MultiMeshForm_F MultiMeshLinearForm;
typedef Form_F ResidualForm;
typedef MultiMeshForm_F MultiMeshResidualForm;
typedef Form_F::TestSpace FunctionSpace;
typedef Form_F::MultiMeshTestSpace MultiMeshFunctionSpace;

}

#endif
