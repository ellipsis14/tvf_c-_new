// This code conforms with the UFC specification version 2017.2.0
// and was automatically generated by FFC version 2017.2.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#ifndef __ERRORIPDG_2H_H
#define __ERRORIPDG_2H_H
#include <algorithm>
#include <cmath>
#include <iostream>
#include <stdexcept>
#include <ufc.h>

class erroripdg_2h_finite_element_0: public ufc::finite_element
{
public:

  erroripdg_2h_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~erroripdg_2h_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', triangle, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 3;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 3 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[3] = {};
    const std::size_t num_components[3] = { 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 3; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[3 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 3 * num_derivatives, 0.0);
    const std::size_t reference_offsets[3] = {};
    const std::size_t physical_offsets[3] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 3; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[3 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[3 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[3];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[3];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 3, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[6] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 6, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new erroripdg_2h_finite_element_0();
  }

};


class erroripdg_2h_finite_element_1: public ufc::finite_element
{
public:

  erroripdg_2h_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~erroripdg_2h_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 6;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 6 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 3 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 4 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 5 + 1] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 6 * num_derivatives * 2, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t num_components[6] = { 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 6; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 6 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t physical_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 6; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[12];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[12];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 6, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[3] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[5] = dof_values[5];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = coordinate_dofs[0];
    dof_coordinates[2 * 3 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 4] = coordinate_dofs[2];
    dof_coordinates[2 * 4 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 5] = coordinate_dofs[4];
    dof_coordinates[2 * 5 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new erroripdg_2h_finite_element_0();
    case 1:
        return new erroripdg_2h_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new erroripdg_2h_finite_element_1();
  }

};


class erroripdg_2h_finite_element_2: public ufc::finite_element
{
public:

  erroripdg_2h_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~erroripdg_2h_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', triangle, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][1] = { { 1.0 } };
    for (std::size_t k = 0; k < num_points; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basisvalues for each relevant embedded degree
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        // Accumulate products of coefficients and basisvalues
        reference_values[ip] += coefficients0[0][0] * basisvalues0[0];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * num_derivatives, 0.0);
    if (order > 0)
        return;
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    std::fill_n(values, num_points, 0.0);
    const std::size_t reference_offsets[1] = {};
    const std::size_t physical_offsets[1] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[1][1];
        for (std::size_t r = 0; r < 1; ++r)
            for (std::size_t s = 0; s < 1; ++s)
                transform[r][s] = 1.0;
        for (std::size_t d = 0; d < 1; ++d)
        {
            for (std::size_t s = 0; s < 1; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[ip + d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < 1; ++r)
                        values[ip + d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
    }
    // Evaluate basis on reference element
    double ref_values[1];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[1];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[2] = { 0.3333333333333333, 0.3333333333333333 };
    std::copy_n(dof_X, 2, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new erroripdg_2h_finite_element_2();
  }

};


class erroripdg_2h_finite_element_3: public ufc::finite_element
{
public:

  erroripdg_2h_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~erroripdg_2h_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Discontinuous Lagrange', triangle, 4)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 15;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 4;
  }

  const char * family() const final override
  {
    return "Discontinuous Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][15] = { { 0.0, -0.04123930494211611, -0.023809523809523794, 0.0289800294976278, 0.02244783432338244, 0.012960263189328946, -0.03959425806109994, -0.03346325566315745, -0.02592052637865798, -0.01496522288225498, 0.03212472543663117, 0.028331344813852282, 0.023944356611607962, 0.01854721887848183, 0.010708241812210409 } };
    static const double coefficients1[1][15] = { { 0.0, 0.04123930494211617, -0.023809523809523832, 0.02898002949762785, -0.02244783432338247, 0.012960263189328969, 0.03959425806109991, -0.03346325566315744, 0.025920526378657945, -0.014965222882254959, 0.03212472543663116, -0.028331344813852296, 0.023944356611607955, -0.018547218878481802, 0.010708241812210386 } };
    static const double coefficients2[1][15] = { { 0.0, 0.0, 0.04761904761904756, 0.0, 0.0, 0.03888078956798697, 0.0, 0.0, 0.0, 0.05986089152901992, 0.0, 0.0, 0.0, 0.0, 0.053541209061051906 } };
    static const double coefficients3[1][15] = { { 0.1257078722109417, 0.1319657758147716, -0.025396825396825362, 0.13910414158861362, -0.07183306983482383, 0.031104631654389585, 0.06335081289775982, 0.026770604530525925, -0.06220926330877914, 0.047888713223215904, 0.0, 0.056662689627704536, -0.08380524814062786, 0.08346248495316816, -0.05354120906105194 } };
    static const double coefficients4[1][15] = { { -0.03142696805273546, 0.010997147984564326, 0.006349206349206258, 0.0, 0.18856180831641273, -0.16329931618554516, 0.0, 0.09369711585684087, 0.0, -0.04190262407031389, 0.0, 0.0, 0.08380524814062784, -0.13910414158861362, 0.10708241812210381 } };
    static const double coefficients5[1][15] = { { 0.12570787221094165, 0.04398859193825734, 0.12698412698412695, 0.0, 0.035916534917411994, 0.15552315827194782, 0.0, 0.0, 0.10368210551463188, -0.011972178305803988, 0.0, 0.0, 0.0, 0.09273609439240912, -0.10708241812210383 } };
    static const double coefficients6[1][15] = { { 0.12570787221094193, -0.13196577581477165, -0.02539682539682538, 0.13910414158861362, 0.07183306983482386, 0.03110463165438953, -0.06335081289775985, 0.026770604530525936, 0.06220926330877919, 0.04788871322321592, 0.0, -0.05666268962770456, -0.08380524814062781, -0.08346248495316815, -0.053541209061051906 } };
    static const double coefficients7[1][15] = { { -0.03142696805273531, -0.010997147984564293, 0.0063492063492062096, 0.0, -0.18856180831641264, -0.16329931618554508, 0.0, 0.09369711585684087, 0.0, -0.041902624070313824, 0.0, 0.0, 0.08380524814062784, 0.13910414158861353, 0.10708241812210373 } };
    static const double coefficients8[1][15] = { { 0.12570787221094196, -0.043988591938257195, 0.12698412698412712, 0.0, -0.03591653491741193, 0.15552315827194776, 0.0, 0.0, -0.10368210551463188, -0.01197217830580402, 0.0, 0.0, 0.0, -0.09273609439240908, -0.10708241812210381 } };
    static const double coefficients9[1][15] = { { 0.1257078722109418, -0.08797718387651439, -0.10158730158730163, 0.09273609439240911, 0.10774960475223583, 0.07257747386024228, 0.07918851612219983, -0.013385302265262976, -0.05184105275731594, -0.041902624070313935, -0.12849890174652465, -0.05666268962770457, -0.01197217830580397, 0.00927360943924089, 0.01070824181221041 } };
    static const double coefficients10[1][15] = { { -0.03142696805273516, 0.0, -0.0126984126984128, -0.24343224778007388, 0.0, 0.05443310539518176, 0.0, 0.09369711585684087, 0.0, -0.04190262407031391, 0.19274835261978696, 0.0, -0.02394435661160795, 0.0, 0.01070824181221036 } };
    static const double coefficients11[1][15] = { { 0.1257078722109417, 0.08797718387651442, -0.1015873015873015, 0.09273609439240912, -0.1077496047522358, 0.0725774738602423, -0.07918851612219979, -0.013385302265262987, 0.05184105275731596, -0.041902624070313955, -0.12849890174652462, 0.0566626896277046, -0.011972178305804002, -0.009273609439240906, 0.010708241812210412 } };
    static const double coefficients12[1][15] = { { 0.2514157444218836, -0.35190873550605756, -0.20317460317460323, -0.13910414158861362, -0.10774960475223579, -0.06220926330877909, 0.19005243869327954, -0.026770604530525925, 0.12441852661755824, 0.15563831797545175, 0.0, 0.16998806888311374, 0.08380524814062784, -0.0278208283177227, -0.053541209061051954 } };
    static const double coefficients13[1][15] = { { 0.2514157444218834, 0.35190873550605767, -0.20317460317460323, -0.13910414158861364, 0.10774960475223579, -0.06220926330877917, -0.1900524386932796, -0.026770604530525943, -0.12441852661755828, 0.15563831797545175, 0.0, -0.16998806888311377, 0.08380524814062784, 0.02782082831772275, -0.05354120906105191 } };
    static const double coefficients14[1][15] = { { 0.2514157444218833, 0.0, 0.40634920634920646, 0.0, 0.0, -0.18662778992633744, 0.0, -0.18739423171368177, 0.0, -0.2035270311986677, 0.0, 0.0, -0.16761049628125563, 0.0, 0.10708241812210391 } };
    for (std::size_t k = 0; k < num_points * 15; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues4[15] = {};
        basisvalues4[0] = 1.0;
        const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues4[1] = tmp1_4;
        const double tmp2_4 = (1.0 - Y[1]) / 2.0;
        const double tmp3_4 = tmp2_4 * tmp2_4;
        basisvalues4[3] = 1.5 * tmp1_4 * basisvalues4[1] - 0.5 * tmp3_4 * basisvalues4[0];
        basisvalues4[6] = 1.6666666666666667 * tmp1_4 * basisvalues4[3] - 0.6666666666666666 * tmp3_4 * basisvalues4[1];
        basisvalues4[10] = 1.75 * tmp1_4 * basisvalues4[6] - 0.75 * tmp3_4 * basisvalues4[3];
        basisvalues4[2] = (0.5 + 1.5 * Y[1]) * basisvalues4[0];
        basisvalues4[4] = (1.5 + 2.5 * Y[1]) * basisvalues4[1];
        basisvalues4[7] = (2.5 + 3.5 * Y[1]) * basisvalues4[3];
        basisvalues4[11] = (3.5 + 4.5 * Y[1]) * basisvalues4[6];
        basisvalues4[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues4[2] - 0.5555555555555556 * basisvalues4[0];
        basisvalues4[9] = (0.05 + 1.75 * Y[1]) * basisvalues4[5] - 0.7 * basisvalues4[2];
        basisvalues4[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues4[9] - 0.7714285714285715 * basisvalues4[5];
        basisvalues4[8] = (0.54 + 2.1 * Y[1]) * basisvalues4[4] - 0.56 * basisvalues4[1];
        basisvalues4[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues4[8] - 0.7142857142857143 * basisvalues4[4];
        basisvalues4[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues4[7] - 0.5510204081632653 * basisvalues4[3];
        basisvalues4[0] *= std::sqrt(0.5);
        basisvalues4[2] *= std::sqrt(1.0);
        basisvalues4[5] *= std::sqrt(1.5);
        basisvalues4[9] *= std::sqrt(2.0);
        basisvalues4[14] *= std::sqrt(2.5);
        basisvalues4[1] *= std::sqrt(3.0);
        basisvalues4[4] *= std::sqrt(4.5);
        basisvalues4[8] *= std::sqrt(6.0);
        basisvalues4[13] *= std::sqrt(7.5);
        basisvalues4[3] *= std::sqrt(7.5);
        basisvalues4[7] *= std::sqrt(10.0);
        basisvalues4[12] *= std::sqrt(12.5);
        basisvalues4[6] *= std::sqrt(14.0);
        basisvalues4[11] *= std::sqrt(17.5);
        basisvalues4[10] *= std::sqrt(22.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip] += coefficients0[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 1] += coefficients1[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 2] += coefficients2[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 3] += coefficients3[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 4] += coefficients4[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 5] += coefficients5[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 6] += coefficients6[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 7] += coefficients7[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 8] += coefficients8[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 9] += coefficients9[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 10] += coefficients10[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 11] += coefficients11[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 12] += coefficients12[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 13] += coefficients13[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 15; ++r)
            reference_values[15 * ip + 14] += coefficients14[0][r] * basisvalues4[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 15 * num_derivatives, 0.0);
    if (order > 4)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][15][15] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.291502622129207, 0.0, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 10.954451150103308, 0.0, 0.0, -3.8332593899996574, 0.0, 17.748239349298842, 0.0, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.732863826479688, 0.0, 3.3466401061362943, 4.364357804719854, 0.0, -5.074680379332355, 0.0, 17.008401285415207, 0.0, 1.521277658511322, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 0.0, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 0.0, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, 0.0, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][15] = { { 0.0, -0.04123930494211611, -0.023809523809523794, 0.0289800294976278, 0.02244783432338244, 0.012960263189328946, -0.03959425806109994, -0.03346325566315745, -0.02592052637865798, -0.01496522288225498, 0.03212472543663117, 0.028331344813852282, 0.023944356611607962, 0.01854721887848183, 0.010708241812210409 } };
    static const double coefficients1[1][15] = { { 0.0, 0.04123930494211617, -0.023809523809523832, 0.02898002949762785, -0.02244783432338247, 0.012960263189328969, 0.03959425806109991, -0.03346325566315744, 0.025920526378657945, -0.014965222882254959, 0.03212472543663116, -0.028331344813852296, 0.023944356611607955, -0.018547218878481802, 0.010708241812210386 } };
    static const double coefficients2[1][15] = { { 0.0, 0.0, 0.04761904761904756, 0.0, 0.0, 0.03888078956798697, 0.0, 0.0, 0.0, 0.05986089152901992, 0.0, 0.0, 0.0, 0.0, 0.053541209061051906 } };
    static const double coefficients3[1][15] = { { 0.1257078722109417, 0.1319657758147716, -0.025396825396825362, 0.13910414158861362, -0.07183306983482383, 0.031104631654389585, 0.06335081289775982, 0.026770604530525925, -0.06220926330877914, 0.047888713223215904, 0.0, 0.056662689627704536, -0.08380524814062786, 0.08346248495316816, -0.05354120906105194 } };
    static const double coefficients4[1][15] = { { -0.03142696805273546, 0.010997147984564326, 0.006349206349206258, 0.0, 0.18856180831641273, -0.16329931618554516, 0.0, 0.09369711585684087, 0.0, -0.04190262407031389, 0.0, 0.0, 0.08380524814062784, -0.13910414158861362, 0.10708241812210381 } };
    static const double coefficients5[1][15] = { { 0.12570787221094165, 0.04398859193825734, 0.12698412698412695, 0.0, 0.035916534917411994, 0.15552315827194782, 0.0, 0.0, 0.10368210551463188, -0.011972178305803988, 0.0, 0.0, 0.0, 0.09273609439240912, -0.10708241812210383 } };
    static const double coefficients6[1][15] = { { 0.12570787221094193, -0.13196577581477165, -0.02539682539682538, 0.13910414158861362, 0.07183306983482386, 0.03110463165438953, -0.06335081289775985, 0.026770604530525936, 0.06220926330877919, 0.04788871322321592, 0.0, -0.05666268962770456, -0.08380524814062781, -0.08346248495316815, -0.053541209061051906 } };
    static const double coefficients7[1][15] = { { -0.03142696805273531, -0.010997147984564293, 0.0063492063492062096, 0.0, -0.18856180831641264, -0.16329931618554508, 0.0, 0.09369711585684087, 0.0, -0.041902624070313824, 0.0, 0.0, 0.08380524814062784, 0.13910414158861353, 0.10708241812210373 } };
    static const double coefficients8[1][15] = { { 0.12570787221094196, -0.043988591938257195, 0.12698412698412712, 0.0, -0.03591653491741193, 0.15552315827194776, 0.0, 0.0, -0.10368210551463188, -0.01197217830580402, 0.0, 0.0, 0.0, -0.09273609439240908, -0.10708241812210381 } };
    static const double coefficients9[1][15] = { { 0.1257078722109418, -0.08797718387651439, -0.10158730158730163, 0.09273609439240911, 0.10774960475223583, 0.07257747386024228, 0.07918851612219983, -0.013385302265262976, -0.05184105275731594, -0.041902624070313935, -0.12849890174652465, -0.05666268962770457, -0.01197217830580397, 0.00927360943924089, 0.01070824181221041 } };
    static const double coefficients10[1][15] = { { -0.03142696805273516, 0.0, -0.0126984126984128, -0.24343224778007388, 0.0, 0.05443310539518176, 0.0, 0.09369711585684087, 0.0, -0.04190262407031391, 0.19274835261978696, 0.0, -0.02394435661160795, 0.0, 0.01070824181221036 } };
    static const double coefficients11[1][15] = { { 0.1257078722109417, 0.08797718387651442, -0.1015873015873015, 0.09273609439240912, -0.1077496047522358, 0.0725774738602423, -0.07918851612219979, -0.013385302265262987, 0.05184105275731596, -0.041902624070313955, -0.12849890174652462, 0.0566626896277046, -0.011972178305804002, -0.009273609439240906, 0.010708241812210412 } };
    static const double coefficients12[1][15] = { { 0.2514157444218836, -0.35190873550605756, -0.20317460317460323, -0.13910414158861362, -0.10774960475223579, -0.06220926330877909, 0.19005243869327954, -0.026770604530525925, 0.12441852661755824, 0.15563831797545175, 0.0, 0.16998806888311374, 0.08380524814062784, -0.0278208283177227, -0.053541209061051954 } };
    static const double coefficients13[1][15] = { { 0.2514157444218834, 0.35190873550605767, -0.20317460317460323, -0.13910414158861364, 0.10774960475223579, -0.06220926330877917, -0.1900524386932796, -0.026770604530525943, -0.12441852661755828, 0.15563831797545175, 0.0, -0.16998806888311377, 0.08380524814062784, 0.02782082831772275, -0.05354120906105191 } };
    static const double coefficients14[1][15] = { { 0.2514157444218833, 0.0, 0.40634920634920646, 0.0, 0.0, -0.18662778992633744, 0.0, -0.18739423171368177, 0.0, -0.2035270311986677, 0.0, 0.0, -0.16761049628125563, 0.0, 0.10708241812210391 } };
    const std::size_t reference_offset[15] = {};
    const std::size_t num_components[15] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[4][16][4] =
        { { { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 },
            { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 0, 0, 1 },
            { 0, 0, 1, 0 },
            { 0, 0, 1, 1 },
            { 0, 1, 0, 0 },
            { 0, 1, 0, 1 },
            { 0, 1, 1, 0 },
            { 0, 1, 1, 1 },
            { 1, 0, 0, 0 },
            { 1, 0, 0, 1 },
            { 1, 0, 1, 0 },
            { 1, 0, 1, 1 },
            { 1, 1, 0, 0 },
            { 1, 1, 0, 1 },
            { 1, 1, 1, 0 },
            { 1, 1, 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues4[15] = {};
        basisvalues4[0] = 1.0;
        const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues4[1] = tmp1_4;
        const double tmp2_4 = (1.0 - Y[1]) / 2.0;
        const double tmp3_4 = tmp2_4 * tmp2_4;
        basisvalues4[3] = 1.5 * tmp1_4 * basisvalues4[1] - 0.5 * tmp3_4 * basisvalues4[0];
        basisvalues4[6] = 1.6666666666666667 * tmp1_4 * basisvalues4[3] - 0.6666666666666666 * tmp3_4 * basisvalues4[1];
        basisvalues4[10] = 1.75 * tmp1_4 * basisvalues4[6] - 0.75 * tmp3_4 * basisvalues4[3];
        basisvalues4[2] = (0.5 + 1.5 * Y[1]) * basisvalues4[0];
        basisvalues4[4] = (1.5 + 2.5 * Y[1]) * basisvalues4[1];
        basisvalues4[7] = (2.5 + 3.5 * Y[1]) * basisvalues4[3];
        basisvalues4[11] = (3.5 + 4.5 * Y[1]) * basisvalues4[6];
        basisvalues4[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues4[2] - 0.5555555555555556 * basisvalues4[0];
        basisvalues4[9] = (0.05 + 1.75 * Y[1]) * basisvalues4[5] - 0.7 * basisvalues4[2];
        basisvalues4[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues4[9] - 0.7714285714285715 * basisvalues4[5];
        basisvalues4[8] = (0.54 + 2.1 * Y[1]) * basisvalues4[4] - 0.56 * basisvalues4[1];
        basisvalues4[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues4[8] - 0.7142857142857143 * basisvalues4[4];
        basisvalues4[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues4[7] - 0.5510204081632653 * basisvalues4[3];
        basisvalues4[0] *= std::sqrt(0.5);
        basisvalues4[2] *= std::sqrt(1.0);
        basisvalues4[5] *= std::sqrt(1.5);
        basisvalues4[9] *= std::sqrt(2.0);
        basisvalues4[14] *= std::sqrt(2.5);
        basisvalues4[1] *= std::sqrt(3.0);
        basisvalues4[4] *= std::sqrt(4.5);
        basisvalues4[8] *= std::sqrt(6.0);
        basisvalues4[13] *= std::sqrt(7.5);
        basisvalues4[3] *= std::sqrt(7.5);
        basisvalues4[7] *= std::sqrt(10.0);
        basisvalues4[12] *= std::sqrt(12.5);
        basisvalues4[6] *= std::sqrt(14.0);
        basisvalues4[11] *= std::sqrt(17.5);
        basisvalues4[10] *= std::sqrt(22.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 15; ++i)
        {
            double derivatives[16] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients10[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients11[0][s] * aux[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[15] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[15][15] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[15][15];
                        std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 15; ++s)
                        for (std::size_t t = 0; t < 15; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 15; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[15 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[4][16][4] =
        { { { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 },
            { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 0, 0, 1 },
            { 0, 0, 1, 0 },
            { 0, 0, 1, 1 },
            { 0, 1, 0, 0 },
            { 0, 1, 0, 1 },
            { 0, 1, 1, 0 },
            { 0, 1, 1, 1 },
            { 1, 0, 0, 0 },
            { 1, 0, 0, 1 },
            { 1, 0, 1, 0 },
            { 1, 0, 1, 1 },
            { 1, 1, 0, 0 },
            { 1, 1, 0, 1 },
            { 1, 1, 1, 0 },
            { 1, 1, 1, 1 } } };
    std::fill_n(values, num_points * 15 * num_derivatives, 0.0);
    const std::size_t reference_offsets[15] = {};
    const std::size_t physical_offsets[15] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[16][16];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 15; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[15 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[15 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[15];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[15];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 15; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 4)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[4][16][4] =
        { { { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 },
            { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 0, 0, 1 },
            { 0, 0, 1, 0 },
            { 0, 0, 1, 1 },
            { 0, 1, 0, 0 },
            { 0, 1, 0, 1 },
            { 0, 1, 1, 0 },
            { 0, 1, 1, 1 },
            { 1, 0, 0, 0 },
            { 1, 0, 0, 1 },
            { 1, 0, 1, 0 },
            { 1, 0, 1, 1 },
            { 1, 1, 0, 0 },
            { 1, 1, 0, 1 },
            { 1, 1, 1, 0 },
            { 1, 1, 1, 1 } } };
    // Declare transformation matrix
    double transform[16][16] =
        { { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.0, -0.04123930494211611, -0.023809523809523794, 0.0289800294976278, 0.02244783432338244, 0.012960263189328946, -0.03959425806109994, -0.03346325566315745, -0.02592052637865798, -0.01496522288225498, 0.03212472543663117, 0.028331344813852282, 0.023944356611607962, 0.01854721887848183, 0.010708241812210409 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.0, 0.04123930494211617, -0.023809523809523832, 0.02898002949762785, -0.02244783432338247, 0.012960263189328969, 0.03959425806109991, -0.03346325566315744, 0.025920526378657945, -0.014965222882254959, 0.03212472543663116, -0.028331344813852296, 0.023944356611607955, -0.018547218878481802, 0.010708241812210386 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.0, 0.0, 0.04761904761904756, 0.0, 0.0, 0.03888078956798697, 0.0, 0.0, 0.0, 0.05986089152901992, 0.0, 0.0, 0.0, 0.0, 0.053541209061051906 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.1257078722109417, 0.1319657758147716, -0.025396825396825362, 0.13910414158861362, -0.07183306983482383, 0.031104631654389585, 0.06335081289775982, 0.026770604530525925, -0.06220926330877914, 0.047888713223215904, 0.0, 0.056662689627704536, -0.08380524814062786, 0.08346248495316816, -0.05354120906105194 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { -0.03142696805273546, 0.010997147984564326, 0.006349206349206258, 0.0, 0.18856180831641273, -0.16329931618554516, 0.0, 0.09369711585684087, 0.0, -0.04190262407031389, 0.0, 0.0, 0.08380524814062784, -0.13910414158861362, 0.10708241812210381 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.12570787221094165, 0.04398859193825734, 0.12698412698412695, 0.0, 0.035916534917411994, 0.15552315827194782, 0.0, 0.0, 0.10368210551463188, -0.011972178305803988, 0.0, 0.0, 0.0, 0.09273609439240912, -0.10708241812210383 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.12570787221094193, -0.13196577581477165, -0.02539682539682538, 0.13910414158861362, 0.07183306983482386, 0.03110463165438953, -0.06335081289775985, 0.026770604530525936, 0.06220926330877919, 0.04788871322321592, 0.0, -0.05666268962770456, -0.08380524814062781, -0.08346248495316815, -0.053541209061051906 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { -0.03142696805273531, -0.010997147984564293, 0.0063492063492062096, 0.0, -0.18856180831641264, -0.16329931618554508, 0.0, 0.09369711585684087, 0.0, -0.041902624070313824, 0.0, 0.0, 0.08380524814062784, 0.13910414158861353, 0.10708241812210373 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.12570787221094196, -0.043988591938257195, 0.12698412698412712, 0.0, -0.03591653491741193, 0.15552315827194776, 0.0, 0.0, -0.10368210551463188, -0.01197217830580402, 0.0, 0.0, 0.0, -0.09273609439240908, -0.10708241812210381 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.1257078722109418, -0.08797718387651439, -0.10158730158730163, 0.09273609439240911, 0.10774960475223583, 0.07257747386024228, 0.07918851612219983, -0.013385302265262976, -0.05184105275731594, -0.041902624070313935, -0.12849890174652465, -0.05666268962770457, -0.01197217830580397, 0.00927360943924089, 0.01070824181221041 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { -0.03142696805273516, 0.0, -0.0126984126984128, -0.24343224778007388, 0.0, 0.05443310539518176, 0.0, 0.09369711585684087, 0.0, -0.04190262407031391, 0.19274835261978696, 0.0, -0.02394435661160795, 0.0, 0.01070824181221036 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.1257078722109417, 0.08797718387651442, -0.1015873015873015, 0.09273609439240912, -0.1077496047522358, 0.0725774738602423, -0.07918851612219979, -0.013385302265262987, 0.05184105275731596, -0.041902624070313955, -0.12849890174652462, 0.0566626896277046, -0.011972178305804002, -0.009273609439240906, 0.010708241812210412 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 12:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.2514157444218836, -0.35190873550605756, -0.20317460317460323, -0.13910414158861362, -0.10774960475223579, -0.06220926330877909, 0.19005243869327954, -0.026770604530525925, 0.12441852661755824, 0.15563831797545175, 0.0, 0.16998806888311374, 0.08380524814062784, -0.0278208283177227, -0.053541209061051954 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 13:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.2514157444218834, 0.35190873550605767, -0.20317460317460323, -0.13910414158861364, 0.10774960475223579, -0.06220926330877917, -0.1900524386932796, -0.026770604530525943, -0.12441852661755828, 0.15563831797545175, 0.0, -0.16998806888311377, 0.08380524814062784, 0.02782082831772275, -0.05354120906105191 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 14:
        {
            double basisvalues[15] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = (1.0 - Y[1]) / 2.0;
            const double tmp3_4 = tmp2_4 * tmp2_4;
            basisvalues[3] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp3_4 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_4 * basisvalues[3] - 0.6666666666666666 * tmp3_4 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_4 * basisvalues[6] - 0.75 * tmp3_4 * basisvalues[3];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[10] *= std::sqrt(22.5);
            // Table(s) of coefficients
            static const double coefficients0[15] = { 0.2514157444218833, 0.0, 0.40634920634920646, 0.0, 0.0, -0.18662778992633744, 0.0, -0.18739423171368177, 0.0, -0.2035270311986677, 0.0, 0.0, -0.16761049628125563, 0.0, 0.10708241812210391 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999999, 0.0, 7.071067811865468, 0.0, 1.0658141036401503e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129207, -5.051646259191276e-14, -2.993325909419166, 13.66260102127948, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004133, 0.0, 0.0, 12.521980673998844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.509903313490213e-14, 0.0 },
                  { 3.4641016151377606, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.019489416737658e-14, 10.954451150103308, 3.708416356756109e-14, -7.996454079210914e-14, -3.8332593899996574, -1.2227903208658481e-14, 17.748239349298842, 1.1003150740782367e-14, 0.5532833351724968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479688, -2.9122617702618335e-14, 3.3466401061362943, 4.364357804719854, -7.72715225139109e-14, -5.074680379332355, 0.0, 17.008401285415207, 2.882567507755787e-14, 1.521277658511322, 0.0, -1.1962484874726272e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 2.4494897427831646, 0.0, 0.0, 9.142857142857073, 1.3019709487332159e-14, 0.0, 0.0, 14.846149779161824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.098386676965938, 0.0, 7.668115805072359, 0.0, 0.0, 10.733126291999017, 0.0, 0.0, 0.0, 9.295160030897799, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[15][15] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.449489742783183, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716187, 4.743416490252578, -0.9128709291752799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999138, 6.123724356957942, 3.5355339059327333, 0.0, 1.509903313490213e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758486, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645787, 5.184592558726257, -1.4966629547095702, 6.831300510639734, -1.058300524425833, 0.30550504633039566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998355, 2.1908902300206696, 2.529822128134685, 8.08290376865479, 6.260990336999421, -1.8073922282301162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688767, -5.0911688245431455, 3.91918358845309, 0.0, 9.699484522385701, 4.200000000000005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.000000000000016, 0.0, -2.828427124746229, 0.0, 0.0, 12.124355652982167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999722, 5.477225575051649, -1.8973665961010082, 7.42307488958087, -1.9166296949998276, 0.6639400022069836, 8.874119674649428, -1.071428571428567, 0.27664166758624936, -0.09583148474999043, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398353, 2.8982753492378523, 1.6733200530681498, 2.1821789023598632, 5.7470489321538825, -2.537340189666169, 10.062305898749049, 8.504200642707623, -2.1957751641341834, 0.7606388292556616, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999976, 1.22474487139158, 3.5355339059327267, -7.377111135633229, 4.571428571428532, 1.649572197684666, 0.0, 11.499778169998924, 7.423074889580909, -2.571428571428571, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384829126, 6.640783086353566, 3.834057902536159, 1.3708976232279897e-14, -6.196773353931823, 5.36656314599952, 0.0, 0.0, 13.416407864998735, 4.647580015448902, 1.0176502452608945e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -3.5777087639996883, 0.0, 8.854377448471439, 0.0, -1.0658141036401503e-14, -3.0983866769659745, 0.0, 0.0, 0.0, 16.099689437998478, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[15][15] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 225, 0.0);
                for (std::size_t t = 0; t < 15; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 15; ++t)
                            for (std::size_t u = 0; u < 15; ++u)
                                for (std::size_t tu = 0; tu < 15; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 15; ++s)
                    for (std::size_t t = 0; t < 15; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 15, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 4)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[16] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 15; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.75 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
            y[1] = 0.75 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.25 * coordinate_dofs[2] + 0.75 * coordinate_dofs[4];
            y[1] = 0.25 * coordinate_dofs[3] + 0.75 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[4];
            y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[4];
            y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2];
            y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 10:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 11:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[2];
            y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 12:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 13:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
            y[1] = 0.25 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 14:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.75 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
    y[1] = 0.75 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.25 * coordinate_dofs[2] + 0.75 * coordinate_dofs[4];
    y[1] = 0.25 * coordinate_dofs[3] + 0.75 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[4];
    y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[4];
    y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2];
    y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[2];
    y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
    y[1] = 0.25 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.75 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.75 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.25 * coordinate_dofs[2] + 0.75 * coordinate_dofs[4];
    dof_coordinates[2 * 5 + 1] = 0.25 * coordinate_dofs[3] + 0.75 * coordinate_dofs[5];
    dof_coordinates[2 * 6] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[4];
    dof_coordinates[2 * 6 + 1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[5];
    dof_coordinates[2 * 7] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 7 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 8] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[4];
    dof_coordinates[2 * 8 + 1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[5];
    dof_coordinates[2 * 9] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2];
    dof_coordinates[2 * 9 + 1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3];
    dof_coordinates[2 * 10] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 10 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 11] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[2];
    dof_coordinates[2 * 11 + 1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[3];
    dof_coordinates[2 * 12] = 0.5 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
    dof_coordinates[2 * 12 + 1] = 0.5 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
    dof_coordinates[2 * 13] = 0.25 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
    dof_coordinates[2 * 13 + 1] = 0.25 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
    dof_coordinates[2 * 14] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 14 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[30] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.75, 0.25, 0.5, 0.5, 0.25, 0.75, 0.0, 0.25, 0.0, 0.5, 0.0, 0.75, 0.25, 0.0, 0.5, 0.0, 0.75, 0.0, 0.25, 0.25, 0.5, 0.25, 0.25, 0.5 };
    std::copy_n(dof_X, 30, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new erroripdg_2h_finite_element_3();
  }

};


class erroripdg_2h_dofmap_0: public ufc::dofmap
{
public:

  erroripdg_2h_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~erroripdg_2h_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 3;
  }

  std::size_t num_element_dofs() const final override
  {
    return 3;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 2;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 2, 3 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new erroripdg_2h_dofmap_0();
  }

};


class erroripdg_2h_dofmap_1: public ufc::dofmap
{
public:

  erroripdg_2h_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~erroripdg_2h_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 2 * num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 6;
  }

  std::size_t num_element_dofs() const final override
  {
    return 6;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 4;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 4, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[0][0];
    dofs[4] = offset + entity_indices[0][1];
    dofs[5] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 5;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 5;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new erroripdg_2h_dofmap_0();
    case 1:
        return new erroripdg_2h_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new erroripdg_2h_dofmap_1();
  }

};


class erroripdg_2h_dofmap_2: public ufc::dofmap
{
public:

  erroripdg_2h_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~erroripdg_2h_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', triangle, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = {};
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 1;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new erroripdg_2h_dofmap_2();
  }

};


class erroripdg_2h_dofmap_3: public ufc::dofmap
{
public:

  erroripdg_2h_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~erroripdg_2h_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', triangle, 4)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { false, false, true };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 15 * num_global_entities[2];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 15;
  }

  std::size_t num_element_dofs() const final override
  {
    return 15;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 15 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 15 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 15 * entity_indices[2][0];
    dofs[1] = 15 * entity_indices[2][0] + 1;
    dofs[2] = 15 * entity_indices[2][0] + 2;
    dofs[3] = 15 * entity_indices[2][0] + 3;
    dofs[4] = 15 * entity_indices[2][0] + 4;
    dofs[5] = 15 * entity_indices[2][0] + 5;
    dofs[6] = 15 * entity_indices[2][0] + 6;
    dofs[7] = 15 * entity_indices[2][0] + 7;
    dofs[8] = 15 * entity_indices[2][0] + 8;
    dofs[9] = 15 * entity_indices[2][0] + 9;
    dofs[10] = 15 * entity_indices[2][0] + 10;
    dofs[11] = 15 * entity_indices[2][0] + 11;
    dofs[12] = 15 * entity_indices[2][0] + 12;
    dofs[13] = 15 * entity_indices[2][0] + 13;
    dofs[14] = 15 * entity_indices[2][0] + 14;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new erroripdg_2h_dofmap_3();
  }

};


class erroripdg_2h_coordinate_mapping_1: public ufc::coordinate_mapping
{
public:

  erroripdg_2h_coordinate_mapping_1() : ufc::coordinate_mapping()
  {
    // Do nothing
  }

  ~erroripdg_2h_coordinate_mapping_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::coordinate_mapping * create() const final override
  {
    return new erroripdg_2h_coordinate_mapping_1();
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new erroripdg_2h_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new erroripdg_2h_dofmap_1();
  }

  void compute_physical_coordinates(
      double * x, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    erroripdg_2h_finite_element_0 xelement;
    double phi[3];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[2 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t d = 0; d < 3; ++d)
                x[2 * ip + i] += coordinate_dofs[2 * d + i] * phi[d];
    }
  }

  void compute_reference_coordinates(
      double * X, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double J[4];
    double detJ[1];
    double K[4];
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_reference_geometry(
      double * X, double * J, double * detJ, double * K, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_jacobians(
      double * J, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    erroripdg_2h_finite_element_0 xelement;
    double dphi[6];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[2 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t j = 0; j < 2; ++j)
                for (std::size_t d = 0; d < 3; ++d)
                    J[2 * 2 * ip + 2 * i + j] += coordinate_dofs[2 * d + i] * dphi[2 * d + j];
    }
  }

  void compute_jacobian_determinants(
      double * detJ, std::size_t num_points,
      const double * J,
      int cell_orientation) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[2 * 2 * ip] * J[2 * 2 * ip + 2 + 1] - J[2 * 2 * ip + 1] * J[2 * 2 * ip + 2];
  }

  void compute_jacobian_inverses(
      double * K, std::size_t num_points,
      const double * J, const double * detJ) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[2 * 2 * ip] = J[2 * 2 * ip + 2 + 1] / detJ[ip];
        K[2 * 2 * ip + 1] = -J[2 * 2 * ip + 1] / detJ[ip];
        K[2 * 2 * ip + 2] = -J[2 * 2 * ip + 2] / detJ[ip];
        K[2 * 2 * ip + 2 + 1] = J[2 * 2 * ip] / detJ[ip];
    }
  }

  void compute_geometry(
      double * x, double * J, double * detJ, double * K, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
  }

  void compute_midpoint_geometry(
      double * x, double * J,
      const double * coordinate_dofs) const final override
  {
    const double phi_Xm[3] = { 0.33333333333333337, 0.33333333333333337, 0.3333333333333333 };
    const double dphi_Xm[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t d = 0; d < 3; ++d)
            x[i] += coordinate_dofs[2 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t d = 0; d < 3; ++d)
                J[2 * i + j] += coordinate_dofs[2 * d + i] * dphi_Xm[j][d];
  }

};


class erroripdg_2h_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  erroripdg_2h_cell_integral_0_otherwise() : ufc::cell_integral()
  {

  }

  ~erroripdg_2h_cell_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 8
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 8
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           8
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_Q25[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q25[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q25[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q25[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q25[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q25[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q25[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q25[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q25[0][0][1];
    alignas(32) double sp[4];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = std::abs(sp[2]);
    A[0] = 0.002557319223985889 * sp[3];
    A[1] = -0.0002380952380952383 * sp[3];
    A[2] = -0.000238095238095237 * sp[3];
    A[3] = -0.0009876543209876576 * sp[3];
    A[4] = -0.0001058201058201051 * sp[3];
    A[5] = -0.0009876543209876578 * sp[3];
    A[6] = 0.001410934744268067 * sp[3];
    A[7] = -0.00070546737213403 * sp[3];
    A[8] = 0.0;
    A[9] = 0.001410934744268069 * sp[3];
    A[10] = -0.0007054673721340332 * sp[3];
    A[11] = 0.0;
    A[12] = 0.00141093474426807 * sp[3];
    A[13] = -0.001410934744268076 * sp[3];
    A[14] = -0.001410934744268077 * sp[3];
    A[15] = -0.0002380952380952383 * sp[3];
    A[16] = 0.002557319223985889 * sp[3];
    A[17] = -0.0002380952380952376 * sp[3];
    A[18] = 0.00141093474426807 * sp[3];
    A[19] = -0.0007054673721340332 * sp[3];
    A[20] = 0.0;
    A[21] = -0.0009876543209876604 * sp[3];
    A[22] = -0.0001058201058201035 * sp[3];
    A[23] = -0.0009876543209876595 * sp[3];
    A[24] = 0.0;
    A[25] = -0.000705467372134037 * sp[3];
    A[26] = 0.001410934744268071 * sp[3];
    A[27] = -0.001410934744268087 * sp[3];
    A[28] = 0.001410934744268076 * sp[3];
    A[29] = -0.001410934744268085 * sp[3];
    A[30] = -0.000238095238095237 * sp[3];
    A[31] = -0.0002380952380952376 * sp[3];
    A[32] = 0.002557319223985887 * sp[3];
    A[33] = 0.0;
    A[34] = -0.0007054673721340393 * sp[3];
    A[35] = 0.001410934744268071 * sp[3];
    A[36] = 0.0;
    A[37] = -0.000705467372134038 * sp[3];
    A[38] = 0.001410934744268074 * sp[3];
    A[39] = -0.000987654320987652 * sp[3];
    A[40] = -0.000105820105820106 * sp[3];
    A[41] = -0.0009876543209876513 * sp[3];
    A[42] = -0.001410934744268069 * sp[3];
    A[43] = -0.001410934744268077 * sp[3];
    A[44] = 0.001410934744268064 * sp[3];
    A[45] = -0.0009876543209876576 * sp[3];
    A[46] = 0.00141093474426807 * sp[3];
    A[47] = 0.0;
    A[48] = 0.02257495590828922 * sp[3];
    A[49] = -0.01128747795414461 * sp[3];
    A[50] = 0.006772486772486767 * sp[3];
    A[51] = 0.002257495590828926 * sp[3];
    A[52] = 0.0005643738977072401 * sp[3];
    A[53] = 0.004514991181657844 * sp[3];
    A[54] = 0.004514991181657851 * sp[3];
    A[55] = -0.008465608465608459 * sp[3];
    A[56] = 0.01128747795414461 * sp[3];
    A[57] = -0.002257495590828934 * sp[3];
    A[58] = 0.01128747795414463 * sp[3];
    A[59] = 0.002257495590828913 * sp[3];
    A[60] = -0.0001058201058201051 * sp[3];
    A[61] = -0.0007054673721340332 * sp[3];
    A[62] = -0.0007054673721340393 * sp[3];
    A[63] = -0.01128747795414461 * sp[3];
    A[64] = 0.02793650793650791 * sp[3];
    A[65] = -0.0112874779541446 * sp[3];
    A[66] = 0.0005643738977072389 * sp[3];
    A[67] = 0.0004232804232803996 * sp[3];
    A[68] = -0.008465608465608454 * sp[3];
    A[69] = 0.0005643738977072429 * sp[3];
    A[70] = 0.0004232804232804184 * sp[3];
    A[71] = -0.008465608465608444 * sp[3];
    A[72] = -0.006772486772486767 * sp[3];
    A[73] = 0.003386243386243397 * sp[3];
    A[74] = 0.003386243386243386 * sp[3];
    A[75] = -0.0009876543209876578 * sp[3];
    A[76] = 0.0;
    A[77] = 0.001410934744268071 * sp[3];
    A[78] = 0.006772486772486767 * sp[3];
    A[79] = -0.0112874779541446 * sp[3];
    A[80] = 0.02257495590828921 * sp[3];
    A[81] = 0.004514991181657842 * sp[3];
    A[82] = -0.008465608465608452 * sp[3];
    A[83] = 0.01128747795414461 * sp[3];
    A[84] = 0.002257495590828912 * sp[3];
    A[85] = 0.0005643738977072367 * sp[3];
    A[86] = 0.004514991181657838 * sp[3];
    A[87] = -0.002257495590828947 * sp[3];
    A[88] = 0.00225749559082892 * sp[3];
    A[89] = 0.01128747795414461 * sp[3];
    A[90] = 0.001410934744268067 * sp[3];
    A[91] = -0.0009876543209876604 * sp[3];
    A[92] = 0.0;
    A[93] = 0.002257495590828926 * sp[3];
    A[94] = 0.0005643738977072389 * sp[3];
    A[95] = 0.004514991181657842 * sp[3];
    A[96] = 0.02257495590828923 * sp[3];
    A[97] = -0.0112874779541446 * sp[3];
    A[98] = 0.00677248677248677 * sp[3];
    A[99] = 0.01128747795414462 * sp[3];
    A[100] = -0.008465608465608464 * sp[3];
    A[101] = 0.00451499118165785 * sp[3];
    A[102] = 0.01128747795414465 * sp[3];
    A[103] = -0.002257495590828936 * sp[3];
    A[104] = 0.00225749559082893 * sp[3];
    A[105] = -0.00070546737213403 * sp[3];
    A[106] = -0.0001058201058201035 * sp[3];
    A[107] = -0.000705467372134038 * sp[3];
    A[108] = 0.0005643738977072401 * sp[3];
    A[109] = 0.0004232804232803996 * sp[3];
    A[110] = -0.008465608465608452 * sp[3];
    A[111] = -0.0112874779541446 * sp[3];
    A[112] = 0.02793650793650789 * sp[3];
    A[113] = -0.01128747795414459 * sp[3];
    A[114] = -0.008465608465608442 * sp[3];
    A[115] = 0.0004232804232804238 * sp[3];
    A[116] = 0.0005643738977072415 * sp[3];
    A[117] = 0.0033862433862434 * sp[3];
    A[118] = -0.006772486772486739 * sp[3];
    A[119] = 0.003386243386243369 * sp[3];
    A[120] = 0.0;
    A[121] = -0.0009876543209876595 * sp[3];
    A[122] = 0.001410934744268074 * sp[3];
    A[123] = 0.004514991181657844 * sp[3];
    A[124] = -0.008465608465608454 * sp[3];
    A[125] = 0.01128747795414461 * sp[3];
    A[126] = 0.00677248677248677 * sp[3];
    A[127] = -0.01128747795414459 * sp[3];
    A[128] = 0.02257495590828923 * sp[3];
    A[129] = 0.004514991181657839 * sp[3];
    A[130] = 0.0005643738977072323 * sp[3];
    A[131] = 0.00225749559082892 * sp[3];
    A[132] = 0.002257495590828924 * sp[3];
    A[133] = -0.002257495590828933 * sp[3];
    A[134] = 0.01128747795414465 * sp[3];
    A[135] = 0.001410934744268069 * sp[3];
    A[136] = 0.0;
    A[137] = -0.000987654320987652 * sp[3];
    A[138] = 0.004514991181657851 * sp[3];
    A[139] = 0.0005643738977072429 * sp[3];
    A[140] = 0.002257495590828912 * sp[3];
    A[141] = 0.01128747795414462 * sp[3];
    A[142] = -0.008465608465608442 * sp[3];
    A[143] = 0.004514991181657839 * sp[3];
    A[144] = 0.02257495590828923 * sp[3];
    A[145] = -0.01128747795414462 * sp[3];
    A[146] = 0.006772486772486766 * sp[3];
    A[147] = 0.01128747795414461 * sp[3];
    A[148] = 0.002257495590828914 * sp[3];
    A[149] = -0.00225749559082892 * sp[3];
    A[150] = -0.0007054673721340332 * sp[3];
    A[151] = -0.000705467372134037 * sp[3];
    A[152] = -0.000105820105820106 * sp[3];
    A[153] = -0.008465608465608459 * sp[3];
    A[154] = 0.0004232804232804184 * sp[3];
    A[155] = 0.0005643738977072367 * sp[3];
    A[156] = -0.008465608465608464 * sp[3];
    A[157] = 0.0004232804232804238 * sp[3];
    A[158] = 0.0005643738977072323 * sp[3];
    A[159] = -0.01128747795414462 * sp[3];
    A[160] = 0.02793650793650792 * sp[3];
    A[161] = -0.0112874779541446 * sp[3];
    A[162] = 0.003386243386243397 * sp[3];
    A[163] = 0.003386243386243412 * sp[3];
    A[164] = -0.00677248677248676 * sp[3];
    A[165] = 0.0;
    A[166] = 0.001410934744268071 * sp[3];
    A[167] = -0.0009876543209876513 * sp[3];
    A[168] = 0.01128747795414461 * sp[3];
    A[169] = -0.008465608465608444 * sp[3];
    A[170] = 0.004514991181657838 * sp[3];
    A[171] = 0.00451499118165785 * sp[3];
    A[172] = 0.0005643738977072415 * sp[3];
    A[173] = 0.00225749559082892 * sp[3];
    A[174] = 0.006772486772486766 * sp[3];
    A[175] = -0.0112874779541446 * sp[3];
    A[176] = 0.02257495590828919 * sp[3];
    A[177] = 0.002257495590828917 * sp[3];
    A[178] = 0.01128747795414458 * sp[3];
    A[179] = -0.002257495590828915 * sp[3];
    A[180] = 0.00141093474426807 * sp[3];
    A[181] = -0.001410934744268087 * sp[3];
    A[182] = -0.001410934744268069 * sp[3];
    A[183] = -0.002257495590828934 * sp[3];
    A[184] = -0.006772486772486767 * sp[3];
    A[185] = -0.002257495590828947 * sp[3];
    A[186] = 0.01128747795414465 * sp[3];
    A[187] = 0.0033862433862434 * sp[3];
    A[188] = 0.002257495590828924 * sp[3];
    A[189] = 0.01128747795414461 * sp[3];
    A[190] = 0.003386243386243397 * sp[3];
    A[191] = 0.002257495590828917 * sp[3];
    A[192] = 0.09481481481481484 * sp[3];
    A[193] = -0.01354497354497356 * sp[3];
    A[194] = -0.01354497354497358 * sp[3];
    A[195] = -0.001410934744268076 * sp[3];
    A[196] = 0.001410934744268076 * sp[3];
    A[197] = -0.001410934744268077 * sp[3];
    A[198] = 0.01128747795414463 * sp[3];
    A[199] = 0.003386243386243397 * sp[3];
    A[200] = 0.00225749559082892 * sp[3];
    A[201] = -0.002257495590828936 * sp[3];
    A[202] = -0.006772486772486739 * sp[3];
    A[203] = -0.002257495590828933 * sp[3];
    A[204] = 0.002257495590828914 * sp[3];
    A[205] = 0.003386243386243412 * sp[3];
    A[206] = 0.01128747795414458 * sp[3];
    A[207] = -0.01354497354497356 * sp[3];
    A[208] = 0.09481481481481487 * sp[3];
    A[209] = -0.01354497354497356 * sp[3];
    A[210] = -0.001410934744268077 * sp[3];
    A[211] = -0.001410934744268085 * sp[3];
    A[212] = 0.001410934744268064 * sp[3];
    A[213] = 0.002257495590828913 * sp[3];
    A[214] = 0.003386243386243386 * sp[3];
    A[215] = 0.01128747795414461 * sp[3];
    A[216] = 0.00225749559082893 * sp[3];
    A[217] = 0.003386243386243369 * sp[3];
    A[218] = 0.01128747795414465 * sp[3];
    A[219] = -0.00225749559082892 * sp[3];
    A[220] = -0.00677248677248676 * sp[3];
    A[221] = -0.002257495590828915 * sp[3];
    A[222] = -0.01354497354497358 * sp[3];
    A[223] = -0.01354497354497356 * sp[3];
    A[224] = 0.09481481481481484 * sp[3];
  }

};


class erroripdg_2h_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  erroripdg_2h_cell_integral_1_otherwise() : ufc::cell_integral()
  {

  }

  ~erroripdg_2h_cell_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 12
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 12
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           12
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights49[49] = { 0.003623466079725794, 0.00715464377909615, 0.008247603013529583, 0.006935542753734078, 0.004297910087982426, 0.001774485071438052, 0.0003375907567113747, 0.007827186648495099, 0.01545501766273407, 0.01781596040067579, 0.01498172921938941, 0.009284078756888543, 0.003833132573484685, 0.000729242610651565, 0.01068501060131498, 0.02109787781815244, 0.02432083637489712, 0.02045178462250981, 0.0126738360020928, 0.005232667115687635, 0.0009955000916249657, 0.01169603676441937, 0.02309417967090931, 0.02662209772138336, 0.02238695250460707, 0.01387304677156393, 0.005727787200652747, 0.001089695284831587, 0.01068501060131498, 0.02109787781815245, 0.02432083637489713, 0.02045178462250982, 0.0126738360020928, 0.005232667115687637, 0.0009955000916249662, 0.007827186648495099, 0.01545501766273407, 0.01781596040067579, 0.01498172921938941, 0.009284078756888543, 0.003833132573484685, 0.000729242610651565, 0.003623466079725802, 0.007154643779096167, 0.008247603013529604, 0.006935542753734095, 0.004297910087982437, 0.001774485071438057, 0.0003375907567113755 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE15_C0_D02_Q49[1][49][12] =
        { { { 39.37713997930441, 12.57332688882693, -0.7167731977430023, -1.448794907634138, -117.013458096551, 128.4688231440157, -63.40583191559612, 4.474279375188202, -0.716773197743179, -10.39735365801041, 1.433546395486239, 7.371869190456479 },
            { 27.1232479543653, 5.340842073156719, -0.655932406006773, -0.7804157110844265, -72.80830494166175, 69.58770809338435, -29.24349317924466, 3.534067122500478, -0.6559324060068672, -7.84854995608528, 1.311864812013697, 5.094898544669293 },
            { 11.50941003110771, -1.806694893983392, -0.5531700673032176, 0.07551928893382487, -18.47040090496877, 0.6058768226310094, 8.161808945213444, 2.226516483998378, -0.5531700673032285, -4.377513679062861, 1.106340134606497, 2.075477906130651 },
            { -0.1286019044890234, -2.557645922967553, -0.4207202277899311, 0.7229974511348045, 17.63166611862274, -37.43517244674597, 22.48975415557983, 1.009508294466797, -0.4207202277898254, -1.296019137798824, 0.8414404555797796, -0.4364866078028076 },
            { -3.207546604179682, 6.162768391809776, -0.2768272634071098, 0.9127962286043023, 18.6087783008926, -21.43214839743641, -0.1318516910862804, 0.2151241546391942, -0.2768272634068513, 0.482547919325764, 0.5536545268139166, -1.610468302569244 },
            { 1.75322236627163, 21.9864544793614, -0.1440726982925895, 0.6689667167061693, -11.68372467913324, 40.09423673881298, -52.15018890531279, -0.08729091745683037, -0.1440726982921814, 0.8435485516196213, 0.2881453965846443, -1.425224350868895 },
            { 9.787722920479194, 38.06983787268495, -0.04555075151104404, 0.2542581381473212, -51.57018359883834, 111.8470363089241, -108.1344135032499, -0.07153042192053327, -0.04555075151058574, 0.3973189819882457, 0.09110150302145215, -0.5800466982149501 },
            { 25.69171242022068, 12.57332688882692, -1.999773820087306, -7.358084907182626, -83.73331297883504, 102.9648155858349, -57.49654191604758, 19.4427075566161, -1.999773820087422, -46.24350002041479, 3.99954764017474, 34.15887737098146 },
            { 16.72968974078876, 5.340842073156716, -1.985655689503801, -3.963545864773668, -48.83805836081946, 52.82788957242933, -26.0603630255554, 15.25734861957397, -1.985655689503849, -34.47824310392158, 3.971311379007672, 23.18444034912135 },
            { 5.609730293684771, -1.806694893983394, -1.883916780241647, 0.3835445149466178, -6.979066656135688, -4.677752462766344, 7.853783719200655, 9.456942934359747, -1.883916780241618, -18.53034135377285, 3.767833560483295, 8.68985390446649 },
            { -2.016137645333787, -2.557645922967553, -1.622747209355104, 3.671932172797919, 18.45780287864917, -33.42483874426453, 19.54081943391673, 4.09907101687676, -1.622747209354971, -4.526209860955655, 3.245494418710076, -3.244793328719033 },
            { -2.742391787623365, 6.162768391809777, -1.192457354564712, 4.635875041827283, 13.95538985455701, -13.52083595443417, -3.85493050430925, 0.6655994292405204, -1.192457354564466, 3.304676183346097, 2.384914709129137, -8.606150654413888 },
            { 2.752674924257653, 21.9864544793614, -0.675935611075456, 3.397522917609628, -16.41118599600873, 46.55080169860591, -54.87874510621626, -0.5548805626599473, -0.6759356110750794, 4.507284042929333, 1.351871222150418, -7.349926397878956 },
            { 10.2707038951501, 38.06983787268496, -0.2259067354403115, 1.291316637690052, -53.57320404772287, 114.4041342826804, -109.1714720027926, -0.3741554126621649, -0.225906735439855, 2.039627463014245, 0.4518134708799799, -2.956788688042039 },
            { 9.136389620758329, 12.57332688882692, 1.501687098161838, -16.91438804452157, -41.06636424257142, 67.29688651169469, -47.94023877870859, 32.49656943782924, 1.501687098161755, -81.90752692018008, -3.003374196323584, 66.32534552687247 },
            { 4.495564592318984, 5.340842073156712, 0.4379452484527953, -9.111195866141493, -19.22215806251209, 30.2984644212239, -20.91271302418754, 25.06787283008713, 0.437945248452781, -59.24694152631574, -0.875890496905571, 43.29026456237015 },
            { -0.7852105900348871, -1.806694893983395, -0.8901343148773236, 0.8816724514585154, 5.312687174791731, -10.07643747346223, 7.355655782688771, 14.85810135271508, -0.8901343148772505, -28.83453025397166, 1.780268629754577, 13.09475644979807 },
            { -3.32152053828176, -2.557645922967554, -1.819548613244778, 8.440849273598497, 16.29965156374456, -25.19238743561142, 14.77190233311617, 5.601255313714437, -1.819548613244624, -2.761661353830447, 3.639097226489393, -11.28044323348249 },
            { -1.264523431460399, 6.16276839180978, -1.947547466607734, 10.65671168143729, 4.978816502621114, -0.001294319051253545, -9.875767143919244, -0.05717881487937965, -1.9475474666075, 10.77106931119592, 3.895094933215189, -21.37060217775381 },
            { 4.558538441015048, 21.98645447936141, -1.346463477831566, 7.810051357589991, -24.43544146950386, 57.18172209532399, -59.29127354619661, -1.690216212661192, -1.346463477831234, 11.19048378291222, 2.692926955662696, -17.31031892784096 },
            { 11.07023710422054, 38.06983787268496, -0.4990995322128384, 2.968412429831126, -56.84936625800484, 118.557859076033, -110.8485677949337, -0.9004958249600614, -0.4990995322124103, 4.769404079751137, 0.9981990644250729, -6.837320684622107 },
            { -1.676833186283547, 12.57332688882691, 14.93715978101098, -28.46797949008273, -7.886327182926454, 33.3764808135304, -36.38664733314734, 29.874319562022, 14.93715978101094, -88.21661861412674, -29.87431956202187, 86.81027854218749 },
            { -2.747357056423573, 5.340842073156711, 10.91624657576078, -15.33471600419224, 1.487205373023768, 10.60850249637985, -14.68919288613677, 21.83249315152171, 10.9162465757608, -58.99970230723567, -21.83249315152156, 52.50192515990619 },
            { -3.325355141219127, -1.806694893983395, 5.502703863007232, 1.483910218863769, 9.79073850975497, -11.41210648983599, 6.753418015283543, 11.00540772601476, 5.502703863007341, -20.52690523316577, -11.00540772601459, 8.037587288287245 },
            { -2.016640491386323, -2.557645922967553, 0.8256088845246046, 14.2064805044787, 7.92426023907352, -12.35624492695564, 9.006271102236004, 1.651217769049629, 0.8256088845247688, 10.90404496637938, -1.651217769049396, -26.7617432399077 },
            { 1.719694361047105, 6.16276839180979, -1.662981357998365, 17.9359163796141, -8.268823780570655, 17.54133286980979, -17.15497184209603, -3.325962715996218, -1.662981357998162, 24.58784181160643, 3.325962715996487, -39.19779547522429 },
            { 7.05468808594526, 21.98645447936141, -1.844276445141187, 13.14480791614433, -34.76249731791858, 70.34738485736281, -64.62603010475092, -3.68855289028174, -1.844276445140909, 20.5219136967077, 3.688552890282001, -29.97816872257025 },
            { 12.06735898387596, 38.06983787268497, -0.7989057456096873, 4.996024919619011, -60.87122250710355, 123.6102059352642, -112.8761802847216, -1.597811491218605, -0.7989057456092947, 8.191647902056129, 1.597811491218817, -11.58986133045648 },
            { -2.417201824802957, 12.57332688882691, 38.44548663238259, -40.02157093564394, 5.148001539673544, 9.528929283888651, -24.83305588758616, 7.106361349169865, 38.44548663238258, -54.23429363398364, -76.89097326476501, 87.1495032204576 },
            { -1.727955545731852, 5.340842073156713, 29.65687106250304, -21.55823614224298, 5.671922489691054, -0.8191362690298938, -8.465672748086025, 2.072467154087759, 29.65687106250308, -25.70317045041848, -59.31374212500606, 45.18893943857366 },
            { -0.1829728226296956, -1.806694893983395, 17.57806891066548, 2.086147986269022, 2.903736105170853, -7.065248636436063, 6.151180247878311, -4.212339640232902, 17.57806891066558, 10.51082726673483, -35.15613782133107, -8.38463561277095 },
            { 2.444110692598393, -2.557645922967549, 6.62663751938327, 19.9721117353589, -6.762873359776091, 3.635768718789424, 3.240639871355831, -8.610562049793737, 6.626637519383415, 37.19323583494633, -13.25327503876671, -48.55478552051149 },
            { 6.014681266716373, 6.1627683918098, -0.06764613622723648, 25.21512107779089, -24.13800229008595, 36.3947291718326, -24.43417654027282, -9.216284843436581, -0.06764613622707827, 43.64769076466399, 0.135292272454284, -59.64652699901831 },
            { 9.893294999569363, 21.98645447936144, -1.999632143756912, 18.47956447469866, -45.77446770372111, 83.8555048880956, -69.9607866633053, -6.371804105290077, -1.999632143756692, 31.22317268527875, 3.999264287513524, -43.33093305468731 },
            { 13.09784959400843, 38.06983787268497, -1.0653432285295, 7.023637409406909, -64.95981621715636, 128.6959215249724, -114.9037927745095, -2.361864618431254, -1.065343228529123, 11.74736664626935, 2.130686457058456, -16.40913943724492 },
            { 4.581817837320329, 12.57332688882692, 65.50129001221738, -49.57787407298292, 0.7062653527659037, -2.584657328665962, -15.2767527502472, -26.94846169278821, 65.50129001221735, 4.319049312593574, -131.0025800244345, 72.2072864531774 },
            { 5.358519601370011, 5.340842073156717, 51.40107229603134, -26.70588614361083, -3.353377803144867, -4.027961124663673, -3.318022746718196, -26.75820922654236, 51.40107229603132, 26.81053230947393, -102.8021445920625, 26.65356306067919 },
            { 6.71009599760179, -1.806694893983396, 31.859861079981, 2.584275922780912, -11.38052947180404, 0.8240760568192378, 5.653052311366422, -25.38720062977985, 31.85986107998104, 53.35867718234064, -63.71972215996202, -30.55575247534171 },
            { 8.518410686346904, -2.557645922967545, 13.80951900219009, 24.74102883615948, -23.68039044807368, 19.24790291413906, -1.528277229444725, -21.86774352634903, 13.80951900219018, 68.47651588885753, -27.61903800438031, -71.34980119866795 },
            { 10.55764955016339, 6.162768391809813, 2.242363679013788, 31.2359577174009, -39.24477549658997, 52.9793707344996, -30.45501317988282, -16.06926294212457, 2.242363679013883, 63.37448360165003, -4.484727358027691, -78.54117837692634 },
            { 12.49995992279231, 21.98645447936145, -1.869358604047498, 22.89209291467902, -55.40032599014734, 95.28722669127924, -74.37331510328568, -9.108742568222418, -1.86935860404731, 41.10957805112383, 3.738717208094721, -54.89292839758041 },
            { 13.97541217707905, 38.06983787268499, -1.260506651301831, 8.700733201547983, -68.39203717543869, 132.9276756923252, -116.5808885666506, -3.0442637787295, -1.260506651301504, 14.78926075900693, 2.521013302603198, -20.44573018182536 },
            { 12.35795539685541, 12.57332688882691, 85.67985450849194, -55.48716407253148, -8.936719766755759, -6.627099768227964, -9.367462750698643, -54.90316374859785, 85.67985450849186, 54.31916342466434, -171.3597090169835, 56.07116439646486 },
            { 12.56894766125718, 5.340842073156714, 67.67533528599807, -29.88901629730012, -14.59110376922997, -3.183793372155016, -0.1348925930289226, -50.24290027639618, 67.67533528599795, 70.59678425549234, -135.3506705719959, 9.535132318203903 },
            { 12.91780096103745, -1.806694893983397, 42.63649906790125, 2.892301148793678, -24.10396462468817, 7.647831472280481, 5.345027085353644, -42.37154358113567, 42.63649906790117, 87.63538831106504, -85.2729981358024, -48.15614587872309 },
            { 13.35488114885473, -2.557645922967541, 19.33149822397754, 27.68996355782256, -36.30226609475243, 29.98224281997308, -4.477211951107819, -32.22619321064424, 19.33149822397756, 92.14234997911106, -38.66299644795516, -87.60612032628936 },
            { 13.81557354683003, 6.162768391809822, 4.119502767966497, 34.95903653062388, -49.48370230314621, 63.68345235761216, -34.17809199310578, -21.2043260277439, 4.119502767966551, 77.36768858611168, -8.239005535933076, -91.12239908899163 },
            { 14.22906356570974, 21.98645447936146, -1.671570431898957, 25.62064911558247, -61.58708947688565, 102.4734427360036, -77.10187130418915, -11.03563438328835, -1.67157043189882, 47.6919178821592, 3.3431408637977, -62.27693261445329 },
            { 14.52948970195087, 38.06983787268499, -1.369766085030193, 9.737791701090707, -70.53725072472504, 135.5558702162825, -117.6179470661933, -3.489081869872975, -1.369766085029856, 16.71595544083661, 2.739532170059885, -22.96466527205428 } } };
    alignas(32) static const double FE15_C0_D11_Q49[1][49][13] =
        { { { 39.37713997930447, 3.820591099556262, 2.62783376236108, 3.959333921532387, -56.4849608526528, 21.06715479488071, -3.959333921532397, -56.0542178687103, 20.49766898896208, -3.820591099556216, 75.78987250441978, -23.12550275132324, -23.69498855724177 },
            { 27.12324795436532, 3.956507627625233, 0.2707478874679077, -0.3227615590276725, -27.40901332148005, -0.03699619191293557, 0.3227615590276676, -41.86522449768142, 18.69848417094134, -3.956507627625243, 42.4217377522641, -18.96923205840929, -0.2337516955549547 },
            { 11.50941003110772, 4.182315446867161, -3.831907221010122, -2.634753898209846, 6.602553644535751, -20.74671757385332, 2.634753898209847, -22.84643806550622, 15.51934348126566, -4.182315446867179, 0.9025671688526923, -11.68743626025561, 24.57862479486345 },
            { -0.128601904489009, 4.467080460532515, -9.322553861276528, 2.600104701121369, 25.2331142783671, -22.5044076727568, -2.600104701121363, -6.591939865277587, 11.18762223029908, -4.467080460532518, -27.83512636987691, -1.8650683690227, 31.82696153403332 },
            { -3.207546604179667, 4.769373141711652, -15.51607989555963, 17.54544411085506, 17.06475638278617, 3.68823433224844, -17.54544411085505, 1.75914607274564, 6.217773673145626, -4.769373141711656, -31.13243574691164, 9.298306222413833, 11.82784556331117 },
            { 1.753222366271629, 5.042495433708808, -21.41656594638126, 38.88541901044761, -13.64289871194668, 50.77509535612256, -38.8854190104476, 1.871883115356646, 1.417389952080477, -5.042495433708819, -11.39877271606269, 19.99917599430058, -29.35852940974135 },
            { 9.787722920479162, 5.241969475220117, -25.89952681806896, 58.93610260217031, -49.36120518111352, 98.50958486280463, -58.93610260217029, -2.280508839645295, -2.265244605613837, -5.241969475220092, 15.95446428221093, 28.1647714236825, -72.61005804473571 },
            { 25.69171242022073, -0.7089779913833905, -0.03488776859201437, 3.959333921532394, -40.13681176261601, 18.40443326392761, -3.959333921532401, -24.15379365960315, -2.246896752001056, 0.7089779913834788, 38.56400523340649, 2.281784520592915, -18.36954549533558 },
            { 16.72968974078879, -0.3135680440668294, 0.02797012197375315, -0.3227615590276702, -16.77267734240938, -0.2797739574071105, 0.322761559027668, -16.80803239883625, -0.2352253860194224, 0.3135680440668703, 16.87899012243065, 0.2072552640455664, 0.2518038354333704 },
            { 5.609730293684781, 0.413089608680131, -1.085402869748687, -2.634753898209848, 9.755729030697278, -18.00021322259192, 2.63475389820985, -7.277852752473274, 2.081212067468599, -0.4130896086801201, -9.173009441657408, -0.9958091977200014, 19.08561609234061 },
            { -2.016137645333774, 1.44783173849601, -4.55639739914206, 2.600104701121368, 22.35449355707744, -17.73825121062237, -2.600104701121362, 0.2023803384484617, 3.261589045381289, -1.447831738496006, -25.09713364933409, 1.294808353760641, 22.29464860976442 },
            { -2.742391787623353, 2.682596097799507, -10.62185412958212, 17.54544411085507, 11.70537580025238, 8.582460098225937, -17.54544411085506, 2.915613483545154, 2.509374401877666, -2.682596097799516, -22.50045162575618, 8.112479727704304, 2.039394031356164 },
            { 2.752674924257648, 3.91201215585864, -18.08938938041052, 38.88541901044762, -17.96952783590343, 54.10227192209331, -38.88541901044761, 1.003461277234772, 0.1558759543661561, -3.912012155858637, -3.875997745999333, 17.93351342604414, -36.01288254168283 },
            { 10.27070389515006, 4.874752720819586, -24.67560754805496, 58.93610260217032, -51.06810542579843, 99.73350413281865, -58.93610260217031, -2.879254034586546, -2.51669713974403, -4.874752720819542, 19.0010480171802, 27.19230468779869, -75.05789658476372 },
            { 9.136389620758372, -2.457757363320451, -4.34095061574471, 3.9593339215324, -19.27542611600096, 14.09837041677485, -3.959333921532397, 10.70563131125865, -22.2997782953376, 2.45775736332057, -4.907545431760675, 26.64072891108209, -9.757419801030146 },
            { 4.495564592319006, -2.645005148639439, -0.3646418368648292, -0.3227615590276689, -4.145940235101017, -0.6723859162457297, 0.3227615590276707, 9.991655002675971, -17.13222474363451, 2.645005148639519, -10.70592119675869, 17.49686658049916, 1.037027753110562 },
            { -0.7852105900348743, -2.536553568753426, 3.356150709561124, -2.634753898209847, 11.70911633510713, -13.55865964328214, 2.63475389820985, 8.461672192399641, -10.21301517111825, 2.536553568753469, -16.02942722791068, 6.856864461556972, 10.20250893372103 },
            { -3.321520538281752, -1.687718960323073, 3.151268996587936, 2.600104701121371, 15.95221005429546, -10.0305848148924, -2.600104701121368, 5.948696823163526, -4.314895245204895, 1.687718960323095, -15.42811734258918, 1.163626248616798, 6.879315818304462 },
            { -1.264523431460393, 0.03356690005448293, -2.707078404270121, 17.54544411085508, 2.312731718777457, 16.49723582353793, -17.54544411085508, 2.608905968964272, -1.310815637449445, -0.03356690005447072, -6.364192660551321, 4.017894041719392, -13.79015741926782 },
            { 4.558538441015037, 2.273415760869092, -12.70879241219674, 38.88541901044765, -25.15598832087458, 59.48286889030712, -38.88541901044764, -0.9696693612904532, -1.315453318855557, -2.27341576086907, 8.858326828953423, 14.02424573105209, -46.77407647811039 },
            { 11.0702371042205, 4.299375030897984, -22.69632686276483, 58.93610260217033, -53.84691932015899, 101.7127848181088, -58.93610260217032, -3.902942762805846, -2.867919310516767, -4.299375030897941, 23.98329811597974, 25.56424617328129, -79.01645795534399 },
            { -1.676833186283522, 4.630163297363815, -9.546990039141008, 3.959333921532409, -3.256163885562769, 8.892330993378515, -3.9593339215324, 25.2441562646582, -18.937159781011, -4.630163297363669, -29.8581492319527, 28.48414982015166, 0.6546590457624849 },
            { -2.74735705642356, 2.084444759668696, -0.8393105559157106, -0.3227615590276622, 3.571650132692412, -1.14705463529663, 0.3227615590276662, 19.748048391853, -14.91624657576087, -2.084444759668573, -21.41165202403738, 15.75555713167627, 1.986365191212339 },
            { -3.325355141219122, -0.9113256391058433, 8.725998725203368, -2.634753898209843, 8.87941287064913, -8.188811627639925, 2.634753898209844, 11.91673336512058, -9.502703863007397, 0.911325639105928, -8.744792369347056, 0.776705137803769, -0.537187097563439 },
            { -2.01664049138632, -2.595515803430732, 12.46985456834518, 2.600104701121388, 5.328744435642806, -0.7119992431351798, -2.600104701121386, 4.246733572480336, -4.825608884524817, 2.595515803430783, 4.911017051608509, -7.644245683820587, -11.75785532521 },
            { 1.719694361047104, -1.971643498475476, 6.861902801045989, 17.54544411085511, -10.24046727904613, 26.06621702885404, -17.54544411085511, -1.354319217520755, -2.337018642001888, 1.971643498475516, 16.73699493656593, -4.524884159044317, -32.92811982990004 },
            { 7.054688085945242, 0.6052058204022188, -6.203638880485187, 38.88541901044768, -34.15729149751634, 65.9880224220187, -38.88541901044767, -4.293758710683974, -2.155723554859131, -0.605205820402162, 25.19272324177008, 8.35936243534405, -59.78438354153354 },
            { 12.06735898387592, 3.634226619133322, -20.30337217460914, 58.93610260217034, -57.2369958879701, 104.1057395062645, -58.93610260217034, -5.232038110351996, -3.201094254390706, -3.634226619133257, 30.0983028398373, 23.50446642899952, -83.80236733165539 },
            { -2.417201824802955, 21.79093812657054, -14.75302946253732, 3.959333921532424, 2.690244176352932, 3.686291569982224, -3.959333921532413, 9.564118712490369, 14.64402123888295, -21.79093812657033, -24.59019052657732, 0.109008223653849, 11.06673789255509 },
            { -1.727955545731855, 15.0762178274111, -1.313979274966588, -0.3227615590276534, 3.026917341051549, -1.621723354347505, 0.3227615590276578, 4.717472302727229, 12.08670107041555, -15.0762178274109, -7.330413373013218, -10.77272179544944, 2.935702629314089 },
            { -0.1829728226296995, 6.396429160315417, 14.09584674084562, -2.634753898209838, 0.3671825364174457, -2.818963611997694, 2.634753898209837, -1.675786071479481, 8.255188054424448, -6.396429160315253, 15.58742309853758, -22.35103479527046, -11.27688312884791 },
            { 2.44411069259839, -0.3474415094491035, 21.7884401401024, 2.600104701121403, -8.450592320099128, 8.606586328622033, -2.600104701121407, -6.922843089470675, 4.131290887423067, 0.3474415094492131, 34.71776485707402, -25.9197310275258, -30.39502646872443 },
            { 6.01468126671636, -2.666084783843662, 16.43088400636208, 17.54544411085514, -24.10443539003147, 35.63519823417014, -17.54544411085514, -9.249851743491059, 0.569085692930939, 2.666084783843751, 43.77048987316845, -16.99996969929332, -52.06608224053223 },
            { 9.893294999569338, -0.72054685137077, 0.3015146512263769, 38.88541901044772, -43.501051942852, 72.49317595373032, -38.88541901044771, -8.645219866159174, -1.968621984781038, 0.7205468513708615, 42.55449146066843, 1.667107333554355, -72.7946906049567 },
            { 13.09784959400838, 3.002446937845704, -17.91041748645345, 58.93610260217037, -60.66044118625827, 106.4986941944202, -58.93610260217036, -6.661239649329307, -3.434163006833485, -3.002446937845623, 36.31341375512599, 21.34458049328659, -88.58827670796681 },
            { 4.581817837320305, 43.59650121621917, -19.0590923096901, 3.959333921532437, -0.002712638617637708, -0.6197712771704769, -3.959333921532428, -26.23948370140472, 65.25416708030328, -43.59650121621878, 2.601286193012388, -46.19507477061394, 19.67886358686056 },
            { 5.358519601369988, 32.06538101841016, -1.706591233805188, -0.322761559027656, -3.666945847211719, -2.014335313186094, 0.32276155902766, -26.44464118247546, 53.15150259951534, -32.06538101840981, 23.04647619451233, -51.44491136571078, 3.720926546991282 },
            { 6.710095997601777, 16.73479568683302, 18.53740032015543, -2.634753898209843, -10.96743986312384, 1.622589967312085, 2.634753898209839, -25.80029023845998, 35.82498992769096, -16.73479568683272, 48.59503442413773, -54.36239024784693, -20.1599902874675 },
            { 8.518410686346888, 3.896690678428318, 29.49610653583239, 2.600104701121418, -22.2325587095776, 16.31425272435199, -2.600104701121425, -23.31557526484504, 18.69385525692627, -3.896690678428102, 66.52582982390838, -48.18996179275911, -45.81035926018435 },
            { 10.55764955016336, -2.250014054304632, 24.34565973167404, 17.54544411085517, -36.56217939879044, 43.54997395948212, -17.54544411085518, -18.75185903992406, 5.944195435455926, 2.250014054304781, 69.10204862022543, -30.28985516713037, -67.89563369115615 },
            { 12.49995992279228, -1.558341839894755, 5.682111619440136, 38.88541901044774, -51.4883138342887, 77.8737729219441, -38.88541901044775, -13.02075472408105, -1.037547038606111, 1.558341839894886, 57.69122025501785, -4.644564580834379, -83.55588454138423 },
            { 13.975412177079, 2.505098621924297, -15.93113680116334, 58.93610260217037, -63.517284454619, 108.4779748797103, -58.93610260217037, -7.919016499549135, -3.551297055605694, -2.505098621924199, 41.52975197592606, 19.48243385676867, -92.54683807854705 },
            { 12.35795539685538, 60.52849724389838, -21.72181384064327, 3.95933392153244, -5.116128667199578, -3.282492808123596, -3.95933392153243, -58.72375484815402, 106.8942966951965, -60.52849724389778, 29.76011427785539, -85.17248285455422, 25.00430664876686 },
            { 12.56894766125714, 45.39929162018181, -1.949368999299367, -0.3227615590276676, -10.63459614160469, -2.257113078680281, 0.3227615590276693, -54.19940790402137, 87.02975186294563, -45.39929162018129, 50.31568738506984, -85.08038286364699, 4.206482077979653 },
            { 12.91780096103743, 25.0729545495046, 21.28390467141686, -2.634753898209853, -19.92164917782088, 4.369094318573461, 2.634753898209847, -46.55385902800278, 58.70901261646964, -25.07295454950419, 74.84161191620333, -79.99291728788708, -25.6529989899903 },
            { 13.35488114885471, 7.601448159744413, 34.26226299796681, 2.600104701121423, -31.83518563421982, 21.08040918648638, -2.600104701121434, -36.69327367117673, 30.93984068206619, -7.601448159744134, 89.43584115450891, -65.20210368003352, -55.34267218445316 },
            { 13.81557354682999, -1.544021918106434, 29.23988549765151, 17.54544411085519, -44.71432916143453, 48.44419972545958, -17.5454441108552, -25.9736991694555, 10.6141037045189, 1.544021918106625, 86.11234028171182, -39.85398920217088, -77.68408522311108 },
            { 14.22906356570971, -1.959174032813511, 9.009288185410838, 38.88541901044777, -56.54459404317686, 81.20094948791484, -38.88541901044777, -16.07812981699714, -0.110107781526225, 1.959174032813668, 67.40294847987542, -8.899180403885028, -90.21023767332569 },
            { 14.52948970195082, 2.208978417724673, -14.70721753114933, 58.93610260217038, -65.29528124950481, 109.7018941497244, -58.93610260217037, -8.731051345093142, -3.589459939133129, -2.208978417724568, 44.78962536149808, 18.29667747028209, -94.99467661857506 } } };
    alignas(32) static const double FE15_C0_D20_Q49[1][49][12] =
        { { { 39.37713997930441, 12.35795539685556, -1.295537567643668, -0.6546590457621292, 4.043536391245474, -0.6546590457621019, -116.5827151126086, 127.3919656841595, -62.54434594771087, -9.382610350134545, 6.634611526532744, 1.309318091524229 },
            { 27.12324795436527, 12.56894766125732, -6.678088513979736, -1.986365191212082, 17.99027829870172, -1.986365191212077, -87.26451611786308, 105.7282360338877, -58.15591553164717, -42.6586451113832, 31.34645532666123, 3.972730382424149 },
            { 11.50941003110766, 12.91780096103755, -15.73933373095394, 0.5371870975636348, 31.67550819404035, 0.537187097563613, -47.91939261501062, 74.22835609773578, -50.73617447487037, -79.09035011903477, 63.15417565594839, -1.074374195127268 },
            { -0.1286019044890751, 13.35488114885479, -27.36810517368752, 11.7578553252102, 32.83456243811156, 11.75785532521016, -14.19338802502181, 42.12746291236562, -41.16035413170952, -93.03723004991085, 87.57077278548682, -23.51571065042037 },
            { -3.207546604179761, 13.81557354683005, -39.94495601972305, 32.92811982990023, 15.5207344646798, 32.9281198299002, 3.303167990852286, 16.83187737766474, -30.74307231116732, -70.9864249490828, 95.41064650412608, -65.85623965980045 },
            { 1.753222366271513, 14.22906356570972, -51.50209860946811, 59.7843835415337, -15.60207274476016, 59.78438354153369, 3.831057148170415, 1.30728217055435, -21.120625250706, -20.29795311994785, 87.40212447417615, -119.5687670830674 },
            { 9.787722920479045, 14.52948970195075, -60.05331177428469, 83.80236733165546, -47.15222676338888, 83.80236733165546, -4.489487257369687, -5.854704544746987, -13.97302082031312, 34.25114175249314, 72.95439678518045, -167.6047346633109 },
            { 25.69171242022071, 4.581817837320437, -0.7116906300012619, -0.6546590457621532, 3.459689453603115, -0.6546590457621334, -67.75029487582232, 63.00727032830297, -25.53050571002179, -7.631069537207492, 4.883070713605639, 1.309318091524285 },
            { 16.72968974078876, 5.358519601370105, -3.980513891278743, -1.986365191212091, 15.29270367600077, -1.986365191212085, -48.87341341724634, 52.91627721349653, -26.13107313840905, -34.56592124328031, 23.2537314585583, 3.972730382424168 },
            { 5.609730293684748, 6.710095997601859, -10.55435025444385, 0.5371870975636368, 26.49052471753029, 0.5371870975636222, -24.01264843930617, 37.90620199515996, -26.21337984714039, -63.53539968950451, 47.59922522641809, -1.074374195127276 },
            { -2.016137645333819, 8.518410686346938, -20.78472697108172, 11.7578553252102, 26.25118423550578, 11.75785532521016, -3.694310339979712, 21.95544430230781, -24.76340700334121, -73.28709544209339, 67.82063817766937, -23.51571065042037 },
            { -2.742391787623426, 10.55764955016339, -33.87958330099104, 32.92811982990024, 9.455361745947785, 32.9281198299002, 5.165627537849959, 8.453569837333756, -21.43445513772368, -52.79030679288673, 77.21452834793, -65.85623965980044 },
            { 2.752674924257543, 12.49995992279227, -47.5763016784301, 59.78438354153369, -19.52786967579815, 59.78438354153366, 2.561803117129764, -0.8816710842398763, -16.93276687993971, -8.520562326833822, 75.6247336810621, -119.5687670830673 },
            { 10.27070389514995, 13.97541217707894, -58.64253173379944, 83.80236733165547, -48.56300680387417, 83.80236733165549, -5.384352656510575, -6.067994195349749, -12.79376922036857, 38.48348187394899, 68.72205666372464, -167.6047346633109 },
            { 9.136389620758351, -2.417201824802916, 0.2324868130323588, -0.6546590457621809, 2.51551201056957, -0.6546590457621767, -11.0853068153119, -7.655757056454171, 12.02187607581064, -4.798537208106816, 2.050538384504892, 1.309318091524358 },
            { 4.495564592318988, -1.727955545731795, 0.3819121924119777, -1.986365191212094, 10.93027759231009, -1.986365191212092, -5.084562824735137, -5.045523673218487, 7.362477451366432, -21.47864299220823, 10.16645320748617, 3.97273038242418 },
            { -0.7852105900348936, -0.1829728226296554, -2.169371032336087, 0.5371870975636484, 18.10554549542253, 0.5371870975636377, 2.065243032084269, -1.957827116693512, 0.8607674972737932, -38.38046202318118, 22.44428756009475, -1.074374195127297 },
            { -3.32152053828178, 2.444110692598414, -10.1383112804223, 11.75785532521021, 15.60476854484635, 11.75785532521018, 6.296138332612696, -0.183604357781639, -5.235124129147692, -41.34784837011505, 35.88139110569102, -23.51571065042041 },
            { -1.264523431460443, 6.014681266716374, -24.07086848997709, 32.92811982990025, -0.3533530650661951, 32.9281198299002, 5.274990752808051, -0.7417299445183962, -9.283418643545588, -23.36416235984472, 47.78838391488802, -65.85623965980045 },
            { 4.558538441014962, 9.893294999569324, -41.22763618198298, 59.78438354153372, -25.87653517224534, 59.78438354153368, -0.2491225099195013, -3.284075303636536, -10.91863562702824, 10.52543416250773, 56.57873719172061, -119.5687670830674 },
            { 11.07023710422041, 13.09784959400831, -56.3610661553603, 83.80236733165549, -50.84447238231333, 83.80236733165549, -6.905389700651309, -6.302082317350278, -10.96061468022713, 45.32787860926646, 61.87765992840717, -167.6047346633109 },
            { -1.676833186283546, -1.676833186283582, 1.373999411801005, -0.6546590457621954, 1.373999411800974, -0.6546590457622071, 20.61399296729446, -37.87431956202187, 20.61399296729454, -1.373999411800971, -1.373999411801007, 1.309318091524403 },
            { -2.747357056423577, -2.747357056423589, 5.656094892361026, -1.986365191212091, 5.656094892361057, -1.986365191212096, 17.66360363218434, -29.83249315152156, 17.66360363218437, -5.6560948923611, -5.656094892360986, 3.972730382424184 },
            { -3.325355141219136, -3.325355141219128, 7.968087231543191, 0.5371870975636659, 7.968087231543247, 0.5371870975636539, 12.82805900422646, -19.00540772601464, 12.82805900422644, -7.968087231543297, -7.968087231543143, -1.074374195127325 },
            { -2.016640491386338, -2.016640491386322, 2.733228632211982, 11.75785532521023, 2.733228632212048, 11.7578553252102, 6.842249375911116, -9.651217769049534, 6.842249375911079, -2.733228632212096, -2.733228632211934, -23.51571065042043 },
            { 1.719694361047073, 1.7196943610471, -12.21211077752171, 32.92811982990028, -12.21211077752161, 32.92811982990023, 0.6173242809547962, -4.674037284003703, 0.6173242809547356, 12.21211077752155, 12.21211077752177, -65.85623965980049 },
            { 7.05468808594519, 7.054688085945214, -33.55208567711423, 59.78438354153374, -33.55208567711414, 59.7843835415337, -4.898964531086056, -4.311447109718226, -4.898964531086122, 33.55208567711413, 33.55208567711424, -119.5687670830674 },
            { 12.06735898387583, 12.06735898387584, -53.60276926883682, 83.8023673316555, -53.60276926883683, 83.80236733165549, -8.866264729485099, -6.402188508781441, -8.866264729485135, 53.60276926883697, 53.60276926883671, -167.604734663311 },
            { -2.417201824802974, 9.136389620758223, 2.515512010569609, -0.6546590457622026, 0.2324868130323496, -0.6546590457622168, 12.02187607581096, -7.655757056454766, -11.08530681531144, 2.050538384504936, -4.798537208106901, 1.309318091524421 },
            { -1.727955545731867, 4.495564592318885, 10.93027759231007, -1.986365191212089, 0.3819121924120167, -1.986365191212095, 7.362477451366742, -5.045523673219005, -5.084562824734753, 10.16645320748604, -21.47864299220813, 3.972730382424185 },
            { -0.1829728226297171, -0.7852105900349374, 18.10554549542248, 0.537187097563682, -2.169371032336038, 0.5371870975636653, 0.8607674972739963, -1.957827116693787, 2.065243032084448, 22.44428756009456, -38.38046202318102, -1.074374195127346 },
            { 2.444110692598365, -3.32152053828178, 15.60476854484626, 11.75785532521027, -10.13831128042224, 11.75785532521022, -5.235124129147541, -0.1836043577817946, 6.296138332612754, 35.88139110569075, -41.34784837011479, -23.51571065042048 },
            { 6.01468126671634, -1.26452343146041, -0.3533530650663507, 32.92811982990032, -24.07086848997701, 32.92811982990025, -9.283418643545481, -0.7417299445184584, 5.274990752808012, 47.78838391488775, -23.36416235984439, -65.85623965980055 },
            { 9.893294999569306, 4.558538441014998, -25.87653517224549, 59.78438354153378, -41.22763618198294, 59.78438354153373, -10.91863562702817, -3.284075303636561, -0.2491225099195706, 56.5787371917205, 10.52543416250793, -119.5687670830675 },
            { 13.09784959400831, 11.07023710422042, -50.84447238231336, 83.8023673316555, -56.36106615536033, 83.80236733165549, -10.9606146802271, -6.302082317350285, -6.905389700651348, 61.87765992840744, 45.32787860926624, -167.604734663311 },
            { 4.581817837320312, 25.69171242022055, 3.459689453603134, -0.6546590457622017, -0.711690630001278, -0.6546590457621995, -25.5305057100212, 63.007270328302, -67.75029487582165, 4.883070713605759, -7.63106953720763, 1.309318091524403 },
            { 5.358519601369987, 16.72968974078862, 15.29270367600078, -1.986365191212091, -3.980513891278727, -1.986365191212089, -26.13107313840855, 52.91627721349575, -48.8734134172458, 23.25373145855824, -34.56592124328031, 3.972730382424183 },
            { 6.710095997601752, 5.609730293684666, 26.49052471753028, 0.5371870975636911, -10.55435025444379, 0.5371870975636709, -26.21337984714003, 37.90620199515944, -24.01264843930582, 47.59922522641781, -63.53539968950432, -1.074374195127356 },
            { 8.518410686346856, -2.016137645333831, 26.25118423550567, 11.7578553252103, -20.78472697108162, 11.75785532521024, -24.76340700334097, 21.95544430230752, -3.694310339979569, 67.8206381776689, -73.28709544209296, -23.51571065042052 },
            { 10.55764955016335, -2.742391787623379, 9.455361745947577, 32.92811982990035, -33.87958330099096, 32.92811982990028, -21.43445513772351, 8.453569837333616, 5.165627537849937, 77.21452834792956, -52.7903067928862, -65.85623965980061 },
            { 12.49995992279226, 2.752674924257606, -19.52786967579838, 59.7843835415338, -47.5763016784301, 59.78438354153374, -16.93276687993961, -0.8816710842399278, 2.561803117129679, 75.62473368106194, -8.520562326833479, -119.5687670830675 },
            { 13.97541217707895, 10.27070389514997, -48.56300680387421, 83.80236733165552, -58.64253173379949, 83.8023673316555, -12.79376922036853, -6.067994195349764, -5.384352656510615, 68.72205666372491, 38.48348187394879, -167.604734663311 },
            { 12.35795539685539, 39.37713997930425, 4.043536391245469, -0.6546590457621964, -1.295537567643706, -0.6546590457621724, -62.54434594771009, 127.3919656841583, -116.5827151126078, 6.634611526532995, -9.382610350134755, 1.309318091524371 },
            { 12.56894766125715, 27.12324795436509, 17.99027829870178, -1.986365191212097, -6.678088513979727, -1.986365191212083, -58.15591553164649, 105.7282360338866, -87.26451611786233, 31.34645532666122, -42.65864511138329, 3.972730382424184 },
            { 12.9178009610374, 11.50941003110755, 31.67550819404039, 0.5371870975636887, -15.73933373095385, 0.5371870975636684, -50.73617447486985, 74.22835609773503, -47.91939261501011, 63.15417565594799, -79.09035011903457, -1.074374195127347 },
            { 13.35488114885466, -0.1286019044890938, 32.83456243811144, 11.75785532521031, -27.36810517368735, 11.75785532521025, -41.16035413170911, 42.12746291236513, -14.19338802502157, 87.57077278548607, -93.03723004991019, -23.51571065042054 },
            { 13.81557354682997, -3.207546604179697, 15.52073446467954, 32.92811982990037, -39.94495601972291, 32.92811982990028, -30.74307231116708, 16.83187737766453, 3.303167990852284, 95.41064650412541, -70.98642494908206, -65.85623965980064 },
            { 14.22906356570969, 1.753222366271582, -15.6020727447604, 59.78438354153382, -51.50209860946809, 59.78438354153374, -21.12062525070588, 1.307282170554284, 3.831057148170324, 87.40212447417589, -20.29795311994743, -119.5687670830675 },
            { 14.52948970195077, 9.787722920479071, -47.15222676338895, 83.80236733165552, -60.05331177428476, 83.80236733165549, -13.9730208203131, -5.854704544747007, -4.489487257369734, 72.95439678518073, 34.25114175249296, -167.604734663311 } } };
    alignas(32) static const double FE15_C0_Q49[1][49][15] =
        { { { 0.6549316825109197, -0.02057892746720457, -0.01895271160153016, 0.002551841658879297, 0.001832976787744564, 0.002591983529829492, 0.2906037160066813, -0.2191058273186447, 0.09926996197677521, 0.3215606555926869, -0.2398946222587349, 0.1081436648053315, 0.04790814649451075, -0.01534963397737373, -0.01551290673987028 },
            { 0.2307758580600358, -0.01898637959693696, -0.04052225855940367, 0.01197208845187751, 0.00508953632453224, 0.005747532965340835, 0.9385387238080415, -0.5251091027957608, 0.2201238442927796, 0.184369512907595, -0.1734001777401285, 0.09007254769515158, 0.1748378774036484, -0.06490076481930494, -0.03860883839746754 },
            { -0.02639833118890843, -0.01622611981363341, 0.005076729256186251, 0.02358887323618308, -0.001160764933256703, -0.0007835212003770037, 0.8141439239323958, 0.08946787962719394, -0.03000795293421947, 0.05722733336678571, -0.0921298244490816, 0.06350313091024641, 0.2117193518016242, -0.1052018333816022, 0.007181125770462931 },
            { -0.01160437828506701, -0.01254413218766237, 0.01372912939536715, 0.03086940068987217, -0.0193233108232089, -0.002573069445909001, 0.0969694764122358, 0.8878787474105008, -0.098545574506701, 0.00298135511727224, -0.03177012631370718, 0.03634900058353534, 0.1218837930236889, -0.1015919877941927, 0.08729167672397534 },
            { 0.0218099529415095, -0.008393965116375709, -0.04150135841705487, 0.02933250657708799, -0.03560703633453784, 0.01451454252736863, -0.138986464423005, 0.5298729718094176, 0.555890139046101, -0.001926413065910311, -0.004454651085362444, 0.01557082782528066, 0.02392951709154811, -0.06158622905187594, 0.1015356596758079 },
            { -0.02594926113731469, -0.004433693451396152, 0.11113014233463, 0.01950359659613873, -0.03364569317406756, 0.02922555806517901, 0.148148737523861, -0.39036643678642, 1.119304966444395, 0.0008288667429063191, 0.0009407330566760762, 0.004179141569088652, -0.006284694240343926, -0.02074563731317351, 0.04816367376984117 },
            { -0.03532487490920465, -0.001416675726436049, 0.6003640376266264, 0.0071441435627288, -0.01491117504032319, 0.01774601603361653, 0.1918232961850135, -0.448397033656697, 0.679651825184295, 0.0002909979496652573, 0.0002437260725267412, 0.0004150728918027799, -0.001850705679003584, -0.002357068006594076, 0.006578417511983181 },
            { 0.1939794048989703, -0.03883685244711804, -0.01895271160153014, 0.005599292126758956, 0.005113945393745073, 0.01316406814381545, 0.172368070814931, -0.1675039531859026, 0.08869787736278925, 0.9686713324696039, -0.51167095682965, 0.2120195250911923, 0.1860108965317169, -0.03826418929070941, -0.07039574947861307 },
            { 0.02426069882181731, -0.04055257243200261, -0.04052225855940366, 0.02926766845758135, 0.01540717712251104, 0.02919035354346896, 0.5322985467455732, -0.3988332062492714, 0.1966810237146515, 0.5310679307894437, -0.3986907486375621, 0.1967460527840206, 0.6744273478528412, -0.1755456382117336, -0.1752023757419357 },
            { -0.04093937858298689, -0.04166543873256165, 0.005076729256186303, 0.0676171557385669, -0.003953186668865079, -0.003979317906608272, 0.3932691670460557, 0.06685432149350201, -0.02681215622798831, 0.1403945037048137, -0.2344583082216529, 0.1626448106577965, 0.8034905634722828, -0.3201265706683045, 0.03258710563976349 },
            { 0.007416074687821819, -0.03943427349321519, 0.01372912939536717, 0.1051550648364538, -0.07453135514446853, -0.01306800800811422, -0.04910621225846389, 0.6342590880409946, -0.08805063594449582, -0.007667838891055304, -0.08753655634116402, 0.1106343129519837, 0.4421981112586866, -0.3501162815050725, 0.3961193804147412 },
            { 0.01597030012776499, -0.03181006002626023, -0.04150135841705489, 0.1169347304431088, -0.1533803854029017, 0.07371591088742466, -0.09336366249388596, 0.2884250778311988, 0.4966887706860451, -0.006572228766854252, -0.01044501195565715, 0.05546275212014838, 0.06615353707846042, -0.2370352748339281, 0.4607569027223907 },
            { -0.03169314364606376, -0.01951346991408837, 0.11113014233463, 0.08804844416859242, -0.1578531008667652, 0.148429661486447, 0.1752340294671025, -0.4365564521915171, 1.000100863023127, 0.004979240361706739, 0.004935804884160738, 0.01685735509424485, -0.03569521305564379, -0.08696525801356875, 0.2185610968676358 },
            { -0.03321023154668372, -0.006889478557310112, 0.6003640376266266, 0.03501605224198506, -0.07395124697666222, 0.09012779659256698, 0.1788379967879065, -0.4126306305326665, 0.6072700446253441, 0.001377863705146649, 0.001112331807014678, 0.001817760870186549, -0.008649559179748995, -0.01044482378799794, 0.02985208632429193 },
            { -0.0376956175325737, 0.01205512159525682, -0.01895271160153013, -0.002358497195457519, -0.00384020719810918, 0.03026088440644022, 0.0539053418262965, -0.09831517809616701, 0.07160106110016443, 0.696374605395548, 0.2255198877281222, -0.07209154400335495, 0.2509720684218661, 0.02319515712999241, -0.1306303719764944 },
            { -0.03859786183773638, 0.004212032609957116, -0.04052225855940363, -0.003967480132103379, -0.003398121863997239, 0.06710128698148853, 0.1386620209245869, -0.2301147514016469, 0.1587700902766319, 0.3180122259059468, 0.05073471002265553, -0.02152974537510604, 0.8944989133202539, 0.03125447073152469, -0.3251155316030517 },
            { -0.005514013900425591, -0.01112137947048976, 0.005076729256186314, 0.0222300842098283, -0.001867846363479305, -0.009147451826654185, 0.0250624086737196, 0.03688559304255665, -0.02164402230794241, 0.02056716867831652, -0.06112047783851712, 0.0431648913565247, 1.019059543059006, -0.1221017203539534, 0.06047049378532331 },
            { 0.02328377841217178, -0.03005860745173215, 0.01372912939536718, 0.09268439279845306, -0.08357027090514461, -0.03004006629529309, -0.1154260111679768, 0.3043556454903148, -0.07107857765731684, -0.04143160191946679, -0.04709956683151861, 0.07871771670491676, 0.4877789350919699, -0.316906634390842, 0.7350617387260974 },
            { -0.0007136872574030036, -0.04138991864469518, -0.04150135841705492, 0.1661067458893893, -0.250504204511209, 0.1694543536169543, 0.003680493372984147, -0.008701015936383172, 0.4009503279565155, 0.0005955693328975739, 0.00051462523919846, 0.06359916282914385, -0.004587557390232935, -0.3125103516783854, 0.85500681559828 },
            { -0.03877330428659566, -0.03488858698001952, 0.11113014233463, 0.1642619380526221, -0.3144433163411272, 0.341202489964212, 0.2039758379271579, -0.4669795899387807, 0.8073280345453616, 0.01332339379908269, 0.01051731113541298, 0.02538697311207966, -0.08777259964057219, -0.1398431737727253, 0.4055744500892612 },
            { -0.02904203606868645, -0.01473950921553984, 0.6003640376266266, 0.07587889620500504, -0.1633817278653187, 0.207181154389279, 0.1543133970855238, -0.3487432991073763, 0.490216686828632, 0.002733012327594722, 0.002077001199236511, 0.003179778035749085, -0.0168046657021669, -0.01862796152621737, 0.0553952357876582 },
            { 0.003654941273555187, 0.003654941273555109, -0.01895271160153015, -0.001258014603930192, -0.03819822956497677, 0.05093097275330244, -0.001258014603930102, -0.03819822956497664, 0.05093097275330245, -0.02735250828254653, 0.8715575872009813, -0.02735250828254666, 0.1641150496952791, 0.164115049695279, -0.1563892981408175 },
            { 0.01603114756439203, 0.01603114756439198, -0.04052225855940367, -0.02392711206686879, -0.08470176647179516, 0.1129356886290602, -0.0239271120668686, -0.08470176647179493, 0.1129356886290603, -0.09235851241483324, 0.4654860910265998, -0.09235851241483348, 0.554151074489, 0.5541510744889998, -0.3892248719251059 },
            { 0.02333365872999053, 0.02333365872999045, 0.005076729256186279, -0.06478904612452446, 0.01154680280047366, -0.01539573706729834, -0.06478904612452423, 0.0115468028004738, -0.01539573706729814, -0.08948570065313749, 0.1182802726717029, -0.0894857006531376, 0.5369142039188246, 0.5369142039188249, 0.07239463486345324 },
            { 0.007421759896545826, 0.007421759896545726, 0.01372912939536714, -0.0282179133868397, 0.03791949148222868, -0.05055932197630511, -0.02821791338683944, 0.03791949148222855, -0.05055932197630475, -0.01704720909210692, 0.002662617305493321, -0.01704720909210695, 0.1022832545526414, 0.1022832545526417, 0.8800081303468104 },
            { -0.02573402669754755, -0.02573402669754764, -0.04150135841705496, 0.1161577946579159, -0.2139017555900513, 0.2852023407867347, 0.116157794657916, -0.2139017555900512, 0.2852023407867351, 0.03163552159350633, 0.01080276170722408, 0.03163552159350643, -0.1898131295610383, -0.1898131295610384, 1.02360510633079 },
            { -0.04156864542850337, -0.0415686454285034, 0.1111301423346299, 0.2065605981851399, -0.4306989466910901, 0.5742652622547867, 0.2065605981851399, -0.4306989466910899, 0.574265262254787, 0.02270826615031631, 0.01328654533633411, 0.02270826615031646, -0.1362495969018985, -0.1362495969018989, 0.4855494371915333 },
            { -0.0226774234992432, -0.02267742349924325, 0.6003640376266266, 0.1185896160994743, -0.2615241904567167, 0.3486989206089555, 0.1185896160994745, -0.2615241904567166, 0.3486989206089557, 0.003534963844733584, 0.002493165587373225, 0.003534963844733688, -0.02120978306840193, -0.0212097830684021, 0.06631858972839649 },
            { 0.01205512159525693, -0.03769561753257375, -0.01895271160153016, 0.05390534182629637, -0.09831517809616719, 0.07160106110016447, -0.002358497195457457, -0.003840207198109014, 0.03026088440644027, -0.07209154400335478, 0.2255198877281224, 0.6963746053955479, 0.02319515712999262, 0.2509720684218657, -0.1306303719764943 },
            { 0.004212032609957272, -0.03859786183773628, -0.04052225855940372, 0.1386620209245864, -0.2301147514016471, 0.1587700902766319, -0.003967480132103289, -0.003398121863997142, 0.06710128698148879, -0.02152974537510624, 0.05073471002265616, 0.318012225905946, 0.03125447073152549, 0.8944989133202539, -0.3251155316030518 },
            { -0.01112137947048965, -0.005514013900425579, 0.005076729256186231, 0.02506240867371951, 0.03688559304255649, -0.02164402230794248, 0.02223008420982856, -0.001867846363479239, -0.009147451826653868, 0.04316489135652486, -0.06112047783851723, 0.02056716867831642, -0.1221017203539534, 1.019059543059006, 0.06047049378532348 },
            { -0.03005860745173202, 0.0232837784121717, 0.01372912939536711, -0.1154260111679771, 0.304355645490315, -0.07107857765731711, 0.09268439279845328, -0.08357027090514461, -0.03004006629529266, 0.07871771670491678, -0.04709956683151863, -0.04143160191946681, -0.3169066343908419, 0.48777893509197, 0.7350617387260975 },
            { -0.04138991864469511, -0.0007136872574031007, -0.04150135841705499, 0.00368049337298414, -0.008701015936383193, 0.4009503279565152, 0.1661067458893895, -0.2505042045112089, 0.1694543536169547, 0.06359916282914377, 0.0005146252391984235, 0.0005955693328976788, -0.3125103516783851, -0.004587557390233102, 0.85500681559828 },
            { -0.0348885869800195, -0.03877330428659571, 0.1111301423346299, 0.2039758379271579, -0.466979589938781, 0.8073280345453614, 0.1642619380526222, -0.3144433163411271, 0.3412024899642125, 0.02538697311207952, 0.01051731113541291, 0.01332339379908286, -0.139843173772725, -0.08777259964057238, 0.4055744500892611 },
            { -0.0147395092155398, -0.02904203606868649, 0.6003640376266266, 0.1543133970855238, -0.3487432991073764, 0.490216686828632, 0.07587889620500521, -0.1633817278653186, 0.2071811543892794, 0.003179778035748981, 0.002077001199236483, 0.002733012327594833, -0.01862796152621723, -0.0168046657021671, 0.0553952357876582 },
            { -0.03883685244711802, 0.1939794048989704, -0.01895271160153017, 0.1723680708149307, -0.1675039531859025, 0.08869787736278924, 0.005599292126759109, 0.00511394539374517, 0.01316406814381556, 0.2120195250911926, -0.5116709568296501, 0.9686713324696037, -0.03826418929070907, 0.1860108965317166, -0.07039574947861307 },
            { -0.04055257243200255, 0.02426069882181747, -0.04052225855940372, 0.532298546745573, -0.3988332062492717, 0.1966810237146516, 0.02926766845758145, 0.01540717712251118, 0.0291903535434692, 0.1967460527840208, -0.3986907486375622, 0.5310679307894435, -0.1755456382117331, 0.6744273478528411, -0.1752023757419356 },
            { -0.04166543873256156, -0.04093937858298679, 0.00507672925618622, 0.393269167046056, 0.06685432149350201, -0.02681215622798833, 0.06761715573856707, -0.00395318666886494, -0.003979317906607889, 0.1626448106577966, -0.234458308221653, 0.1403945037048136, -0.3201265706683042, 0.8034905634722822, 0.03258710563976368 },
            { -0.03943427349321513, 0.007416074687821709, 0.0137291293953671, -0.04910621225846407, 0.6342590880409951, -0.08805063594449603, 0.105155064836454, -0.07453135514446836, -0.01306800800811374, 0.1106343129519837, -0.08753655634116407, -0.007667838891055271, -0.3501162815050722, 0.4421981112586865, 0.3961193804147412 },
            { -0.0318100600262602, 0.01597030012776485, -0.04150135841705501, -0.09336366249388606, 0.2884250778311989, 0.4966887706860448, 0.1169347304431091, -0.1533803854029016, 0.07371591088742518, 0.0554627521201484, -0.01044501195565725, -0.006572228766854159, -0.237035274833928, 0.06615353707846024, 0.4607569027223907 },
            { -0.01951346991408833, -0.03169314364606381, 0.1111301423346299, 0.1752340294671026, -0.4365564521915175, 1.000100863023127, 0.08804844416859262, -0.1578531008667651, 0.1484296614864476, 0.01685735509424473, 0.004935804884160599, 0.004979240361706869, -0.08696525801356839, -0.03569521305564399, 0.2185610968676357 },
            { -0.00688947855731005, -0.03321023154668374, 0.6003640376266266, 0.1788379967879064, -0.4126306305326666, 0.607270044625344, 0.03501605224198523, -0.07395124697666222, 0.09012779659256737, 0.001817760870186438, 0.001112331807014595, 0.001377863705146767, -0.01044482378799769, -0.008649559179749133, 0.0298520863242917 },
            { -0.0205789274672047, 0.6549316825109192, -0.01895271160153016, 0.290603716006681, -0.2191058273186448, 0.09926996197677516, 0.002551841658879464, 0.001832976787744633, 0.002591983529829603, 0.1081436648053319, -0.2398946222587354, 0.3215606555926876, -0.01534963397737366, 0.04790814649451074, -0.01551290673987037 },
            { -0.01898637959693705, 0.2307758580600355, -0.04052225855940372, 0.9385387238080406, -0.525109102795761, 0.2201238442927798, 0.01197208845187744, 0.005089536324532476, 0.005747532965341084, 0.09007254769515212, -0.1734001777401294, 0.1843695129075959, -0.06490076481930504, 0.1748378774036494, -0.0386088383974677 },
            { -0.0162261198136334, -0.02639833118890832, 0.005076729256186237, 0.8141439239323954, 0.08946787962719401, -0.0300079529342195, 0.02358887323618309, -0.001160764933256432, -0.0007835212003766481, 0.06350313091024659, -0.09212982444908174, 0.05722733336678584, -0.1052018333816019, 0.2117193518016243, 0.007181125770463209 },
            { -0.01254413218766249, -0.01160437828506707, 0.01372912939536712, 0.09696947641223505, 0.8878787474105007, -0.09854557450670123, 0.03086940068987264, -0.01932331082320872, -0.00257306944590853, 0.03634900058353584, -0.03177012631370754, 0.002981355117272334, -0.1015919877941933, 0.1218837930236897, 0.0872916767239762 },
            { -0.008393965116375747, 0.02180995294150932, -0.04150135841705502, -0.138986464423005, 0.5298729718094173, 0.5558901390461006, 0.02933250657708845, -0.03560703633453784, 0.01451454252736931, 0.01557082782528087, -0.004454651085362581, -0.001926413065910227, -0.06158622905187611, 0.02392951709154807, 0.1015356596758086 },
            { -0.004433693451396149, -0.02594926113731474, 0.1111301423346298, 0.1481487375238611, -0.3903664367864204, 1.119304966444394, 0.019503596596139, -0.03364569317406756, 0.02922555806517958, 0.004179141569088619, 0.0009407330566758819, 0.0008288667429064596, -0.02074563731317317, -0.006284694240344182, 0.04816367376984089 },
            { -0.001416675726435973, -0.03532487490920467, 0.6003640376266266, 0.1918232961850134, -0.4483970336566971, 0.6796518251842947, 0.007144143562728883, -0.01491117504032302, 0.01774601603361659, 0.0004150728918026828, 0.0002437260725266233, 0.0002909979496653614, -0.002357068006593743, -0.001850705679003695, 0.006578417511982959 } } };
    alignas(32) static const double FE3_C0_D01_Q49[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q49[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q49[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q49[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q49[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q49[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q49[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q49[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q49[0][0][1];
    alignas(32) double sp[9];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c3 / sp[2];
    sp[4] = -1 * J_c2 / sp[2];
    sp[5] = J_c0 / sp[2];
    sp[6] = -1 * J_c1 / sp[2];
    sp[7] = std::pow(2 * w[3][0], 2 + w[2][0]);
    sp[8] = std::abs(sp[2]);
    alignas(32) double BF0[15] = {};
    for (int iq = 0; iq < 49; ++iq)
    {
        // Quadrature loop body setup (num_points=49)
        // Unstructured varying computations for num_points=49
        double w1 = 0.0;
        for (int ic = 0; ic < 15; ++ic)
            w1 += w[1][ic] * FE15_C0_Q49[0][iq][ic];
        double w0 = 0.0;
        for (int ic = 0; ic < 15; ++ic)
            w0 += w[0][ic] * FE15_C0_Q49[0][iq][ic];
        const double w0_d00 = w[0][0] * FE15_C0_D20_Q49[0][iq][0] + w[0][1] * FE15_C0_D20_Q49[0][iq][1] + w[0][3] * FE15_C0_D20_Q49[0][iq][2] + w[0][4] * FE15_C0_D20_Q49[0][iq][3] + w[0][6] * FE15_C0_D20_Q49[0][iq][4] + w[0][7] * FE15_C0_D20_Q49[0][iq][5] + w[0][9] * FE15_C0_D20_Q49[0][iq][6] + w[0][10] * FE15_C0_D20_Q49[0][iq][7] + w[0][11] * FE15_C0_D20_Q49[0][iq][8] + w[0][12] * FE15_C0_D20_Q49[0][iq][9] + w[0][13] * FE15_C0_D20_Q49[0][iq][10] + w[0][14] * FE15_C0_D20_Q49[0][iq][11];
        const double w0_d01 = w[0][0] * FE15_C0_D11_Q49[0][iq][0] + w[0][3] * FE15_C0_D11_Q49[0][iq][1] + w[0][4] * FE15_C0_D11_Q49[0][iq][2] + w[0][5] * FE15_C0_D11_Q49[0][iq][3] + w[0][6] * FE15_C0_D11_Q49[0][iq][4] + w[0][7] * FE15_C0_D11_Q49[0][iq][5] + w[0][8] * FE15_C0_D11_Q49[0][iq][6] + w[0][9] * FE15_C0_D11_Q49[0][iq][7] + w[0][10] * FE15_C0_D11_Q49[0][iq][8] + w[0][11] * FE15_C0_D11_Q49[0][iq][9] + w[0][12] * FE15_C0_D11_Q49[0][iq][10] + w[0][13] * FE15_C0_D11_Q49[0][iq][11] + w[0][14] * FE15_C0_D11_Q49[0][iq][12];
        const double w0_d11 = w[0][0] * FE15_C0_D02_Q49[0][iq][0] + w[0][2] * FE15_C0_D02_Q49[0][iq][1] + w[0][4] * FE15_C0_D02_Q49[0][iq][2] + w[0][5] * FE15_C0_D02_Q49[0][iq][3] + w[0][6] * FE15_C0_D02_Q49[0][iq][4] + w[0][7] * FE15_C0_D02_Q49[0][iq][5] + w[0][8] * FE15_C0_D02_Q49[0][iq][6] + w[0][9] * FE15_C0_D02_Q49[0][iq][7] + w[0][10] * FE15_C0_D02_Q49[0][iq][8] + w[0][12] * FE15_C0_D02_Q49[0][iq][9] + w[0][13] * FE15_C0_D02_Q49[0][iq][10] + w[0][14] * FE15_C0_D02_Q49[0][iq][11];
        const double w1_d00 = w[1][0] * FE15_C0_D20_Q49[0][iq][0] + w[1][1] * FE15_C0_D20_Q49[0][iq][1] + w[1][3] * FE15_C0_D20_Q49[0][iq][2] + w[1][4] * FE15_C0_D20_Q49[0][iq][3] + w[1][6] * FE15_C0_D20_Q49[0][iq][4] + w[1][7] * FE15_C0_D20_Q49[0][iq][5] + w[1][9] * FE15_C0_D20_Q49[0][iq][6] + w[1][10] * FE15_C0_D20_Q49[0][iq][7] + w[1][11] * FE15_C0_D20_Q49[0][iq][8] + w[1][12] * FE15_C0_D20_Q49[0][iq][9] + w[1][13] * FE15_C0_D20_Q49[0][iq][10] + w[1][14] * FE15_C0_D20_Q49[0][iq][11];
        const double w1_d01 = w[1][0] * FE15_C0_D11_Q49[0][iq][0] + w[1][3] * FE15_C0_D11_Q49[0][iq][1] + w[1][4] * FE15_C0_D11_Q49[0][iq][2] + w[1][5] * FE15_C0_D11_Q49[0][iq][3] + w[1][6] * FE15_C0_D11_Q49[0][iq][4] + w[1][7] * FE15_C0_D11_Q49[0][iq][5] + w[1][8] * FE15_C0_D11_Q49[0][iq][6] + w[1][9] * FE15_C0_D11_Q49[0][iq][7] + w[1][10] * FE15_C0_D11_Q49[0][iq][8] + w[1][11] * FE15_C0_D11_Q49[0][iq][9] + w[1][12] * FE15_C0_D11_Q49[0][iq][10] + w[1][13] * FE15_C0_D11_Q49[0][iq][11] + w[1][14] * FE15_C0_D11_Q49[0][iq][12];
        const double w1_d11 = w[1][0] * FE15_C0_D02_Q49[0][iq][0] + w[1][2] * FE15_C0_D02_Q49[0][iq][1] + w[1][4] * FE15_C0_D02_Q49[0][iq][2] + w[1][5] * FE15_C0_D02_Q49[0][iq][3] + w[1][6] * FE15_C0_D02_Q49[0][iq][4] + w[1][7] * FE15_C0_D02_Q49[0][iq][5] + w[1][8] * FE15_C0_D02_Q49[0][iq][6] + w[1][9] * FE15_C0_D02_Q49[0][iq][7] + w[1][10] * FE15_C0_D02_Q49[0][iq][8] + w[1][12] * FE15_C0_D02_Q49[0][iq][9] + w[1][13] * FE15_C0_D02_Q49[0][iq][10] + w[1][14] * FE15_C0_D02_Q49[0][iq][11];
        alignas(32) double sv49[55];
        sv49[0] = -1 * w1 + w0;
        sv49[1] = sv49[0] * sv49[0];
        sv49[2] = w0_d00 * sp[3];
        sv49[3] = w0_d01 * sp[4];
        sv49[4] = sv49[2] + sv49[3];
        sv49[5] = sv49[4] * sp[3];
        sv49[6] = w0_d01 * sp[3];
        sv49[7] = w0_d11 * sp[4];
        sv49[8] = sv49[6] + sv49[7];
        sv49[9] = sv49[8] * sp[4];
        sv49[10] = sv49[5] + sv49[9];
        sv49[11] = w1_d00 * sp[3];
        sv49[12] = w1_d01 * sp[4];
        sv49[13] = sv49[11] + sv49[12];
        sv49[14] = sv49[13] * sp[3];
        sv49[15] = w1_d01 * sp[3];
        sv49[16] = w1_d11 * sp[4];
        sv49[17] = sv49[15] + sv49[16];
        sv49[18] = sv49[17] * sp[4];
        sv49[19] = sv49[14] + sv49[18];
        sv49[20] = sv49[10] + -1 * sv49[19];
        sv49[21] = sv49[20] * sv49[20];
        sv49[22] = w0_d01 * sp[5];
        sv49[23] = w0_d00 * sp[6];
        sv49[24] = sv49[22] + sv49[23];
        sv49[25] = sv49[24] * sp[3];
        sv49[26] = w0_d11 * sp[5];
        sv49[27] = w0_d01 * sp[6];
        sv49[28] = sv49[26] + sv49[27];
        sv49[29] = sv49[28] * sp[4];
        sv49[30] = sv49[25] + sv49[29];
        sv49[31] = w1_d01 * sp[5];
        sv49[32] = w1_d00 * sp[6];
        sv49[33] = sv49[31] + sv49[32];
        sv49[34] = sv49[33] * sp[3];
        sv49[35] = w1_d11 * sp[5];
        sv49[36] = w1_d01 * sp[6];
        sv49[37] = sv49[35] + sv49[36];
        sv49[38] = sv49[37] * sp[4];
        sv49[39] = sv49[34] + sv49[38];
        sv49[40] = sv49[30] + -1 * sv49[39];
        sv49[41] = sv49[40] * (2 * sv49[40]);
        sv49[42] = sv49[21] + sv49[41];
        sv49[43] = sv49[28] * sp[5];
        sv49[44] = sv49[24] * sp[6];
        sv49[45] = sv49[43] + sv49[44];
        sv49[46] = sv49[37] * sp[5];
        sv49[47] = sv49[33] * sp[6];
        sv49[48] = sv49[46] + sv49[47];
        sv49[49] = sv49[45] + -1 * sv49[48];
        sv49[50] = sv49[49] * sv49[49];
        sv49[51] = sv49[42] + sv49[50];
        sv49[52] = sv49[51] * sp[7];
        sv49[53] = sv49[1] + sv49[52];
        sv49[54] = sv49[53] * sp[8];
        const double fw0 = sv49[54] * weights49[iq];
        for (int i = 0; i < 15; ++i)
            BF0[i] += fw0 * FE15_C0_Q49[0][iq][i];
    }
    std::fill(A, A + 15, 0.0);
    for (int i = 0; i < 15; ++i)
        A[i] += BF0[i];
  }

};


class erroripdg_2h_exterior_facet_integral_1_otherwise: public ufc::exterior_facet_integral
{
public:

  erroripdg_2h_exterior_facet_integral_1_otherwise() : ufc::exterior_facet_integral()
  {

  }

  ~erroripdg_2h_exterior_facet_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 12
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 12
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           12
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights7[7] = { 0.06474248308443491, 0.1398526957446383, 0.1909150252525594, 0.2089795918367347, 0.1909150252525595, 0.1398526957446383, 0.06474248308443506 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE11_C0_D01_F_Q7[3][7][14] =
        { { { 1.0, -0.6571684215979529, 14.29719808066671, -8.997981868570923, 3.691285542835489, -0.1357122337526235, -0.09142415697001782, -0.1156951876793491, -5.197621099580689, 11.29787079114308, -14.29719808066669, 0.7935533658269562, -2.299888922572145, 0.7127821909181784 },
            { 1.0, 0.1858567064774843, 8.551002569451155, 0.2929756230329523, -0.6965015656282678, -0.6892501717349231, -0.2497131167305851, -0.2468934180119305, -4.644083161598374, 8.648661110462136, -8.551002569451141, 3.601052006268403, -8.94163673349507, 1.739532720958182 },
            { 1.0, 0.239554601470079, 2.75645267921309, 7.012378129912387, -1.675052077262232, -1.584412929660249, 0.2237702393217874, 0.1210880888684184, -3.748920403673042, 5.093912055850539, -2.756452679213075, 6.682317704827592, -12.10629018576292, -1.258345223892354 },
            { 1.0, -0.3333333333333341, 0.0, 5.999999999999985, 2.66666666666667, -2.666666666666651, 2.0, 0.0, -2.666666666666658, 1.999999999999994, 0.0, 7.999999999999948, -7.999999999999991, -7.999999999999983 },
            { 1.0, 0.4114610270355913, -0.1210880888683961, 1.034574984570569, 7.008385410595575, -3.748920403673046, 5.093912055850544, -2.756452679213073, -1.584412929660273, 0.2237702393217843, 0.1210880888684169, 6.682317704827646, -1.258345223892377, -12.10629018576295 },
            { 1.0, 3.546424620587393, 0.2468934180119602, -1.48981960422763, 6.029834898961623, -4.644083161598375, 8.648661110462129, -8.551002569451136, -0.6892501717349532, -0.249713116730592, -0.2468934180119336, 3.601052006268472, 1.73953272095819, -8.941636733495143 },
            { 1.0, 7.19694838910431, 0.1156951876793926, -0.621358033948253, 1.642047790497895, -5.197621099580689, 11.29787079114306, -14.29719808066667, -0.1357122337526566, -0.09142415697002804, -0.1156951876793569, 0.793553365827016, 0.7127821909182259, -2.299888922572244 } },
          { { -7.196948389104348, -0.6571684215979527, 0.0, 0.0, 0.0, 12.65515029016887, -8.376623834622675, 3.575590355156119, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -3.546424620587414, 0.1858567064774836, 0.0, 0.0, 0.0, 2.521167670489565, 1.782795227260572, -0.9433949836402036, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.4114610270355988, 0.2395546014700789, 0.0, 0.0, 0.0, -4.251932731382473, 5.977803145341812, -1.553963988393813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.3333333333333326, -0.3333333333333336, 0.0, 0.0, 0.0, -2.666666666666674, 0.0, 2.666666666666676, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.2395546014700797, 0.4114610270355911, 0.0, 0.0, 0.0, 1.553963988393809, -5.977803145341793, 4.251932731382487, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.1858567064774846, 3.546424620587391, 0.0, 0.0, 0.0, 0.9433949836401956, -1.782795227260551, -2.52116767048954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.6571684215979532, 7.19694838910431, 0.0, 0.0, 0.0, -3.575590355156123, 8.376623834622695, -12.65515029016883, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { -7.196948389104349, -1.0, 0.1156951876794108, 0.09142415696998363, 0.1357122337526606, 14.29719808066671, -11.29787079114303, 5.197621099580681, -1.642047790497813, 0.6213580339481817, -0.1156951876793628, 2.299888922572138, -0.7127821909182015, -0.7935533658269991 },
            { -3.546424620587411, -1.0, 0.2468934180119673, 0.2497131167305664, 0.6892501717349555, 8.551002569451157, -8.648661110462116, 4.644083161598384, -6.029834898961584, 1.489819604227595, -0.2468934180119378, 8.941636733495105, -1.739532720958182, -3.601052006268497 },
            { -0.4114610270355963, -1.0, -0.1210880888683934, -0.2237702393217988, 1.584412929660277, 2.756452679213083, -5.093912055850531, 3.748920403673061, -7.008385410595571, -1.034574984570587, 0.1210880888684111, 12.10629018576298, 1.258345223892374, -6.682317704827709 },
            { 0.333333333333335, -1.0, 0.0, -2.000000000000004, 2.666666666666665, 0.0, -1.999999999999981, 2.666666666666669, -2.666666666666686, -6.000000000000004, 0.0, 8.000000000000043, 7.999999999999996, -8.000000000000039 },
            { -0.2395546014700786, -1.0, 2.756452679213091, -5.093912055850552, 3.748920403673053, -0.1210880888684116, -0.2237702393217753, 1.584412929660283, 1.675052077262207, -7.012378129912407, -2.75645267921307, 1.258345223892417, 12.10629018576295, -6.682317704827701 },
            { -0.1858567064774898, -1.0, 8.551002569451153, -8.648661110462145, 4.644083161598379, 0.2468934180119495, 0.2497131167306046, 0.6892501717349631, 0.6965015656282474, -0.292975623032967, -8.551002569451132, -1.739532720958167, 8.941636733495104, -3.601052006268504 },
            { 0.6571684215979374, -1.0, 14.2971980806667, -11.29787079114308, 5.197621099580687, 0.1156951876793797, 0.09142415697005468, 0.1357122337526624, -3.691285542835489, 8.997981868570902, -14.29719808066668, -0.7127821909182268, 2.299888922572185, -0.7935533658270311 } } };
    alignas(32) static const double FE11_C0_D10_F_Q7[3][7][14] =
        { { { 1.0, 7.196948389104319, 1.642047790497841, -0.6213580339481972, 0.1156951876793695, -0.1357122337526754, -0.09142415697003137, -0.1156951876793693, -5.197621099580664, 11.297870791143, -14.29719808066666, 0.7935533658270516, -2.299888922572223, 0.7127821909182287 },
            { 1.0, 3.546424620587392, 6.029834898961593, -1.489819604227596, 0.2468934180119417, -0.689250171734947, -0.2497131167305924, -0.246893418011941, -4.644083161598347, 8.648661110462079, -8.551002569451112, 3.601052006268451, -8.9416367334951, 1.739532720958188 },
            { 1.0, 0.4114610270355905, 7.008385410595556, 1.034574984570589, -0.1210880888684108, -1.584412929660246, 0.2237702393217746, 0.1210880888684114, -3.748920403673021, 5.093912055850511, -2.756452679213064, 6.682317704827596, -12.10629018576291, -1.258345223892362 },
            { 1.0, -0.3333333333333338, 2.666666666666666, 5.999999999999996, 0.0, -2.666666666666638, 1.999999999999983, 0.0, -2.666666666666641, 1.99999999999998, 0.0, 7.999999999999942, -7.999999999999975, -7.999999999999975 },
            { 1.0, 0.2395546014700764, -1.675052077262221, 7.012378129912388, 2.7564526792131, -3.748920403673044, 5.093912055850553, -2.756452679213099, -1.584412929660262, 0.2237702393217799, 0.1210880888684111, 6.682317704827636, -1.258345223892371, -12.10629018576294 },
            { 1.0, 0.1858567064774799, -0.6965015656282532, 0.2929756230329499, 8.551002569451176, -4.644083161598385, 8.648661110462163, -8.551002569451175, -0.6892501717349445, -0.2497131167305984, -0.2468934180119355, 3.601052006268457, 1.739532720958184, -8.941636733495114 },
            { 1.0, -0.6571684215979532, 3.691285542835489, -8.997981868570903, 14.29719808066672, -5.197621099580694, 11.2978707911431, -14.29719808066672, -0.1357122337526477, -0.0914241569700437, -0.115695187679358, 0.7935533658269907, 0.7127821909182206, -2.299888922572203 } },
          { { -7.196948389104353, -1.0, 0.1357122337526566, 0.09142415697002571, 0.1156951876793689, -1.642047790497838, 0.6213580339481902, -0.1156951876793691, 14.29719808066678, -11.29787079114314, 5.197621099580719, 2.299888922572178, -0.7935533658270003, -0.7127821909182152 },
            { -3.546424620587413, -1.0, 0.6892501717349541, 0.2497131167305925, 0.2468934180119405, -6.029834898961599, 1.489819604227596, -0.2468934180119416, 8.551002569451191, -8.648661110462173, 4.644083161598398, 8.941636733495129, -3.601052006268486, -1.739532720958186 },
            { -0.4114610270355952, -1.0, 1.58441292966027, -0.2237702393217785, -0.1210880888684112, -7.008385410595577, -1.03457498457058, 0.1210880888684099, 2.756452679213094, -5.093912055850559, 3.74892040367306, 12.106290185763, -6.682317704827694, 1.258345223892362 },
            { 0.3333333333333385, -1.0, 2.66666666666666, -1.999999999999997, 0.0, -2.666666666666691, -5.999999999999986, 0.0, 0.0, -2.0, 2.666666666666668, 8.00000000000006, -8.00000000000003, 7.999999999999987 },
            { -0.2395546014700713, -1.0, 3.748920403673058, -5.093912055850567, 2.756452679213091, 1.675052077262203, -7.012378129912384, -2.756452679213089, -0.1210880888684195, -0.2237702393217861, 1.584412929660274, 1.258345223892416, -6.682317704827679, 12.10629018576295 },
            { -0.1858567064774764, -1.0, 4.64408316159839, -8.648661110462161, 8.551002569451168, 0.6965015656282469, -0.2929756230329472, -8.551002569451162, 0.2468934180119328, 0.2497131167305904, 0.6892501717349493, -1.73953272095817, -3.601052006268463, 8.9416367334951 },
            { 0.6571684215979583, -1.0, 5.197621099580694, -11.29787079114308, 14.29719808066672, -3.691285542835494, 8.997981868570921, -14.29719808066672, 0.1156951876793597, 0.09142415697002491, 0.1357122337526522, -0.7127821909182104, -0.7935533658269831, 2.299888922572148 } },
          { { -7.196948389104352, -0.6571684215979612, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.65515029016894, -8.376623834622775, 3.575590355156152, 0.0, 0.0, 0.0 },
            { -3.546424620587417, 0.1858567064774794, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.521167670489603, 1.782795227260526, -0.943394983640191, 0.0, 0.0, 0.0 },
            { -0.4114610270356014, 0.2395546014700793, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.25193273138246, 5.977803145341803, -1.553963988393821, 0.0, 0.0, 0.0 },
            { 0.3333333333333334, -0.3333333333333316, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.666666666666669, 0.0, 2.666666666666663, 0.0, 0.0, 0.0 },
            { -0.2395546014700734, 0.4114610270355937, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.553963988393813, -5.977803145341815, 4.251932731382482, 0.0, 0.0, 0.0 },
            { -0.1858567064774742, 3.546424620587395, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9433949836402067, -1.782795227260596, -2.521167670489532, 0.0, 0.0, 0.0 },
            { 0.6571684215979637, 7.196948389104317, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.575590355156101, 8.376623834622629, -12.65515029016881, 0.0, 0.0, 0.0 } } };
    alignas(32) static const double FE11_C0_F_Q7[3][7][12] =
        { { { 0.0, 0.8026230977948902, -0.02095685148576884, 0.3638071289871165, -0.2582245781591547, 0.1127512028629171, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.2581667235828759, -0.03831573474763156, 1.105083748031286, -0.5399210303600417, 0.214986293493512, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, -0.03244167309333449, 0.01371088227387546, 0.8188798621766097, 0.2849664799554532, -0.08511555131260401, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.01371088227387537, -0.03244167309333471, -0.0851155513126044, 0.2849664799554535, 0.81887986217661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, -0.0383157347476317, 0.2581667235828756, 0.2149862934935117, -0.5399210303600418, 1.105083748031286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, -0.02095685148576901, 0.8026230977948892, 0.1127512028629175, -0.258224578159156, 0.363807128987118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.8026230977948899, 0.0, -0.02095685148576884, 0.0, 0.0, 0.0, 0.3638071289871163, -0.2582245781591546, 0.1127512028629171, 0.0, 0.0, 0.0 },
            { 0.2581667235828757, 0.0, -0.03831573474763155, 0.0, 0.0, 0.0, 1.105083748031286, -0.5399210303600415, 0.2149862934935118, 0.0, 0.0, 0.0 },
            { -0.03244167309333452, 0.0, 0.01371088227387545, 0.0, 0.0, 0.0, 0.81887986217661, 0.284966479955453, -0.08511555131260408, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0137108822738755, 0.0, -0.03244167309333454, 0.0, 0.0, 0.0, -0.08511555131260437, 0.2849664799554536, 0.8188798621766101, 0.0, 0.0, 0.0 },
            { -0.03831573474763166, 0.0, 0.2581667235828757, 0.0, 0.0, 0.0, 0.2149862934935116, -0.5399210303600411, 1.105083748031286, 0.0, 0.0, 0.0 },
            { -0.02095685148576896, 0.0, 0.8026230977948892, 0.0, 0.0, 0.0, 0.1127512028629176, -0.2582245781591557, 0.3638071289871182, 0.0, 0.0, 0.0 } },
          { { 0.8026230977948902, -0.02095685148576887, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3638071289871163, -0.2582245781591544, 0.1127512028629169 },
            { 0.2581667235828756, -0.03831573474763168, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.105083748031286, -0.5399210303600416, 0.2149862934935116 },
            { -0.03244167309333462, 0.01371088227387541, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8188798621766104, 0.2849664799554534, -0.08511555131260426 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
            { 0.01371088227387549, -0.03244167309333462, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.08511555131260418, 0.2849664799554537, 0.8188798621766099 },
            { -0.03831573474763168, 0.2581667235828755, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2149862934935119, -0.5399210303600416, 1.105083748031286 },
            { -0.02095685148576898, 0.8026230977948891, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1127512028629177, -0.2582245781591558, 0.3638071289871185 } } };
    alignas(32) static const double FE3_C0_D01_F_Q7[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_F_Q7[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_F_Q7[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_F_Q7[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_F_Q7[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_F_Q7[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_F_Q7[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_F_Q7[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_F_Q7[0][0][1];
    alignas(32) double sp[30];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = triangle_reference_facet_normals[facet][1] * sp[3];
    sp[6] = triangle_reference_facet_normals[facet][0] * sp[4];
    sp[7] = sp[5] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet][0] * sp[9];
    sp[11] = -1 * J_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = std::pow(2 * w[3][0], 1 + w[2][0]);
    sp[20] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[21] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[22] = sp[20] + sp[21];
    sp[23] = sp[22] * sp[22];
    sp[24] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[25] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[26] = sp[24] + sp[25];
    sp[27] = sp[26] * sp[26];
    sp[28] = sp[23] + sp[27];
    sp[29] = std::sqrt(sp[28]);
    alignas(32) double BF0[12] = {};
    for (int iq = 0; iq < 7; ++iq)
    {
        // Quadrature loop body setup (num_points=7)
        // Unstructured varying computations for num_points=7
        const double w0_d1 = w[0][0] * FE11_C0_D01_F_Q7[facet][iq][0] + w[0][2] * FE11_C0_D01_F_Q7[facet][iq][1] + w[0][3] * FE11_C0_D01_F_Q7[facet][iq][2] + w[0][4] * FE11_C0_D01_F_Q7[facet][iq][3] + w[0][5] * FE11_C0_D01_F_Q7[facet][iq][4] + w[0][6] * FE11_C0_D01_F_Q7[facet][iq][5] + w[0][7] * FE11_C0_D01_F_Q7[facet][iq][6] + w[0][8] * FE11_C0_D01_F_Q7[facet][iq][7] + w[0][9] * FE11_C0_D01_F_Q7[facet][iq][8] + w[0][10] * FE11_C0_D01_F_Q7[facet][iq][9] + w[0][11] * FE11_C0_D01_F_Q7[facet][iq][10] + w[0][12] * FE11_C0_D01_F_Q7[facet][iq][11] + w[0][13] * FE11_C0_D01_F_Q7[facet][iq][12] + w[0][14] * FE11_C0_D01_F_Q7[facet][iq][13];
        const double w0_d0 = w[0][0] * FE11_C0_D10_F_Q7[facet][iq][0] + w[0][1] * FE11_C0_D10_F_Q7[facet][iq][1] + w[0][3] * FE11_C0_D10_F_Q7[facet][iq][2] + w[0][4] * FE11_C0_D10_F_Q7[facet][iq][3] + w[0][5] * FE11_C0_D10_F_Q7[facet][iq][4] + w[0][6] * FE11_C0_D10_F_Q7[facet][iq][5] + w[0][7] * FE11_C0_D10_F_Q7[facet][iq][6] + w[0][8] * FE11_C0_D10_F_Q7[facet][iq][7] + w[0][9] * FE11_C0_D10_F_Q7[facet][iq][8] + w[0][10] * FE11_C0_D10_F_Q7[facet][iq][9] + w[0][11] * FE11_C0_D10_F_Q7[facet][iq][10] + w[0][12] * FE11_C0_D10_F_Q7[facet][iq][11] + w[0][13] * FE11_C0_D10_F_Q7[facet][iq][12] + w[0][14] * FE11_C0_D10_F_Q7[facet][iq][13];
        const double w1_d1 = w[1][0] * FE11_C0_D01_F_Q7[facet][iq][0] + w[1][2] * FE11_C0_D01_F_Q7[facet][iq][1] + w[1][3] * FE11_C0_D01_F_Q7[facet][iq][2] + w[1][4] * FE11_C0_D01_F_Q7[facet][iq][3] + w[1][5] * FE11_C0_D01_F_Q7[facet][iq][4] + w[1][6] * FE11_C0_D01_F_Q7[facet][iq][5] + w[1][7] * FE11_C0_D01_F_Q7[facet][iq][6] + w[1][8] * FE11_C0_D01_F_Q7[facet][iq][7] + w[1][9] * FE11_C0_D01_F_Q7[facet][iq][8] + w[1][10] * FE11_C0_D01_F_Q7[facet][iq][9] + w[1][11] * FE11_C0_D01_F_Q7[facet][iq][10] + w[1][12] * FE11_C0_D01_F_Q7[facet][iq][11] + w[1][13] * FE11_C0_D01_F_Q7[facet][iq][12] + w[1][14] * FE11_C0_D01_F_Q7[facet][iq][13];
        const double w1_d0 = w[1][0] * FE11_C0_D10_F_Q7[facet][iq][0] + w[1][1] * FE11_C0_D10_F_Q7[facet][iq][1] + w[1][3] * FE11_C0_D10_F_Q7[facet][iq][2] + w[1][4] * FE11_C0_D10_F_Q7[facet][iq][3] + w[1][5] * FE11_C0_D10_F_Q7[facet][iq][4] + w[1][6] * FE11_C0_D10_F_Q7[facet][iq][5] + w[1][7] * FE11_C0_D10_F_Q7[facet][iq][6] + w[1][8] * FE11_C0_D10_F_Q7[facet][iq][7] + w[1][9] * FE11_C0_D10_F_Q7[facet][iq][8] + w[1][10] * FE11_C0_D10_F_Q7[facet][iq][9] + w[1][11] * FE11_C0_D10_F_Q7[facet][iq][10] + w[1][12] * FE11_C0_D10_F_Q7[facet][iq][11] + w[1][13] * FE11_C0_D10_F_Q7[facet][iq][12] + w[1][14] * FE11_C0_D10_F_Q7[facet][iq][13];
        alignas(32) double sv7[20];
        sv7[0] = w0_d1 * sp[3];
        sv7[1] = w0_d0 * sp[4];
        sv7[2] = sv7[0] + sv7[1];
        sv7[3] = w1_d1 * sp[3];
        sv7[4] = w1_d0 * sp[4];
        sv7[5] = sv7[3] + sv7[4];
        sv7[6] = sv7[2] + -1 * sv7[5];
        sv7[7] = sv7[6] * sp[17];
        sv7[8] = w0_d0 * sp[9];
        sv7[9] = w0_d1 * sp[11];
        sv7[10] = sv7[8] + sv7[9];
        sv7[11] = w1_d0 * sp[9];
        sv7[12] = w1_d1 * sp[11];
        sv7[13] = sv7[11] + sv7[12];
        sv7[14] = sv7[10] + -1 * sv7[13];
        sv7[15] = sv7[14] * sp[18];
        sv7[16] = sv7[7] + sv7[15];
        sv7[17] = sv7[16] * sv7[16];
        sv7[18] = sv7[17] * sp[19];
        sv7[19] = sv7[18] * sp[29];
        const double fw0 = sv7[19] * weights7[iq];
        for (int i = 0; i < 12; ++i)
            BF0[i] += fw0 * FE11_C0_F_Q7[facet][iq][i];
    }
    std::fill(A, A + 15, 0.0);
    for (int i = 0; i < 12; ++i)
        A[i] += BF0[i];
  }

};


class erroripdg_2h_interior_facet_integral_1_otherwise: public ufc::interior_facet_integral
{
public:

  erroripdg_2h_interior_facet_integral_1_otherwise() : ufc::interior_facet_integral()
  {

  }

  ~erroripdg_2h_interior_facet_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs_0,
                       const double * coordinate_dofs_1,
                       std::size_t facet_0,
                       std::size_t facet_1,
                       int cell_orientation_0,
                       int cell_orientation_1) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 12
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 12
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           12
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights7[7] = { 0.06474248308443491, 0.1398526957446383, 0.1909150252525594, 0.2089795918367347, 0.1909150252525595, 0.1398526957446383, 0.06474248308443506 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE19_C0_D01_F_Q7[3][7][14] =
        { { { 1.0, -0.6571684215979529, 14.29719808066671, -8.997981868570923, 3.691285542835489, -0.1357122337526235, -0.09142415697001782, -0.1156951876793491, -5.197621099580689, 11.29787079114308, -14.29719808066669, 0.7935533658269562, -2.299888922572145, 0.7127821909181784 },
            { 1.0, 0.1858567064774843, 8.551002569451155, 0.2929756230329523, -0.6965015656282678, -0.6892501717349231, -0.2497131167305851, -0.2468934180119305, -4.644083161598374, 8.648661110462136, -8.551002569451141, 3.601052006268403, -8.94163673349507, 1.739532720958182 },
            { 1.0, 0.239554601470079, 2.75645267921309, 7.012378129912387, -1.675052077262232, -1.584412929660249, 0.2237702393217874, 0.1210880888684184, -3.748920403673042, 5.093912055850539, -2.756452679213075, 6.682317704827592, -12.10629018576292, -1.258345223892354 },
            { 1.0, -0.3333333333333341, 0.0, 5.999999999999985, 2.66666666666667, -2.666666666666651, 2.0, 0.0, -2.666666666666658, 1.999999999999994, 0.0, 7.999999999999948, -7.999999999999991, -7.999999999999983 },
            { 1.0, 0.4114610270355913, -0.1210880888683961, 1.034574984570569, 7.008385410595575, -3.748920403673046, 5.093912055850544, -2.756452679213073, -1.584412929660273, 0.2237702393217843, 0.1210880888684169, 6.682317704827646, -1.258345223892377, -12.10629018576295 },
            { 1.0, 3.546424620587393, 0.2468934180119602, -1.48981960422763, 6.029834898961623, -4.644083161598375, 8.648661110462129, -8.551002569451136, -0.6892501717349532, -0.249713116730592, -0.2468934180119336, 3.601052006268472, 1.73953272095819, -8.941636733495143 },
            { 1.0, 7.19694838910431, 0.1156951876793926, -0.621358033948253, 1.642047790497895, -5.197621099580689, 11.29787079114306, -14.29719808066667, -0.1357122337526566, -0.09142415697002804, -0.1156951876793569, 0.793553365827016, 0.7127821909182259, -2.299888922572244 } },
          { { -7.196948389104348, -0.6571684215979527, 0.0, 0.0, 0.0, 12.65515029016887, -8.376623834622675, 3.575590355156119, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -3.546424620587414, 0.1858567064774836, 0.0, 0.0, 0.0, 2.521167670489565, 1.782795227260572, -0.9433949836402036, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.4114610270355988, 0.2395546014700789, 0.0, 0.0, 0.0, -4.251932731382473, 5.977803145341812, -1.553963988393813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.3333333333333326, -0.3333333333333336, 0.0, 0.0, 0.0, -2.666666666666674, 0.0, 2.666666666666676, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.2395546014700797, 0.4114610270355911, 0.0, 0.0, 0.0, 1.553963988393809, -5.977803145341793, 4.251932731382487, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.1858567064774846, 3.546424620587391, 0.0, 0.0, 0.0, 0.9433949836401956, -1.782795227260551, -2.52116767048954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.6571684215979532, 7.19694838910431, 0.0, 0.0, 0.0, -3.575590355156123, 8.376623834622695, -12.65515029016883, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { -7.196948389104349, -1.0, 0.1156951876794108, 0.09142415696998363, 0.1357122337526606, 14.29719808066671, -11.29787079114303, 5.197621099580681, -1.642047790497813, 0.6213580339481817, -0.1156951876793628, 2.299888922572138, -0.7127821909182015, -0.7935533658269991 },
            { -3.546424620587411, -1.0, 0.2468934180119673, 0.2497131167305664, 0.6892501717349555, 8.551002569451157, -8.648661110462116, 4.644083161598384, -6.029834898961584, 1.489819604227595, -0.2468934180119378, 8.941636733495105, -1.739532720958182, -3.601052006268497 },
            { -0.4114610270355963, -1.0, -0.1210880888683934, -0.2237702393217988, 1.584412929660277, 2.756452679213083, -5.093912055850531, 3.748920403673061, -7.008385410595571, -1.034574984570587, 0.1210880888684111, 12.10629018576298, 1.258345223892374, -6.682317704827709 },
            { 0.333333333333335, -1.0, 0.0, -2.000000000000004, 2.666666666666665, 0.0, -1.999999999999981, 2.666666666666669, -2.666666666666686, -6.000000000000004, 0.0, 8.000000000000043, 7.999999999999996, -8.000000000000039 },
            { -0.2395546014700786, -1.0, 2.756452679213091, -5.093912055850552, 3.748920403673053, -0.1210880888684116, -0.2237702393217753, 1.584412929660283, 1.675052077262207, -7.012378129912407, -2.75645267921307, 1.258345223892417, 12.10629018576295, -6.682317704827701 },
            { -0.1858567064774898, -1.0, 8.551002569451153, -8.648661110462145, 4.644083161598379, 0.2468934180119495, 0.2497131167306046, 0.6892501717349631, 0.6965015656282474, -0.292975623032967, -8.551002569451132, -1.739532720958167, 8.941636733495104, -3.601052006268504 },
            { 0.6571684215979374, -1.0, 14.2971980806667, -11.29787079114308, 5.197621099580687, 0.1156951876793797, 0.09142415697005468, 0.1357122337526624, -3.691285542835489, 8.997981868570902, -14.29719808066668, -0.7127821909182268, 2.299888922572185, -0.7935533658270311 } } };
    alignas(32) static const double FE19_C0_D10_F_Q7[3][7][14] =
        { { { 1.0, 7.196948389104319, 1.642047790497841, -0.6213580339481972, 0.1156951876793695, -0.1357122337526754, -0.09142415697003137, -0.1156951876793693, -5.197621099580664, 11.297870791143, -14.29719808066666, 0.7935533658270516, -2.299888922572223, 0.7127821909182287 },
            { 1.0, 3.546424620587392, 6.029834898961593, -1.489819604227596, 0.2468934180119417, -0.689250171734947, -0.2497131167305924, -0.246893418011941, -4.644083161598347, 8.648661110462079, -8.551002569451112, 3.601052006268451, -8.9416367334951, 1.739532720958188 },
            { 1.0, 0.4114610270355905, 7.008385410595556, 1.034574984570589, -0.1210880888684108, -1.584412929660246, 0.2237702393217746, 0.1210880888684114, -3.748920403673021, 5.093912055850511, -2.756452679213064, 6.682317704827596, -12.10629018576291, -1.258345223892362 },
            { 1.0, -0.3333333333333338, 2.666666666666666, 5.999999999999996, 0.0, -2.666666666666638, 1.999999999999983, 0.0, -2.666666666666641, 1.99999999999998, 0.0, 7.999999999999942, -7.999999999999975, -7.999999999999975 },
            { 1.0, 0.2395546014700764, -1.675052077262221, 7.012378129912388, 2.7564526792131, -3.748920403673044, 5.093912055850553, -2.756452679213099, -1.584412929660262, 0.2237702393217799, 0.1210880888684111, 6.682317704827636, -1.258345223892371, -12.10629018576294 },
            { 1.0, 0.1858567064774799, -0.6965015656282532, 0.2929756230329499, 8.551002569451176, -4.644083161598385, 8.648661110462163, -8.551002569451175, -0.6892501717349445, -0.2497131167305984, -0.2468934180119355, 3.601052006268457, 1.739532720958184, -8.941636733495114 },
            { 1.0, -0.6571684215979532, 3.691285542835489, -8.997981868570903, 14.29719808066672, -5.197621099580694, 11.2978707911431, -14.29719808066672, -0.1357122337526477, -0.0914241569700437, -0.115695187679358, 0.7935533658269907, 0.7127821909182206, -2.299888922572203 } },
          { { -7.196948389104353, -1.0, 0.1357122337526566, 0.09142415697002571, 0.1156951876793689, -1.642047790497838, 0.6213580339481902, -0.1156951876793691, 14.29719808066678, -11.29787079114314, 5.197621099580719, 2.299888922572178, -0.7935533658270003, -0.7127821909182152 },
            { -3.546424620587413, -1.0, 0.6892501717349541, 0.2497131167305925, 0.2468934180119405, -6.029834898961599, 1.489819604227596, -0.2468934180119416, 8.551002569451191, -8.648661110462173, 4.644083161598398, 8.941636733495129, -3.601052006268486, -1.739532720958186 },
            { -0.4114610270355952, -1.0, 1.58441292966027, -0.2237702393217785, -0.1210880888684112, -7.008385410595577, -1.03457498457058, 0.1210880888684099, 2.756452679213094, -5.093912055850559, 3.74892040367306, 12.106290185763, -6.682317704827694, 1.258345223892362 },
            { 0.3333333333333385, -1.0, 2.66666666666666, -1.999999999999997, 0.0, -2.666666666666691, -5.999999999999986, 0.0, 0.0, -2.0, 2.666666666666668, 8.00000000000006, -8.00000000000003, 7.999999999999987 },
            { -0.2395546014700713, -1.0, 3.748920403673058, -5.093912055850567, 2.756452679213091, 1.675052077262203, -7.012378129912384, -2.756452679213089, -0.1210880888684195, -0.2237702393217861, 1.584412929660274, 1.258345223892416, -6.682317704827679, 12.10629018576295 },
            { -0.1858567064774764, -1.0, 4.64408316159839, -8.648661110462161, 8.551002569451168, 0.6965015656282469, -0.2929756230329472, -8.551002569451162, 0.2468934180119328, 0.2497131167305904, 0.6892501717349493, -1.73953272095817, -3.601052006268463, 8.9416367334951 },
            { 0.6571684215979583, -1.0, 5.197621099580694, -11.29787079114308, 14.29719808066672, -3.691285542835494, 8.997981868570921, -14.29719808066672, 0.1156951876793597, 0.09142415697002491, 0.1357122337526522, -0.7127821909182104, -0.7935533658269831, 2.299888922572148 } },
          { { -7.196948389104352, -0.6571684215979612, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.65515029016894, -8.376623834622775, 3.575590355156152, 0.0, 0.0, 0.0 },
            { -3.546424620587417, 0.1858567064774794, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.521167670489603, 1.782795227260526, -0.943394983640191, 0.0, 0.0, 0.0 },
            { -0.4114610270356014, 0.2395546014700793, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.25193273138246, 5.977803145341803, -1.553963988393821, 0.0, 0.0, 0.0 },
            { 0.3333333333333334, -0.3333333333333316, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.666666666666669, 0.0, 2.666666666666663, 0.0, 0.0, 0.0 },
            { -0.2395546014700734, 0.4114610270355937, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.553963988393813, -5.977803145341815, 4.251932731382482, 0.0, 0.0, 0.0 },
            { -0.1858567064774742, 3.546424620587395, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9433949836402067, -1.782795227260596, -2.521167670489532, 0.0, 0.0, 0.0 },
            { 0.6571684215979637, 7.196948389104317, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.575590355156101, 8.376623834622629, -12.65515029016881, 0.0, 0.0, 0.0 } } };
    alignas(32) static const double FE19_C0_F_Q7[3][7][12] =
        { { { 0.0, 0.8026230977948902, -0.02095685148576884, 0.3638071289871165, -0.2582245781591547, 0.1127512028629171, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.2581667235828759, -0.03831573474763156, 1.105083748031286, -0.5399210303600417, 0.214986293493512, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, -0.03244167309333449, 0.01371088227387546, 0.8188798621766097, 0.2849664799554532, -0.08511555131260401, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.01371088227387537, -0.03244167309333471, -0.0851155513126044, 0.2849664799554535, 0.81887986217661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, -0.0383157347476317, 0.2581667235828756, 0.2149862934935117, -0.5399210303600418, 1.105083748031286, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, -0.02095685148576901, 0.8026230977948892, 0.1127512028629175, -0.258224578159156, 0.363807128987118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.8026230977948899, 0.0, -0.02095685148576884, 0.0, 0.0, 0.0, 0.3638071289871163, -0.2582245781591546, 0.1127512028629171, 0.0, 0.0, 0.0 },
            { 0.2581667235828757, 0.0, -0.03831573474763155, 0.0, 0.0, 0.0, 1.105083748031286, -0.5399210303600415, 0.2149862934935118, 0.0, 0.0, 0.0 },
            { -0.03244167309333452, 0.0, 0.01371088227387545, 0.0, 0.0, 0.0, 0.81887986217661, 0.284966479955453, -0.08511555131260408, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0137108822738755, 0.0, -0.03244167309333454, 0.0, 0.0, 0.0, -0.08511555131260437, 0.2849664799554536, 0.8188798621766101, 0.0, 0.0, 0.0 },
            { -0.03831573474763166, 0.0, 0.2581667235828757, 0.0, 0.0, 0.0, 0.2149862934935116, -0.5399210303600411, 1.105083748031286, 0.0, 0.0, 0.0 },
            { -0.02095685148576896, 0.0, 0.8026230977948892, 0.0, 0.0, 0.0, 0.1127512028629176, -0.2582245781591557, 0.3638071289871182, 0.0, 0.0, 0.0 } },
          { { 0.8026230977948902, -0.02095685148576887, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3638071289871163, -0.2582245781591544, 0.1127512028629169 },
            { 0.2581667235828756, -0.03831573474763168, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.105083748031286, -0.5399210303600416, 0.2149862934935116 },
            { -0.03244167309333462, 0.01371088227387541, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8188798621766104, 0.2849664799554534, -0.08511555131260426 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
            { 0.01371088227387549, -0.03244167309333462, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.08511555131260418, 0.2849664799554537, 0.8188798621766099 },
            { -0.03831573474763168, 0.2581667235828755, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2149862934935119, -0.5399210303600416, 1.105083748031286 },
            { -0.02095685148576898, 0.8026230977948891, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1127512028629177, -0.2582245781591558, 0.3638071289871185 } } };
    alignas(32) static const double FE7_C0_D01_F_Q7[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_r0_c0 = coordinate_dofs_0[0] * FE7_C0_D01_F_Q7[0][0][0] + coordinate_dofs_0[2] * FE7_C0_D01_F_Q7[0][0][1];
    const double J_r0_c3 = coordinate_dofs_0[1] * FE7_C0_D01_F_Q7[0][0][0] + coordinate_dofs_0[5] * FE7_C0_D01_F_Q7[0][0][1];
    const double J_r0_c1 = coordinate_dofs_0[0] * FE7_C0_D01_F_Q7[0][0][0] + coordinate_dofs_0[4] * FE7_C0_D01_F_Q7[0][0][1];
    const double J_r0_c2 = coordinate_dofs_0[1] * FE7_C0_D01_F_Q7[0][0][0] + coordinate_dofs_0[3] * FE7_C0_D01_F_Q7[0][0][1];
    const double J_r1_c0 = coordinate_dofs_1[0] * FE7_C0_D01_F_Q7[0][0][0] + coordinate_dofs_1[2] * FE7_C0_D01_F_Q7[0][0][1];
    const double J_r1_c3 = coordinate_dofs_1[1] * FE7_C0_D01_F_Q7[0][0][0] + coordinate_dofs_1[5] * FE7_C0_D01_F_Q7[0][0][1];
    const double J_r1_c1 = coordinate_dofs_1[0] * FE7_C0_D01_F_Q7[0][0][0] + coordinate_dofs_1[4] * FE7_C0_D01_F_Q7[0][0][1];
    const double J_r1_c2 = coordinate_dofs_1[1] * FE7_C0_D01_F_Q7[0][0][0] + coordinate_dofs_1[3] * FE7_C0_D01_F_Q7[0][0][1];
    alignas(32) double sp[49];
    sp[0] = J_r0_c0 * J_r0_c3;
    sp[1] = J_r0_c1 * J_r0_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_r0_c0 / sp[2];
    sp[4] = -1 * J_r0_c1 / sp[2];
    sp[5] = triangle_reference_facet_normals[facet_0][1] * sp[3];
    sp[6] = triangle_reference_facet_normals[facet_0][0] * sp[4];
    sp[7] = sp[5] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_r0_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet_0][0] * sp[9];
    sp[11] = -1 * J_r0_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet_0][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = J_r1_c0 * J_r1_c3;
    sp[20] = J_r1_c1 * J_r1_c2;
    sp[21] = sp[19] + -1 * sp[20];
    sp[22] = J_r1_c0 / sp[21];
    sp[23] = -1 * J_r1_c1 / sp[21];
    sp[24] = triangle_reference_facet_normals[facet_1][1] * sp[22];
    sp[25] = triangle_reference_facet_normals[facet_1][0] * sp[23];
    sp[26] = sp[24] + sp[25];
    sp[27] = sp[26] * sp[26];
    sp[28] = J_r1_c3 / sp[21];
    sp[29] = triangle_reference_facet_normals[facet_1][0] * sp[28];
    sp[30] = -1 * J_r1_c2 / sp[21];
    sp[31] = triangle_reference_facet_normals[facet_1][1] * sp[30];
    sp[32] = sp[29] + sp[31];
    sp[33] = sp[32] * sp[32];
    sp[34] = sp[27] + sp[33];
    sp[35] = std::sqrt(sp[34]);
    sp[36] = sp[26] / sp[35];
    sp[37] = sp[32] / sp[35];
    sp[38] = std::pow(2 * w[3][0], 2 + w[2][0]);
    sp[39] = J_r0_c0 * triangle_reference_facet_jacobian[facet_0][0][0];
    sp[40] = J_r0_c1 * triangle_reference_facet_jacobian[facet_0][1][0];
    sp[41] = sp[39] + sp[40];
    sp[42] = sp[41] * sp[41];
    sp[43] = triangle_reference_facet_jacobian[facet_0][0][0] * J_r0_c2;
    sp[44] = triangle_reference_facet_jacobian[facet_0][1][0] * J_r0_c3;
    sp[45] = sp[43] + sp[44];
    sp[46] = sp[45] * sp[45];
    sp[47] = sp[42] + sp[46];
    sp[48] = std::sqrt(sp[47]);
    alignas(32) double BF0[12] = {};
    for (int iq = 0; iq < 7; ++iq)
    {
        // Quadrature loop body setup (num_points=7)
        // Unstructured varying computations for num_points=7
        const double w0_r0_d1 = w[0][0] * FE19_C0_D01_F_Q7[facet_0][iq][0] + w[0][2] * FE19_C0_D01_F_Q7[facet_0][iq][1] + w[0][3] * FE19_C0_D01_F_Q7[facet_0][iq][2] + w[0][4] * FE19_C0_D01_F_Q7[facet_0][iq][3] + w[0][5] * FE19_C0_D01_F_Q7[facet_0][iq][4] + w[0][6] * FE19_C0_D01_F_Q7[facet_0][iq][5] + w[0][7] * FE19_C0_D01_F_Q7[facet_0][iq][6] + w[0][8] * FE19_C0_D01_F_Q7[facet_0][iq][7] + w[0][9] * FE19_C0_D01_F_Q7[facet_0][iq][8] + w[0][10] * FE19_C0_D01_F_Q7[facet_0][iq][9] + w[0][11] * FE19_C0_D01_F_Q7[facet_0][iq][10] + w[0][12] * FE19_C0_D01_F_Q7[facet_0][iq][11] + w[0][13] * FE19_C0_D01_F_Q7[facet_0][iq][12] + w[0][14] * FE19_C0_D01_F_Q7[facet_0][iq][13];
        const double w0_r0_d0 = w[0][0] * FE19_C0_D10_F_Q7[facet_0][iq][0] + w[0][1] * FE19_C0_D10_F_Q7[facet_0][iq][1] + w[0][3] * FE19_C0_D10_F_Q7[facet_0][iq][2] + w[0][4] * FE19_C0_D10_F_Q7[facet_0][iq][3] + w[0][5] * FE19_C0_D10_F_Q7[facet_0][iq][4] + w[0][6] * FE19_C0_D10_F_Q7[facet_0][iq][5] + w[0][7] * FE19_C0_D10_F_Q7[facet_0][iq][6] + w[0][8] * FE19_C0_D10_F_Q7[facet_0][iq][7] + w[0][9] * FE19_C0_D10_F_Q7[facet_0][iq][8] + w[0][10] * FE19_C0_D10_F_Q7[facet_0][iq][9] + w[0][11] * FE19_C0_D10_F_Q7[facet_0][iq][10] + w[0][12] * FE19_C0_D10_F_Q7[facet_0][iq][11] + w[0][13] * FE19_C0_D10_F_Q7[facet_0][iq][12] + w[0][14] * FE19_C0_D10_F_Q7[facet_0][iq][13];
        const double w1_r0_d1 = w[1][0] * FE19_C0_D01_F_Q7[facet_0][iq][0] + w[1][2] * FE19_C0_D01_F_Q7[facet_0][iq][1] + w[1][3] * FE19_C0_D01_F_Q7[facet_0][iq][2] + w[1][4] * FE19_C0_D01_F_Q7[facet_0][iq][3] + w[1][5] * FE19_C0_D01_F_Q7[facet_0][iq][4] + w[1][6] * FE19_C0_D01_F_Q7[facet_0][iq][5] + w[1][7] * FE19_C0_D01_F_Q7[facet_0][iq][6] + w[1][8] * FE19_C0_D01_F_Q7[facet_0][iq][7] + w[1][9] * FE19_C0_D01_F_Q7[facet_0][iq][8] + w[1][10] * FE19_C0_D01_F_Q7[facet_0][iq][9] + w[1][11] * FE19_C0_D01_F_Q7[facet_0][iq][10] + w[1][12] * FE19_C0_D01_F_Q7[facet_0][iq][11] + w[1][13] * FE19_C0_D01_F_Q7[facet_0][iq][12] + w[1][14] * FE19_C0_D01_F_Q7[facet_0][iq][13];
        const double w1_r0_d0 = w[1][0] * FE19_C0_D10_F_Q7[facet_0][iq][0] + w[1][1] * FE19_C0_D10_F_Q7[facet_0][iq][1] + w[1][3] * FE19_C0_D10_F_Q7[facet_0][iq][2] + w[1][4] * FE19_C0_D10_F_Q7[facet_0][iq][3] + w[1][5] * FE19_C0_D10_F_Q7[facet_0][iq][4] + w[1][6] * FE19_C0_D10_F_Q7[facet_0][iq][5] + w[1][7] * FE19_C0_D10_F_Q7[facet_0][iq][6] + w[1][8] * FE19_C0_D10_F_Q7[facet_0][iq][7] + w[1][9] * FE19_C0_D10_F_Q7[facet_0][iq][8] + w[1][10] * FE19_C0_D10_F_Q7[facet_0][iq][9] + w[1][11] * FE19_C0_D10_F_Q7[facet_0][iq][10] + w[1][12] * FE19_C0_D10_F_Q7[facet_0][iq][11] + w[1][13] * FE19_C0_D10_F_Q7[facet_0][iq][12] + w[1][14] * FE19_C0_D10_F_Q7[facet_0][iq][13];
        const double w0_r1_d1 = w[0][15] * FE19_C0_D01_F_Q7[facet_1][iq][0] + w[0][17] * FE19_C0_D01_F_Q7[facet_1][iq][1] + w[0][18] * FE19_C0_D01_F_Q7[facet_1][iq][2] + w[0][19] * FE19_C0_D01_F_Q7[facet_1][iq][3] + w[0][20] * FE19_C0_D01_F_Q7[facet_1][iq][4] + w[0][21] * FE19_C0_D01_F_Q7[facet_1][iq][5] + w[0][22] * FE19_C0_D01_F_Q7[facet_1][iq][6] + w[0][23] * FE19_C0_D01_F_Q7[facet_1][iq][7] + w[0][24] * FE19_C0_D01_F_Q7[facet_1][iq][8] + w[0][25] * FE19_C0_D01_F_Q7[facet_1][iq][9] + w[0][26] * FE19_C0_D01_F_Q7[facet_1][iq][10] + w[0][27] * FE19_C0_D01_F_Q7[facet_1][iq][11] + w[0][28] * FE19_C0_D01_F_Q7[facet_1][iq][12] + w[0][29] * FE19_C0_D01_F_Q7[facet_1][iq][13];
        const double w0_r1_d0 = w[0][15] * FE19_C0_D10_F_Q7[facet_1][iq][0] + w[0][16] * FE19_C0_D10_F_Q7[facet_1][iq][1] + w[0][18] * FE19_C0_D10_F_Q7[facet_1][iq][2] + w[0][19] * FE19_C0_D10_F_Q7[facet_1][iq][3] + w[0][20] * FE19_C0_D10_F_Q7[facet_1][iq][4] + w[0][21] * FE19_C0_D10_F_Q7[facet_1][iq][5] + w[0][22] * FE19_C0_D10_F_Q7[facet_1][iq][6] + w[0][23] * FE19_C0_D10_F_Q7[facet_1][iq][7] + w[0][24] * FE19_C0_D10_F_Q7[facet_1][iq][8] + w[0][25] * FE19_C0_D10_F_Q7[facet_1][iq][9] + w[0][26] * FE19_C0_D10_F_Q7[facet_1][iq][10] + w[0][27] * FE19_C0_D10_F_Q7[facet_1][iq][11] + w[0][28] * FE19_C0_D10_F_Q7[facet_1][iq][12] + w[0][29] * FE19_C0_D10_F_Q7[facet_1][iq][13];
        const double w1_r1_d1 = w[1][15] * FE19_C0_D01_F_Q7[facet_1][iq][0] + w[1][17] * FE19_C0_D01_F_Q7[facet_1][iq][1] + w[1][18] * FE19_C0_D01_F_Q7[facet_1][iq][2] + w[1][19] * FE19_C0_D01_F_Q7[facet_1][iq][3] + w[1][20] * FE19_C0_D01_F_Q7[facet_1][iq][4] + w[1][21] * FE19_C0_D01_F_Q7[facet_1][iq][5] + w[1][22] * FE19_C0_D01_F_Q7[facet_1][iq][6] + w[1][23] * FE19_C0_D01_F_Q7[facet_1][iq][7] + w[1][24] * FE19_C0_D01_F_Q7[facet_1][iq][8] + w[1][25] * FE19_C0_D01_F_Q7[facet_1][iq][9] + w[1][26] * FE19_C0_D01_F_Q7[facet_1][iq][10] + w[1][27] * FE19_C0_D01_F_Q7[facet_1][iq][11] + w[1][28] * FE19_C0_D01_F_Q7[facet_1][iq][12] + w[1][29] * FE19_C0_D01_F_Q7[facet_1][iq][13];
        const double w1_r1_d0 = w[1][15] * FE19_C0_D10_F_Q7[facet_1][iq][0] + w[1][16] * FE19_C0_D10_F_Q7[facet_1][iq][1] + w[1][18] * FE19_C0_D10_F_Q7[facet_1][iq][2] + w[1][19] * FE19_C0_D10_F_Q7[facet_1][iq][3] + w[1][20] * FE19_C0_D10_F_Q7[facet_1][iq][4] + w[1][21] * FE19_C0_D10_F_Q7[facet_1][iq][5] + w[1][22] * FE19_C0_D10_F_Q7[facet_1][iq][6] + w[1][23] * FE19_C0_D10_F_Q7[facet_1][iq][7] + w[1][24] * FE19_C0_D10_F_Q7[facet_1][iq][8] + w[1][25] * FE19_C0_D10_F_Q7[facet_1][iq][9] + w[1][26] * FE19_C0_D10_F_Q7[facet_1][iq][10] + w[1][27] * FE19_C0_D10_F_Q7[facet_1][iq][11] + w[1][28] * FE19_C0_D10_F_Q7[facet_1][iq][12] + w[1][29] * FE19_C0_D10_F_Q7[facet_1][iq][13];
        alignas(32) double sv7[38];
        sv7[0] = w0_r0_d1 * sp[3];
        sv7[1] = w0_r0_d0 * sp[4];
        sv7[2] = sv7[0] + sv7[1];
        sv7[3] = w1_r0_d1 * sp[3];
        sv7[4] = w1_r0_d0 * sp[4];
        sv7[5] = sv7[3] + sv7[4];
        sv7[6] = sv7[2] + -1 * sv7[5];
        sv7[7] = sv7[6] * sp[17];
        sv7[8] = w0_r0_d0 * sp[9];
        sv7[9] = w0_r0_d1 * sp[11];
        sv7[10] = sv7[8] + sv7[9];
        sv7[11] = w1_r0_d0 * sp[9];
        sv7[12] = w1_r0_d1 * sp[11];
        sv7[13] = sv7[11] + sv7[12];
        sv7[14] = sv7[10] + -1 * sv7[13];
        sv7[15] = sv7[14] * sp[18];
        sv7[16] = sv7[7] + sv7[15];
        sv7[17] = w0_r1_d1 * sp[22];
        sv7[18] = w0_r1_d0 * sp[23];
        sv7[19] = sv7[17] + sv7[18];
        sv7[20] = w1_r1_d1 * sp[22];
        sv7[21] = w1_r1_d0 * sp[23];
        sv7[22] = sv7[20] + sv7[21];
        sv7[23] = sv7[19] + -1 * sv7[22];
        sv7[24] = sv7[23] * sp[36];
        sv7[25] = w0_r1_d0 * sp[28];
        sv7[26] = w0_r1_d1 * sp[30];
        sv7[27] = sv7[25] + sv7[26];
        sv7[28] = w1_r1_d0 * sp[28];
        sv7[29] = w1_r1_d1 * sp[30];
        sv7[30] = sv7[28] + sv7[29];
        sv7[31] = sv7[27] + -1 * sv7[30];
        sv7[32] = sv7[31] * sp[37];
        sv7[33] = sv7[24] + sv7[32];
        sv7[34] = sv7[16] + -1 * sv7[33];
        sv7[35] = sv7[34] * sv7[34];
        sv7[36] = sv7[35] * (0.5 * sp[38]);
        sv7[37] = sv7[36] * sp[48];
        const double fw0 = sv7[37] * weights7[iq];
        for (int i = 0; i < 12; ++i)
            BF0[i] += fw0 * FE19_C0_F_Q7[facet_0][iq][i];
    }
    std::fill(A, A + 30, 0.0);
    for (int i = 0; i < 12; ++i)
        A[i] += BF0[i];
  }

};


class erroripdg_2h_form_0: public ufc::form
{
public:

  erroripdg_2h_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~erroripdg_2h_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "bb2b0102c1fb551018281be61b83dfd73d474889234ed8f9b0c73f06b57fd7b2bcabd8c7491374947099fb10c19531256b11f94aa542cbef7c715951b7c38db2";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 0;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new erroripdg_2h_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new erroripdg_2h_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new erroripdg_2h_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new erroripdg_2h_finite_element_3();
    case 1:
        return new erroripdg_2h_finite_element_3();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new erroripdg_2h_dofmap_3();
    case 1:
        return new erroripdg_2h_dofmap_3();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new erroripdg_2h_cell_integral_0_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class erroripdg_2h_form_1: public ufc::form
{
public:

  erroripdg_2h_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~erroripdg_2h_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "15abfd044e9a36aac618efe4a1fc3fcb1c26c3727555310dc9f77dc6eff6b82165be845fad0249d9d6a49104dc7b1c2141642db203ab357b9ea193ff9f617a74";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 4;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 4)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new erroripdg_2h_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new erroripdg_2h_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new erroripdg_2h_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new erroripdg_2h_finite_element_3();
    case 1:
        return new erroripdg_2h_finite_element_3();
    case 2:
        return new erroripdg_2h_finite_element_3();
    case 3:
        return new erroripdg_2h_finite_element_2();
    case 4:
        return new erroripdg_2h_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new erroripdg_2h_dofmap_3();
    case 1:
        return new erroripdg_2h_dofmap_3();
    case 2:
        return new erroripdg_2h_dofmap_3();
    case 3:
        return new erroripdg_2h_dofmap_2();
    case 4:
        return new erroripdg_2h_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return true;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new erroripdg_2h_cell_integral_1_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return new erroripdg_2h_exterior_facet_integral_1_otherwise();
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return new erroripdg_2h_interior_facet_integral_1_otherwise();
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace ErrorIPDG_2h
{

class CoefficientSpace_h: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_h(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg_2h_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg_2h_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_h(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg_2h_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg_2h_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_k: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_k(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg_2h_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg_2h_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_k(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg_2h_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg_2h_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_u1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_u1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg_2h_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg_2h_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_u1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg_2h_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg_2h_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_u2: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_u2(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg_2h_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg_2h_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_u2(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg_2h_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg_2h_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg_2h_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg_2h_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg_2h_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg_2h_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg_2h_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg_2h_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg_2h_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg_2h_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_a_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_a: public dolfin::Form
{
public:

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const erroripdg_2h_form_0>();
  }

  // Destructor
  ~Form_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

class MultiMeshForm_a: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_a(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_a(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Destructor
  ~MultiMeshForm_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

class Form_L_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg_2h_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg_2h_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<erroripdg_2h_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<erroripdg_2h_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_L_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_L_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_L_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_u1 Form_L_FunctionSpace_1;

typedef CoefficientSpace_u2 Form_L_FunctionSpace_2;

typedef CoefficientSpace_k Form_L_FunctionSpace_3;

typedef CoefficientSpace_h Form_L_FunctionSpace_4;

class Form_L: public dolfin::Form
{
public:

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 4), u1(*this, 0), u2(*this, 1), k(*this, 2), h(*this, 3)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const erroripdg_2h_form_1>();
  }

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u1, std::shared_ptr<const dolfin::GenericFunction> u2, std::shared_ptr<const dolfin::GenericFunction> k, std::shared_ptr<const dolfin::GenericFunction> h):
    dolfin::Form(1, 4), u1(*this, 0), u2(*this, 1), k(*this, 2), h(*this, 3)
  {
    _function_spaces[0] = V0;

    this->u1 = u1;
    this->u2 = u2;
    this->k = k;
    this->h = h;

    _ufc_form = std::make_shared<const erroripdg_2h_form_1>();
  }

  // Destructor
  ~Form_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u1")
      return 0;
    else if (name == "u2")
      return 1;
    else if (name == "k")
      return 2;
    else if (name == "h")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u1";
    case 1:
      return "u2";
    case 2:
      return "k";
    case 3:
      return "h";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_u1;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_u2;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_k;
  typedef Form_L_FunctionSpace_4 CoefficientSpace_h;

  // Coefficients
  dolfin::CoefficientAssigner u1;
  dolfin::CoefficientAssigner u2;
  dolfin::CoefficientAssigner k;
  dolfin::CoefficientAssigner h;
};

class MultiMeshForm_L: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), u1(*this, 0), u2(*this, 1), k(*this, 2), h(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u1, std::shared_ptr<const dolfin::GenericFunction> u2, std::shared_ptr<const dolfin::GenericFunction> k, std::shared_ptr<const dolfin::GenericFunction> h):
    dolfin::MultiMeshForm(V0), u1(*this, 0), u2(*this, 1), k(*this, 2), h(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->u1 = u1;
    this->u2 = u2;
    this->k = k;
    this->h = h;

  }

  // Destructor
  ~MultiMeshForm_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u1")
      return 0;
    else if (name == "u2")
      return 1;
    else if (name == "k")
      return 2;
    else if (name == "h")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u1";
    case 1:
      return "u2";
    case 2:
      return "k";
    case 3:
      return "h";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_u1;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_u2;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_k;
  typedef Form_L_FunctionSpace_4 CoefficientSpace_h;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner u1;
  dolfin::MultiMeshCoefficientAssigner u2;
  dolfin::MultiMeshCoefficientAssigner k;
  dolfin::MultiMeshCoefficientAssigner h;
};

// Class typedefs
typedef Form_a BilinearForm;
typedef MultiMeshForm_a MultiMeshBilinearForm;
typedef Form_a JacobianForm;
typedef MultiMeshForm_a MultiMeshJacobianForm;
typedef Form_L LinearForm;
typedef MultiMeshForm_L MultiMeshLinearForm;
typedef Form_L ResidualForm;
typedef MultiMeshForm_L MultiMeshResidualForm;
typedef Form_a::TestSpace FunctionSpace;
typedef Form_a::MultiMeshTestSpace MultiMeshFunctionSpace;

}

#endif
