############### A form file containing the definition of the variational forms expressed in UFL for Total Variation Flow.
#########################################################################################################################
# Before the form file can be used in the C++ program, it must be compiled using FFC by running (on the command-line):
#
### ffc -l dolfin Tvf4.ufl

# configure then the TVF build process
#######################################################################################################################
# cmake .
######################################################################################################################

# Compile then TVF using make
# make
#######################################################################################################################
# import uflHeader
# element = FiniteElement("Lagrange", triangle, uflHeader.PolynomialDegree)
import logging
logging.getLogger('FFC').setLevel(logging.WARNING)
element = FiniteElement("Lagrange", triangle, 2)

v  			= TestFunction(element)  # Test Function
du 		= TrialFunction(element)     # Trial Function

# Normal component, mesh size and right-hand side
n       = FacetNormal(triangle)
h       = 2.0*Circumradius(triangle)
h_avg   = (h('+') + h('-'))/2

ScaledTimeStepSize 	= Constant(triangle) 
Beta            = Constant(triangle)
Delta           = Constant(triangle)
Alpha           = Constant(triangle)


u  		= Coefficient(element)      # Flow solution
u0  		= Coefficient(element)     # Solution at previous timestep


     
############# Feeding the term associated with the Frobenius inner product ##################

a_11=v.dx(0).dx(0)*(Delta*u.dx(0).dx(0)+dot(grad(u)[1],grad(u)[1])*u.dx(0).dx(0)\
                             -grad(u)[0]*grad(u)[1]*u.dx(0).dx(1))

a_12=v.dx(0).dx(1)*(Delta*u.dx(0).dx(1)+dot(grad(u)[1],grad(u)[1])*u.dx(0).dx(1)\
                             -grad(u)[0]*grad(u)[1]*u.dx(1).dx(1))

a_13=v.dx(0).dx(1)*(Delta*u.dx(0).dx(1)-grad(u)[0]*grad(u)[1]*u.dx(0).dx(0)\
                             +dot(grad(u)[0],grad(u)[0])*u.dx(0).dx(1))

a_14=v.dx(1).dx(1)*(Delta*u.dx(1).dx(1)-grad(u)[0]*grad(u)[1]*u.dx(0).dx(1)\
                             +dot(grad(u)[0],grad(u)[0])*u.dx(1).dx(1))

A=a_11 + a_12 + a_13 + a_14

############ Feeding average term  u for positive facet (2nd term, First part) ##########

b_11=(Delta*u.dx(0).dx(0)('+')+dot(grad(u)[1]('+'), grad(u)[1]('+'))*u.dx(0).dx(0)('+')\
                            -grad(u)[0]('+')*grad(u)[1]('+')*u.dx(0).dx(1)('+'))*n[0]('+')*n[0]('+')

b_12=(Delta*u.dx(0).dx(1)('+')+dot(grad(u)[1]('+'), grad(u)[1]('+'))*u.dx(0).dx(1)('+')\
                            -grad(u)[0]('+')*grad(u)[1]('+')*u.dx(1).dx(1)('+'))*n[0]('+')*n[1]('+')
                            
b_13=(Delta*u.dx(0).dx(1)('+')+dot(grad(u)[0]('+'), grad(u)[0]('+'))*u.dx(0).dx(1)('+')\
                            -grad(u)[0]('+')*grad(u)[1]('+')*u.dx(0).dx(0)('+'))*n[0]('+')*n[1]('+')
                            
b_14=(Delta*u.dx(1).dx(1)('+')+dot(grad(u)[0]('+'), grad(u)[0]('+'))*u.dx(1).dx(1)('+')\
                            -grad(u)[0]('+')*grad(u)[1]('+')*u.dx(0).dx(1)('+'))*n[1]('+')*n[1]('+')
                            
B_1=b_11+b_12+b_13+b_14

############ Feeding Average term for Negative facet (2nd term, 2nd part) ##########

c_11=(Delta*u.dx(0).dx(0)('-')+dot(grad(u)[1]('-'), grad(u)[1]('-'))*u.dx(0).dx(0)('-')\
                            -grad(u)[0]('-')*grad(u)[1]('-')*u.dx(0).dx(1)('-'))*n[0]('-')*n[0]('-')

c_12=(Delta*u.dx(0).dx(1)('-')+dot(grad(u)[1]('-'), grad(u)[1]('-'))*u.dx(0).dx(1)('-')\
                            -grad(u)[0]('-')*grad(u)[1]('-')*u.dx(1).dx(1)('-'))*n[0]('-')*n[1]('-')
                            
c_13=(Delta*u.dx(0).dx(1)('-')+dot(grad(u)[0]('-'), grad(u)[0]('-'))*u.dx(0).dx(1)('-')\
                            -grad(u)[0]('-')*grad(u)[1]('-')*u.dx(0).dx(0)('-'))*n[0]('-')*n[1]('-')
                            
c_14=(Delta*u.dx(1).dx(1)('-')+dot(grad(u)[0]('-'), grad(u)[0]('-'))*u.dx(1).dx(1)('-')\
                            -grad(u)[0]('-')*grad(u)[1]('-')*u.dx(0).dx(1)('-'))*n[1]('-')*n[1]('-')     

B_2=c_11+c_12+c_13+c_14

##### Combing the negative and positive facet terms (Full definition of average)
C=0.5*(((Delta+dot(grad(u)('+'),grad(u)('+')))**(-5.0/4))*B_1 +(Delta+dot(grad(u)('-'),grad(u)('-')))**(-5.0/4)*B_2)


####  Similar calculations of average terms related to v ########################
############ Feeding average term  related to v for positive facet (3rd term)##########

d_11=(Delta*v.dx(0).dx(0)('+')+dot(grad(u)[1]('+'), grad(u)[1]('+'))*v.dx(0).dx(0)('+')\
                            -grad(u)[0]('+')*grad(u)[1]('+')*v.dx(0).dx(1)('+'))*n[0]('+')*n[0]('+')

d_12=(Delta*v.dx(0).dx(1)('+')+dot(grad(u)[1]('+'), grad(u)[1]('+'))*v.dx(0).dx(1)('+')\
                            -grad(u)[0]('+')*grad(u)[1]('+')*v.dx(1).dx(1)('+'))*n[0]('+')*n[1]('+')
                            
d_13=(Delta*v.dx(0).dx(1)('+')+dot(grad(u)[0]('+'), grad(u)[0]('+'))*v.dx(0).dx(1)('+')\
                            -grad(u)[0]('+')*grad(u)[1]('+')*v.dx(0).dx(0)('+'))*n[0]('+')*n[1]('+')
                            
d_14=(Delta*v.dx(1).dx(1)('+')+dot(grad(u)[0]('+'), grad(u)[0]('+'))*v.dx(1).dx(1)('+')\
                            -grad(u)[0]('+')*grad(u)[1]('+')*v.dx(0).dx(1)('+'))*n[1]('+')*n[1]('+')
                            
D_1=d_11+d_12+d_13+d_14

############ Feeding Average for fun v for Negative facet (3rd term) ##########

e_11=(Delta*v.dx(0).dx(0)('-')+dot(grad(u)[1]('-'), grad(u)[1]('-'))*v.dx(0).dx(0)('-')\
                            -grad(u)[0]('-')*grad(u)[1]('-')*v.dx(0).dx(1)('-'))*n[0]('-')*n[0]('-')

e_12=(Delta*v.dx(0).dx(1)('-')+dot(grad(u)[1]('-'), grad(u)[1]('-'))*v.dx(0).dx(1)('-')\
                            -grad(u)[0]('-')*grad(u)[1]('-')*v.dx(1).dx(1)('-'))*n[0]('-')*n[1]('-')
                            
e_13=(Delta*v.dx(0).dx(1)('-')+dot(grad(u)[0]('-'), grad(u)[0]('-'))*v.dx(0).dx(1)('-')\
                            -grad(u)[0]('-')*grad(u)[1]('-')*v.dx(0).dx(0)('-'))*n[0]('-')*n[1]('-')
                            
e_14=(Delta*v.dx(1).dx(1)('-')+dot(grad(u)[0]('-'), grad(u)[0]('-'))*v.dx(1).dx(1)('-')\
                            -grad(u)[0]('-')*grad(u)[1]('-')*v.dx(0).dx(1)('-'))*n[1]('-')*n[1]('-')           

D_2=e_11+e_12+e_13+e_14
##### Average
#D=0.5*(D_1+D_2)
E=0.5*((Delta+dot(grad(u)('+'),grad(u)('+')))**(-5.0/4)*D_1+(Delta+dot(grad(u)('-'),grad(u)('-')))**(-5.0/4)*D_2)

        
########### Feeding jump over v for second part   ##### 
f_12=((Delta+dot(grad(u)('+'),grad(u)('+')))**(-1.0/4))*(grad(v)[0]('+')*n[0]('+')+grad(v)[1]('+')*n[1]('+')) \
                  -((Delta+dot(grad(u)('-'),grad(u)('-')))**(-1.0/4))*(grad(v)[0]('-')*n[0]('-')+grad(v)[1]('-')*n[1]('-'))
  
#### Again jump over u for third relaxation_parameter

f_22=((Delta+dot(grad(u)('+'),grad(u)('+')))**(-1.0/4))*(grad(u)[0]('+')*n[0]('+')+grad(u)[1]('+')*n[1]('+')) \
                 -((Delta+dot(grad(u)('-'),grad(u)('-')))**(-1.0/4))*(grad(u)[0]('-')*n[0]('-')+grad(u)[1]('-')*n[1]('-'))

##############Combinations of Jumps and Averages over the boundary#############################
########Feeding of average for u for the boundary
bb_11=(Delta*u.dx(0).dx(0)+dot(grad(u)[1], grad(u)[1])*u.dx(0).dx(0)\
                            -grad(u)[0]*grad(u)[1]*u.dx(0).dx(1))*dot(n[0],n[0])

bb_12=(Delta*u.dx(0).dx(1)+dot(grad(u)[1], grad(u)[1])*u.dx(0).dx(1)\
                            -grad(u)[0]*grad(u)[1]*u.dx(1).dx(1))*dot(n[0],n[1])
                            
bb_13=(Delta*u.dx(0).dx(1)+dot(grad(u)[0], grad(u)[0])*u.dx(0).dx(1)\
                            -grad(u)[0]*grad(u)[1]*u.dx(0).dx(0))*dot(n[0],n[1])
                            
bb_14=(Delta*u.dx(1).dx(1)+dot(grad(u)[0], grad(u)[0])*u.dx(1).dx(1)\
                            -grad(u)[0]*grad(u)[1]*u.dx(0).dx(1))*dot(n[1],n[1])
                            
bB_1=bb_11+bb_12+bb_13+bb_14
avgu1=((Delta+dot(grad(u),grad(u)))**(-5.0/4.0))*bB_1

###Feeding the average for function v on the boundary

bd_11=(Delta*v.dx(0).dx(0)+dot(grad(u)[1], grad(u)[1])*v.dx(0).dx(0)\
                            -grad(u)[0]*grad(u)[1]*v.dx(0).dx(1))*dot(n[0],n[0])

bd_12=(Delta*v.dx(0).dx(1)+dot(grad(u)[1], grad(u)[1])*v.dx(0).dx(1)\
                            -grad(u)[0]*grad(u)[1]*v.dx(1).dx(1))*dot(n[0],n[1])
                            
bd_13=(Delta*v.dx(0).dx(1)+dot(grad(u)[0], grad(u)[0])*v.dx(0).dx(1)\
                            -grad(u)[0]*grad(u)[1]*v.dx(0).dx(0))*dot(n[0],n[1])
                            
bd_14=(Delta*v.dx(1).dx(1)+dot(grad(u)[0], grad(u)[0])*v.dx(1).dx(1)\
                            -grad(u)[0]*grad(u)[1]*v.dx(0).dx(1))*dot(n[1],n[1])
                            
bD_1=bd_11+bd_12+bd_13+bd_14

avgv2=((Delta+dot(grad(u),grad(u)))**(-5.0/4.0))*bD_1

# Jump on the boundary for u
jumpu1=((Delta+dot(grad(u),grad(u)))**(-1.0/4.0))*(grad(u)[0]*n[0]+grad(u)[1]*n[1])

#jump in the boundary for v
jumpv2 =((Delta+dot(grad(u),grad(u)))**(-1.0/4.0))*(grad(v)[0]*n[0]+grad(v)[1]*n[1])

###################################

######Different parts 
####First part
F_1=((Delta+dot(grad(u),grad(u)))**(-3.0/2.0))*A*dx

#### Second part
F_2=inner(C, f_12)*dS
#for the boundary
F_22=inner(avgu1,jumpv2)*ds
#adding the boundary term
F2_2=F_2 +F_22

###Third part 
F_3=inner(E,f_22)*dS
#for the boundary
F_33=inner(avgv2,jumpu1)*ds
#After addin the boundary
F3_3=F_3+F_33

### Fourth part
F_4=inner(f_22, f_12)
#for the boundary
F_44=inner(jumpu1, jumpv2)
#after adding internal and boundary term
F_5=(Alpha/h_avg)*F_4*dS + (Alpha/h)*F_44*ds 

### first part of variational formulation
F_T1 = v*(u-u0)*dx

#Variational formulation

F = F_T1 + ScaledTimeStepSize*(Delta**2)*Beta*(F_1 - F2_2 - F3_3 + F_5)

J = derivative(F, u, du)



